#@+leo-ver=5-thin
#@+node:swot.20251010105134.1: * @file service-order/src/main/resources/application.yml
#@@language yaml
#@+others
#@+node:swot.20251010105134.2: ** spring -> import application-feign.yml
#@+doc
# [source, yaml]
# ----
#@@c
spring:
    config:
        import: application-feign.yml
    application:
        # 起个名字作为服务名称(该服务注册到 eureka 注册中心的名称，比如订单服务)
        name: app-order
    cloud:
        circuitbreaker:
            resilience4j:
                enabled: false
        # sentinel:
            # # transport:
                # # dashboard: localhost:8858  # Sentinel 控制台地址
            # # eager: true  # 立即初始化 Sentinel
            # feign:
                # enabled: true  # 开启 Sentinel 对 Feign 的支持
#@+doc
# ----
#@+node:swot.20251010105134.3: ** feign 开启断路器（测试时需要关闭 feign 断路器功能）
#@+doc
# [source,yaml]
# ----
#@@c
#@@language yaml
feign:
    circuitbreaker:
        enabled: true
#@+doc
# ----
#
#@+node:swot.20251010105134.4: ** @ignore-tree 
#@+node:swot.20251010105134.5: *3* server
#@+doc
# [source,yaml]
# ----
#@@c
server:
    port: 8091
#@+doc
# ----
#@+node:swot.20251010105134.6: *3* eureka
#@+doc
# [source,yaml]
# ----
#@@c
# 服务注册到 eureka 注册中心的地址
eureka:
    client:
        service-url:
            # defaultZone: http://root:root@127.0.0.1:8761/eureka/
            defaultZone: http://root:root@eureka1:8761/eureka/,http://root:root@eureka2:8762/eureka/,http://root:root@eureka3:8763/eureka/
        register-with-eureka: true  # 因为该应用为服务提供者，是 eureka 的一个客户端，需要注册到注册中心
        fetch-registry: true        # 是否需要从 eureka 上检索服务
    instance:
        prefer-ip-address: true     # 使用 IP地址 注册而不是主机名
        ip-address: 127.0.0.1       # 客户端在注册时使用自己的 IP，而不是主机名
        # 这是生产环境的最佳实践。避免主机名解析问题
#@+doc
# ----
#@+node:swot.20251010105134.7: *3* resilience4j -- 修改成 configs: default
#@+doc
# [source,yaml]
# ----
#@@c
#@@language yaml
resilience4j:
    circuitbreaker:
        configs:
            default: # --New 让 SpringCloud 自动管理服务名，否则找不到断路器
                sliding-window-size: 5                  # 需要 5次调用来计算失败率
                failure-rate-threshold: 50              # 50% 失败率才跳闸
                wait-duration-in-open-state: 10s        # 10 秒后进入半开状态
                permitted-number-of-calls-in-half-open-state: 2     # 半开状态允许 2 次调用
                sliding-window-type: COUNT_BASED        # 基于调用次数
                record-exceptions: # 哪些异常算失败
                    - org.springframework.web.client.HttpServerErrorException
                    - org.springframework.web.client.ResourceAccessException
                    - java.lang.RuntimeException
                    - java.io.IOException
                ignore-exceptions: # 忽略的异常类型
                    - java.lang.IllegalArgumentException
                register-health-indicator: true         # --New 启用健康检查
#@+doc
# ----
#
# NOTE: 实际生产要宽松一些的。
#
# [caption=]
# 测试 vs 生产
# [cols="1,1,1",options="header"]
# |===
# | 场景    | 测试配置 | 生产配置
# | 窗口大小 | 5 次调用 | 100次调用
# | 故障阈值 | 50%     | 75%
# | 恢复时间 | 10 秒   | 60秒
# | 目的    | 快速验证 | 稳定运行
# |===
#@+node:swot.20251010105134.8: *3* management
#@+doc
# [source,yaml]
# ----
#@@c
#@@language yaml
management:
    endpoints:
        web:
            exposure:
                include: health,info,circuitbreakerevents  # 暴露断路器事件端点
    endpoint:
        health:
            show-details: always
    health:
        circuitbreakers:
            enabled: true  # 启用断路器健康检查
#@+doc
# ----
#
#@+node:swot.20251010105134.9: *3* logging
#@+doc
# [source,yaml]
# ----
#@@c
#@@language yaml
logging:
    level:
        # noinspection undefined
        com.tjise.serviceorder.client: debug
#@+doc
# ----
#
#@-others
#@-leo
