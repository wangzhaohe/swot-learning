<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: https://leo-editor.github.io/leo-editor/leo_toc.html -->
<leo_file xmlns:leo="https://leo-editor.github.io/leo-editor/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="swot.20250909151313.2" descendentVnodeUnknownAttributes=""><vh>@adoc SpringClound.adoc</vh>
<v t="swot.20250909151510.1" descendentVnodeUnknownAttributes="7d7100285805000000302e322e3471017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313871077573580b000000302e342e302e302e312e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3134710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175580b000000302e342e312e302e302e3071207d7121285808000000616e6e6f7461746571227d71232858080000007072696f7269747971244b01580a000000707269736574646174657125580a000000323032352d30392d3134712675580500000069636f6e7371275d71287d71292868126813681368146815580d000000636c656f2f707269312e706e67712a6817681868194b00681a4b02681b4b01681c681d681e681f756175580b000000302e342e312e312e312e30712b7d712c285808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4b02580a000000707269736574646174657130580a000000323032352d30392d3134713175580500000069636f6e7371325d71337d71342868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e6771356815580d000000636c656f2f707269322e706e6771366817681868194b00681a4b02681b4b01681c681d681e681f756175580b000000302e342e312e322e312e3171377d7138285808000000616e6e6f7461746571397d713a2858080000007072696f72697479713b4b03580a00000070726973657464617465713c580a000000323032352d30392d3134713d75580500000069636f6e73713e5d713f7d71402868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e6771416815580d000000636c656f2f707269332e706e6771426817681868194b00681a4b02681b4b01681c681d681e681f756175580b000000302e342e322e302e312e3071437d71445808000000616e6e6f7461746571457d71462858080000007072696f7269747971474d0f27580a000000707269736574646174657148580a000000323032352d30392d313471497573580b000000302e342e322e302e312e31714a7d714b285808000000616e6e6f74617465714c7d714d2858080000007072696f72697479714e4b01580a00000070726973657464617465714f580a000000323032352d30392d3134715075580500000069636f6e7371515d71527d71532868126813681368146815580d000000636c656f2f707269312e706e6771546817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e342e322e3171557d71565808000000616e6e6f7461746571577d71582858080000007072696f7269747971594d0f27580a00000070726973657464617465715a580a000000323032352d30392d3134715b7573580b000000302e342e332e302e302e30715c7d715d5808000000616e6e6f74617465715e7d715f2858080000007072696f7269747971604d0f27580a000000707269736574646174657161580a000000323032352d30392d313471627573580b000000302e342e332e302e302e3171637d7164285808000000616e6e6f7461746571657d71662858080000007072696f7269747971674b01580a000000707269736574646174657168580a000000323032352d30392d3134716975580500000069636f6e73716a5d716b7d716c2868126813681368146815580d000000636c656f2f707269312e706e67716d6817681868194b00681a4b02681b4b01681c681d681e681f756175580b000000302e342e332e312e312e30716e7d716f5808000000616e6e6f7461746571707d71712858080000007072696f7269747971724d0f27580a000000707269736574646174657173580a000000323032352d30392d313471747573580b000000302e342e332e312e312e3171757d71765808000000616e6e6f7461746571777d71782858080000007072696f7269747971794d0f27580a00000070726973657464617465717a580a000000323032352d30392d3134717b7573580b000000302e342e332e312e312e32717c7d717d285808000000616e6e6f74617465717e7d717f2858080000007072696f7269747971804b02580a000000707269736574646174657181580a000000323032352d30392d3134718275580500000069636f6e7371835d71847d71852868126813681368356815580d000000636c656f2f707269322e706e6771866817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e342e332e3271877d7188285808000000616e6e6f7461746571897d718a2858080000007072696f72697479718b4b03580a00000070726973657464617465718c580a000000323032352d30392d3134718d75580500000069636f6e73718e5d718f7d71902868126813681368416815580d000000636c656f2f707269332e706e6771916817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e352e302e3071927d7193285808000000616e6e6f7461746571947d71952858080000007072696f7269747971964b01580a000000707269736574646174657197580a000000323032352d30392d3135719875580500000069636f6e7371995d719a7d719b2868126813681368146815580d000000636c656f2f707269312e706e67719c6817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e352e302e31719d7d719e5808000000616e6e6f74617465719f7d71a02858080000007072696f7269747971a14d0f27580a0000007072697365746461746571a2580a000000323032352d30392d313571a375735809000000302e352e302e312e3171a47d71a5285808000000616e6e6f7461746571a67d71a72858080000007072696f7269747971a84b02580a0000007072697365746461746571a9580a000000323032352d30392d313571aa75580500000069636f6e7371ab5d71ac7d71ad2868126813681368356815580d000000636c656f2f707269322e706e6771ae6817681868194b00681a4b02681b4b01681c681d681e681f756175580b000000302e352e302e312e312e3071af7d71b05808000000616e6e6f7461746571b17d71b22858080000007072696f7269747971b34d0f27580a0000007072697365746461746571b4580a000000323032352d30392d313471b57573580b000000302e352e302e312e312e3171b67d71b75808000000616e6e6f7461746571b87d71b92858080000007072696f7269747971ba4d0f27580a0000007072697365746461746571bb580a000000323032352d30392d313471bc7573580b000000302e352e302e312e312e3271bd7d71be285808000000616e6e6f7461746571bf7d71c02858080000007072696f7269747971c14b03580a0000007072697365746461746571c2580a000000323032352d30392d313571c375580500000069636f6e7371c45d71c57d71c62868126813681368416815580d000000636c656f2f707269332e706e6771c76817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e352e312e3071c87d71c9285808000000616e6e6f7461746571ca7d71cb2858080000007072696f7269747971cc4b01580a0000007072697365746461746571cd580a000000323032352d30392d313671ce75580500000069636f6e7371cf5d71d07d71d12868126813681368146815580d000000636c656f2f707269312e706e6771d26817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e352e312e3171d37d71d45808000000616e6e6f7461746571d57d71d62858080000007072696f7269747971d74d0f27580a0000007072697365746461746571d8580a000000323032352d30392d313571d975735809000000302e352e312e312e3171da7d71db5808000000616e6e6f7461746571dc7d71dd2858080000007072696f7269747971de4d0f27580a0000007072697365746461746571df580a000000323032352d30392d313571e07573580b000000302e352e312e312e312e3071e17d71e2285808000000616e6e6f7461746571e37d71e42858080000007072696f7269747971e54b02580a0000007072697365746461746571e6580a000000323032352d30392d323871e775580500000069636f6e7371e85d71e97d71ea2868126813681368356815580d000000636c656f2f707269322e706e6771eb6817681868194b00681a4b02681b4b01681c681d681e681f756175580b000000302e352e312e312e312e3271ec7d71ed5808000000616e6e6f7461746571ee7d71ef2858080000007072696f7269747971f04d0f27580a0000007072697365746461746571f1580a000000323032352d30392d313471f27573580b000000302e352e312e312e312e3371f37d71f45808000000616e6e6f7461746571f57d71f62858080000007072696f7269747971f74d0f27580a0000007072697365746461746571f8580a000000323032352d30392d313471f97573580b000000302e352e312e312e312e3471fa7d71fb285808000000616e6e6f7461746571fc7d71fd2858080000007072696f7269747971fe4b03580a0000007072697365746461746571ff580a000000323032352d30392d3135720001000075580500000069636f6e7372010100005d72020100007d72030100002868126813681368416815580d000000636c656f2f707269332e706e6772040100006817681868194b00681a4b02681b4b01681c681d681e681f756175580b000000302e362e322e302e302e3072050100007d7206010000285808000000616e6e6f7461746572070100007d72080100002858080000007072696f7269747972090100004b01580a00000070726973657464617465720a010000580a000000323032352d30392d3138720b01000075580500000069636f6e73720c0100005d720d0100007d720e0100002868126813681368146815580d000000636c656f2f707269312e706e67720f0100006817681868194b00681a4b02681b4b01681c681d681e681f756175580b000000302e362e322e302e302e3172100100007d7211010000285808000000616e6e6f7461746572120100007d72130100002858080000007072696f7269747972140100004b02580a000000707269736574646174657215010000580a000000323032352d30392d3138721601000075580500000069636f6e7372170100005d72180100007d72190100002868126813681368356815580d000000636c656f2f707269322e706e67721a0100006817681868194b00681a4b02681b4b01681c681d681e681f756175580d000000302e362e322e302e302e322e30721b0100007d721c010000285808000000616e6e6f74617465721d0100007d721e0100002858080000007072696f72697479721f0100004b03580a000000707269736574646174657220010000580a000000323032352d30392d3138722101000075580500000069636f6e7372220100005d72230100007d72240100002868126813681368416815580d000000636c656f2f707269332e706e6772250100006817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e362e322e3172260100007d7227010000285808000000616e6e6f7461746572280100007d72290100002858080000007072696f72697479722a0100004b04580a00000070726973657464617465722b010000580a000000323032352d30392d3138722c01000075580500000069636f6e73722d0100005d722e0100007d722f0100002868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e6772300100006815580d000000636c656f2f707269342e706e6772310100006817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e362e322e3272320100007d7233010000285808000000616e6e6f7461746572340100007d72350100002858080000007072696f7269747972360100004b05580a000000707269736574646174657237010000580a000000323032352d30392d3138723801000075580500000069636f6e7372390100005d723a0100007d723b0100002868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67723c0100006815580d000000636c656f2f707269352e706e67723d0100006817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e362e332e30723e0100007d723f0100005808000000616e6e6f7461746572400100007d72410100002858080000007072696f7269747972420100004d0f27580a000000707269736574646174657243010000580a000000323032352d30392d323172440100007573580b000000302e362e332e302e302e3072450100007d7246010000285808000000616e6e6f7461746572470100007d72480100002858080000007072696f7269747972490100004b01580a00000070726973657464617465724a010000580a000000323032352d30392d3230724b01000075580500000069636f6e73724c0100005d724d0100007d724e0100002868126813681368146815580d000000636c656f2f707269312e706e67724f0100006817681868194b00681a4b02681b4b01681c681d681e681f756175580b000000302e362e332e302e302e3172500100007d7251010000285808000000616e6e6f7461746572520100007d72530100002858080000007072696f7269747972540100004b02580a000000707269736574646174657255010000580a000000323032352d30392d3230725601000075580500000069636f6e7372570100005d72580100007d72590100002868126813681368356815580d000000636c656f2f707269322e706e67725a0100006817681868194b00681a4b02681b4b01681c681d681e681f756175580d000000302e362e332e302e302e322e30725b0100007d725c0100005808000000616e6e6f74617465725d0100007d725e0100002858080000007072696f72697479725f0100004d0f27580a000000707269736574646174657260010000580a000000323032352d30392d313472610100007573580d000000302e362e332e302e302e322e3172620100007d72630100005808000000616e6e6f7461746572640100007d72650100002858080000007072696f7269747972660100004d0f27580a000000707269736574646174657267010000580a000000323032352d30392d313472680100007573580d000000302e362e332e302e302e322e3272690100007d726a010000285808000000616e6e6f74617465726b0100007d726c0100002858080000007072696f72697479726d0100004b03580a00000070726973657464617465726e010000580a000000323032352d30392d3138726f01000075580500000069636f6e7372700100005d72710100007d72720100002868126813681368416815580d000000636c656f2f707269332e706e6772730100006817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e362e332e3172740100007d72750100005808000000616e6e6f7461746572760100007d72770100002858080000007072696f7269747972780100004d0f27580a000000707269736574646174657279010000580a000000323032352d30392d3231727a01000075735809000000302e362e332e312e31727b0100007d727c0100005808000000616e6e6f74617465727d0100007d727e0100002858080000007072696f72697479727f0100004d0f27580a000000707269736574646174657280010000580a000000323032352d30392d3231728101000075735809000000302e362e332e312e3272820100007d7283010000285808000000616e6e6f7461746572840100007d72850100002858080000007072696f7269747972860100004b04580a000000707269736574646174657287010000580a000000323032352d30392d3231728801000075580500000069636f6e7372890100005d728a0100007d728b010000286812681368136a300100006815580d000000636c656f2f707269342e706e67728c0100006817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e362e332e32728d0100007d728e0100005808000000616e6e6f74617465728f0100007d72900100002858080000007072696f7269747972910100004d0f27580a000000707269736574646174657292010000580a000000323032352d30392d3231729301000075735809000000302e362e332e322e3172940100007d7295010000285808000000616e6e6f7461746572960100007d72970100002858080000007072696f7269747972980100004b05580a000000707269736574646174657299010000580a000000323032352d30392d3231729a01000075580500000069636f6e73729b0100005d729c0100007d729d010000286812681368136a3c0100006815580d000000636c656f2f707269352e706e67729e0100006817681868194b00681a4b02681b4b01681c681d681e681f756175580b000000302e362e332e322e312e30729f0100007d72a00100005808000000616e6e6f7461746572a10100007d72a20100002858080000007072696f7269747972a30100004d0f27580a0000007072697365746461746572a4010000580a000000323032352d30392d323172a50100007573580b000000302e362e332e322e312e3172a60100007d72a70100005808000000616e6e6f7461746572a80100007d72a90100002858080000007072696f7269747972aa0100004d0f27580a0000007072697365746461746572ab010000580a000000323032352d30392d323172ac0100007573580b000000302e362e332e322e312e3272ad0100007d72ae0100005808000000616e6e6f7461746572af0100007d72b00100002858080000007072696f7269747972b10100004d0f27580a0000007072697365746461746572b2010000580a000000323032352d30392d313972b301000075735807000000302e362e332e3372b40100007d72b50100005808000000616e6e6f7461746572b60100007d72b70100002858080000007072696f7269747972b80100004d0f27580a0000007072697365746461746572b9010000580a000000323032352d30392d323172ba01000075735809000000302e362e332e332e3172bb0100007d72bc010000285808000000616e6e6f7461746572bd0100007d72be0100002858080000007072696f7269747972bf0100004b06580a0000007072697365746461746572c0010000580a000000323032352d30392d323172c101000075580500000069636f6e7372c20100005d72c30100007d72c40100002868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e6772c50100006815580d000000636c656f2f707269362e706e6772c60100006817681868194b00681a4b02681b4b01681c681d681e681f756175580b000000302e362e332e342e312e3172c70100007d72c8010000285808000000616e6e6f7461746572c90100007d72ca0100002858080000007072696f7269747972cb0100004b07580a0000007072697365746461746572cc010000580a000000323032352d30392d323172cd01000075580500000069636f6e7372ce0100005d72cf0100007d72d00100002868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269372e706e6772d10100006815580d000000636c656f2f707269372e706e6772d20100006817681868194b00681a4b02681b4b01681c681d681e681f7561755809000000302e362e342e312e3072d30100007d72d40100005808000000616e6e6f7461746572d50100007d72d60100002858080000007072696f7269747972d70100004d0f27580a0000007072697365746461746572d8010000580a000000323032352d30392d323172d90100007573580b000000302e362e342e312e302e3172da0100007d72db0100005808000000616e6e6f7461746572dc0100007d72dd0100002858080000007072696f7269747972de0100004d0f27580a0000007072697365746461746572df010000580a000000323032352d30392d323172e00100007573580d000000302e362e342e312e302e312e3072e10100007d72e2010000285808000000616e6e6f7461746572e30100007d72e40100002858080000007072696f7269747972e50100004b01580a0000007072697365746461746572e6010000580a000000323032352d30392d323972e701000075580500000069636f6e7372e80100005d72e90100007d72ea0100002868126813681368146815580d000000636c656f2f707269312e706e6772eb0100006817681868194b00681a4b02681b4b01681c681d681e681f756175580d000000302e362e342e312e302e312e3172ec0100007d72ed0100005808000000616e6e6f7461746572ee0100007d72ef0100002858080000007072696f7269747972f00100004d0f27580a0000007072697365746461746572f1010000580a000000323032352d30392d323972f20100007573580d000000302e362e352e302e302e322e3172f30100007d72f4010000285808000000616e6e6f7461746572f50100007d72f60100002858080000007072696f7269747972f70100004b01580a0000007072697365746461746572f8010000580a000000323032352d30392d323172f901000075580500000069636f6e7372fa0100005d72fb0100007d72fc0100002868126813681368146815580d000000636c656f2f707269312e706e6772fd0100006817681868194b00681a4b02681b4b01681c681d681e681f7561755809000000302e362e352e312e3172fe0100007d72ff010000285808000000616e6e6f7461746572000200007d72010200002858080000007072696f7269747972020200004b02580a000000707269736574646174657203020000580a000000323032352d30392d3231720402000075580500000069636f6e7372050200005d72060200007d72070200002868126813681368356815580d000000636c656f2f707269322e706e6772080200006817681868194b00681a4b02681b4b01681c681d681e681f7561755809000000302e362e352e312e3272090200007d720a020000285808000000616e6e6f74617465720b0200007d720c0200002858080000007072696f72697479720d0200004b03580a00000070726973657464617465720e020000580a000000323032352d30392d3231720f02000075580500000069636f6e7372100200005d72110200007d72120200002868126813681368416815580d000000636c656f2f707269332e706e6772130200006817681868194b00681a4b02681b4b01681c681d681e681f7561755809000000302e362e352e322e3172140200007d7215020000285808000000616e6e6f7461746572160200007d72170200002858080000007072696f7269747972180200004b04580a000000707269736574646174657219020000580a000000323032352d30392d3231721a02000075580500000069636f6e73721b0200005d721c0200007d721d020000286812681368136a300100006815580d000000636c656f2f707269342e706e67721e0200006817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e362e352e33721f0200007d72200200005808000000616e6e6f7461746572210200007d72220200002858080000007072696f7269747972230200004d0f27580a000000707269736574646174657224020000580a000000323032352d30392d3138722502000075735809000000302e362e352e332e3272260200007d7227020000285808000000616e6e6f7461746572280200007d72290200002858080000007072696f72697479722a0200004b05580a00000070726973657464617465722b020000580a000000323032352d30392d3231722c02000075580500000069636f6e73722d0200005d722e0200007d722f020000286812681368136a3c0100006815580d000000636c656f2f707269352e706e6772300200006817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e362e352e3472310200007d72320200005808000000616e6e6f7461746572330200007d72340200002858080000007072696f7269747972350200004d0f27580a000000707269736574646174657236020000580a000000323032352d30392d3231723702000075735809000000302e362e352e342e3172380200007d72390200005808000000616e6e6f74617465723a0200007d723b0200002858080000007072696f72697479723c0200004d0f27580a00000070726973657464617465723d020000580a000000323032352d30392d3231723e02000075735809000000302e362e352e342e32723f0200007d7240020000285808000000616e6e6f7461746572410200007d72420200002858080000007072696f7269747972430200004b06580a000000707269736574646174657244020000580a000000323032352d30392d3231724502000075580500000069636f6e7372460200005d72470200007d7248020000286812681368136ac50100006815580d000000636c656f2f707269362e706e6772490200006817681868194b00681a4b02681b4b01681c681d681e681f7561755809000000302e362e362e312e30724a0200007d724b0200005808000000616e6e6f74617465724c0200007d724d0200002858080000007072696f72697479724e0200004d0f27580a00000070726973657464617465724f020000580a000000323032352d30392d313872500200007573580b000000302e362e362e312e302e3272510200007d7252020000285808000000616e6e6f7461746572530200007d72540200002858080000007072696f7269747972550200004b01580a000000707269736574646174657256020000580a000000323032352d30392d3232725702000075580500000069636f6e7372580200005d72590200007d725a0200002868126813681368146815580d000000636c656f2f707269312e706e67725b0200006817681868194b00681a4b02681b4b01681c681d681e681f7561755809000000302e362e362e312e31725c0200007d725d0200005808000000616e6e6f74617465725e0200007d725f0200002858080000007072696f7269747972600200004d0f27580a000000707269736574646174657261020000580a000000323032352d30392d323172620200007573580b000000302e362e362e312e312e3172630200007d72640200005808000000616e6e6f7461746572650200007d72660200002858080000007072696f7269747972670200004d0f27580a000000707269736574646174657268020000580a000000323032352d30392d323172690200007573580b000000302e362e362e312e312e32726a0200007d726b020000285808000000616e6e6f74617465726c0200007d726d0200002858080000007072696f72697479726e0200004b02580a00000070726973657464617465726f020000580a000000323032352d30392d3232727002000075580500000069636f6e7372710200005d72720200007d72730200002868126813681368356815580d000000636c656f2f707269322e706e6772740200006817681868194b00681a4b02681b4b01681c681d681e681f7561755811000000302e362e362e322e322e302e312e302e3172750200007d7276020000285808000000616e6e6f7461746572770200007d72780200002858080000007072696f7269747972790200004b01580a00000070726973657464617465727a020000580a000000323032352d30392d3237727b02000075580500000069636f6e73727c0200005d727d0200007d727e0200002868126813681368146815580d000000636c656f2f707269312e706e67727f0200006817681868194b00681a4b02681b4b01681c681d681e681f7561755803000000302e3772800200007d72810200005808000000616e6e6f7461746572820200007d72830200002858080000007072696f7269747972840200004d0f27580a000000707269736574646174657285020000580a000000323032352d30392d3330728602000075735805000000302e372e3172870200007d72880200005808000000616e6e6f7461746572890200007d728a0200002858080000007072696f72697479728b0200004d0f27580a00000070726973657464617465728c020000580a000000323032352d30392d3330728d02000075735807000000302e372e312e30728e0200007d728f0200005808000000616e6e6f7461746572900200007d72910200002858080000007072696f7269747972920200004d0f27580a000000707269736574646174657293020000580a000000323032352d30392d323172940200007573580b000000302e372e312e302e302e3072950200007d72960200005808000000616e6e6f7461746572970200007d72980200002858080000007072696f7269747972990200004d0f27580a00000070726973657464617465729a020000580a000000323032352d30392d3230729b0200007573580b000000302e372e312e302e302e31729c0200007d729d0200005808000000616e6e6f74617465729e0200007d729f0200002858080000007072696f7269747972a00200004d0f27580a0000007072697365746461746572a1020000580a000000323032352d30392d323072a20200007573580d000000302e372e312e302e302e322e3072a30200007d72a40200005808000000616e6e6f7461746572a50200007d72a60200002858080000007072696f7269747972a70200004d0f27580a0000007072697365746461746572a8020000580a000000323032352d30392d313472a90200007573580d000000302e372e312e302e302e322e3172aa0200007d72ab0200005808000000616e6e6f7461746572ac0200007d72ad0200002858080000007072696f7269747972ae0200004d0f27580a0000007072697365746461746572af020000580a000000323032352d30392d313472b00200007573580d000000302e372e312e302e302e322e3272b10200007d72b20200005808000000616e6e6f7461746572b30200007d72b40200002858080000007072696f7269747972b50200004d0f27580a0000007072697365746461746572b6020000580a000000323032352d30392d313872b70200007573580d000000302e372e312e302e302e322e3372b80200007d72b9020000285808000000616e6e6f7461746572ba0200007d72bb0200002858080000007072696f7269747972bc0200004b01580a0000007072697365746461746572bd020000580a000000323032352d30392d333072be02000075580500000069636f6e7372bf0200005d72c00200007d72c10200002868126813681368146815580d000000636c656f2f707269312e706e6772c20200006817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e372e312e3172c30200007d72c4020000285808000000616e6e6f7461746572c50200007d72c60200002858080000007072696f7269747972c70200004b16580a0000007072697365746461746572c8020000580a000000323032352d31302d303172c902000075580500000069636f6e7372ca0200005d72cb0200007d72cc0200002868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f786772792e706e6772cd0200006815580d000000636c656f2f786772792e706e6772ce0200006817681868194b00681a4b02681b4b01681c681d681e681f7561755809000000302e372e312e312e3172cf0200007d72d00200006ac50200007d72d10200002858080000007072696f7269747972d20200004d0f27580a0000007072697365746461746572d3020000580a000000323032352d30392d323172d40200007573580b000000302e372e312e312e312e3172d50200007d72d60200005808000000616e6e6f7461746572d70200007d72d80200002858080000007072696f7269747972d90200004d0f27580a0000007072697365746461746572da020000580a000000323032352d30392d323972db0200007573580b000000302e372e312e312e312e3272dc0200007d72dd0200006ac50200007d72de0200002858080000007072696f7269747972df0200004d0f27580a0000007072697365746461746572e0020000580a000000323032352d30392d323972e10200007573580b000000302e372e312e312e312e3372e20200007d72e30200005808000000616e6e6f7461746572e40200007d72e50200002858080000007072696f7269747972e60200004d0f27580a0000007072697365746461746572e7020000580a000000323032352d31302d303172e80200007573580d000000302e372e312e322e312e302e3172e90200007d72ea0200005808000000616e6e6f7461746572eb0200007d72ec0200002858080000007072696f7269747972ed0200004d0f27580a0000007072697365746461746572ee020000580a000000323032352d30392d323772ef0200007573580b000000302e372e312e322e312e3172f00200007d72f1020000286ae40200007d72f2020000286ae60200004b036ae7020000580a000000323032352d31302d303172f3020000756aca0200005d72f40200007d72f50200002868126813681368416815580d000000636c656f2f707269332e706e6772f60200006817681868194b00681a4b02681b4b01681c681d681e681f756175580b000000302e372e312e322e312e3272f70200007d72f8020000286ae40200007d72f9020000286ae60200004b046ae7020000580a000000323032352d31302d303172fa020000756aca0200005d72fb0200007d72fc020000286812681368136a300100006815580d000000636c656f2f707269342e706e6772fd0200006817681868194b00681a4b02681b4b01681c681d681e681f756175580b000000302e372e312e322e312e3372fe0200007d72ff020000286ae40200007d7200030000286ae60200004b056ae7020000580a000000323032352d31302d30317201030000756aca0200005d72020300007d7203030000286812681368136a3c0100006815580d000000636c656f2f707269352e706e6772040300006817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e372e312e3372050300007d72060300005808000000616e6e6f7461746572070300007d72080300002858080000007072696f7269747972090300004d0f27580a00000070726973657464617465720a030000580a000000323032352d30392d3231720b03000075735809000000302e372e312e332e31720c0300007d720d0300006a070300007d720e0300002858080000007072696f72697479720f0300004d0f27580a000000707269736574646174657210030000580a000000323032352d30392d3231721103000075735809000000302e372e312e332e3272120300007d72130300006a070300007d72140300002858080000007072696f7269747972150300004d0f27580a000000707269736574646174657216030000580a000000323032352d30392d3232721703000075735809000000302e372e312e332e3372180300007d7219030000286ae40200007d721a030000286ae60200004b046ae7020000580a000000323032352d31302d3031721b030000756aca0200005d721c0300007d721d030000286812681368136a300100006815580d000000636c656f2f707269342e706e67721e0300006817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>Spring Cloud 微服务</vh>
<v t="swot.20250909151547.1"><vh>1. Spring Cloud 微服务介绍</vh>
<v t="swot.20250909160528.1"><vh>1.1 什么是微服务？</vh></v>
<v t="swot.20250909160632.1"><vh>1.2 微服务带来的新挑战</vh></v>
<v t="swot.20250909160640.1"><vh>1.3 Spring Cloud？</vh></v>
<v t="swot.20250909160728.1"><vh>1.4 Cloud 的核心组件/子项目</vh></v>
<v t="swot.20250909160750.1"><vh>1.5 Cloud 的流派</vh></v>
<v t="swot.20250909160832.1"><vh>1.6 总结</vh></v>
</v>
<v t="swot.20250909151323.1"><vh>2. 创建一个空的工程 micro-service</vh></v>
<v t="swot.20250911081358.1" descendentVnodeUnknownAttributes="7d71005803000000302e3471017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313871077573732e"><vh>3. 创建商品微服务模块 service-item</vh>
<v t="swot.20250912101224.1"><vh>file -&gt; service-item/pom.xml</vh></v>
<v t="swot.20250912104007.1"><vh>file -&gt; service-item/src/main/java/com/tjise/serviceitem/pojo/Item.java</vh></v>
<v t="swot.20250912112243.1"><vh>file -&gt; service-item/src/main/java/com/tjise/serviceitem/service/ItemService.java</vh></v>
<v t="swot.20250912113856.1"><vh>file -&gt; service-item/src/main/java/com/tjise/serviceitem/controller/ItemController.java</vh></v>
<v t="swot.20250918221324.1" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313871077573732e"><vh>file -&gt; service-item/src/main/java/com/tjise/serviceitem/ServiceItemApplication.java</vh></v>
<v t="swot.20250912123428.1"><vh>file -&gt; service-item/src/main/resources/application.yml</vh></v>
</v>
<v t="swot.20250912140740.1"><vh>4. 创建订单微服务模块 service-order</vh>
<v t="swot.20250919081656.1"><vh>file -&gt; service-order/pom.xml</vh></v>
<v t="swot.20250912140845.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/pojo/Item.java</vh></v>
<v t="swot.20250912140908.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/pojo/Order.java</vh></v>
<v t="swot.20250912141126.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/pojo/OrderDetail.java</vh></v>
<v t="swot.20250913160821.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/OrderService.java</vh>
<v t="swot.20250922234952.1"><vh>@ignore-node import</vh></v>
<v t="swot.20250923001453.1"><vh>class OrderService</vh>
<v t="swot.20250923001649.1"><vh>ORDER_DATA 模拟数据</vh>
<v t="swot.20250923002048.1"><vh>订单 order</vh></v>
</v>
<v t="swot.20250923001803.1"><vh>queryOrderById</vh></v>
</v>
</v>
<v t="swot.20250913164316.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh></v>
<v t="swot.20250913164255.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/controller/OrderController.java</vh></v>
<v t="swot.20250913170215.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh></v>
<v t="swot.20250913172427.1"><vh>file -&gt; service-order/src/main/resources/application.yml</vh></v>
</v>
<v t="swot.20250914085607.1" descendentVnodeUnknownAttributes="7d7100285809000000302e302e302e312e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755809000000302e312e302e302e3071197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b01580a00000070726973657464617465711e580a000000323032352d30392d3134711f75580500000069636f6e7371205d71217d712228680b680c680c680d680e580d000000636c656f2f707269312e706e6771236810681168124b0068134b0268144b0168156816681768187561755809000000302e312e312e312e3071247d7125285808000000616e6e6f7461746571267d71272858080000007072696f7269747971284b02580a000000707269736574646174657129580a000000323032352d30392d3134712a75580500000069636f6e73712b5d712c7d712d28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67712e680e580d000000636c656f2f707269322e706e67712f6810681168124b0068134b0268144b0168156816681768187561755809000000302e312e322e312e3171307d7131285808000000616e6e6f7461746571327d71332858080000007072696f7269747971344b03580a000000707269736574646174657135580a000000323032352d30392d3134713675580500000069636f6e7371375d71387d713928680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67713a680e580d000000636c656f2f707269332e706e67713b6810681168124b0068134b0268144b0168156816681768187561755809000000302e322e302e312e30713c7d713d5808000000616e6e6f74617465713e7d713f2858080000007072696f7269747971404d0f27580a000000707269736574646174657141580a000000323032352d30392d3134714275735809000000302e322e302e312e3171437d7144285808000000616e6e6f7461746571457d71462858080000007072696f7269747971474b01580a000000707269736574646174657148580a000000323032352d30392d3134714975580500000069636f6e73714a5d714b7d714c28680b680c680c680d680e580d000000636c656f2f707269312e706e67714d6810681168124b0068134b0268144b0168156816681768187561755805000000302e322e31714e7d714f5808000000616e6e6f7461746571507d71512858080000007072696f7269747971524d0f27580a000000707269736574646174657153580a000000323032352d30392d3134715475735809000000302e332e302e302e3071557d71565808000000616e6e6f7461746571577d71582858080000007072696f7269747971594d0f27580a00000070726973657464617465715a580a000000323032352d30392d3134715b75735809000000302e332e302e302e31715c7d715d285808000000616e6e6f74617465715e7d715f2858080000007072696f7269747971604b01580a000000707269736574646174657161580a000000323032352d30392d3134716275580500000069636f6e7371635d71647d716528680b680c680c680d680e580d000000636c656f2f707269312e706e6771666810681168124b0068134b0268144b0168156816681768187561755809000000302e332e312e312e3071677d71685808000000616e6e6f7461746571697d716a2858080000007072696f72697479716b4d0f27580a00000070726973657464617465716c580a000000323032352d30392d3134716d75735809000000302e332e312e312e31716e7d716f5808000000616e6e6f7461746571707d71712858080000007072696f7269747971724d0f27580a000000707269736574646174657173580a000000323032352d30392d3134717475735809000000302e332e312e312e3271757d7176285808000000616e6e6f7461746571777d71782858080000007072696f7269747971794b02580a00000070726973657464617465717a580a000000323032352d30392d3134717b75580500000069636f6e73717c5d717d7d717e28680b680c680c682e680e580d000000636c656f2f707269322e706e67717f6810681168124b0068134b0268144b0168156816681768187561755805000000302e332e3271807d7181285808000000616e6e6f7461746571827d71832858080000007072696f7269747971844b03580a000000707269736574646174657185580a000000323032352d30392d3134718675580500000069636f6e7371875d71887d718928680b680c680c683a680e580d000000636c656f2f707269332e706e67718a6810681168124b0068134b0268144b016815681668176818756175752e"><vh>5. HTTP 客户端</vh>
<v t="swot.20250914092716.1" descendentVnodeUnknownAttributes="7d71005807000000302e302e312e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>5.1 RestTemplate -- Spring 提供的传统同步 HTTP 客户端</vh>
<v t="swot.20250914141436.1" descendentVnodeUnknownAttributes="7d71005805000000302e312e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh>
<v t="swot.20250914174528.1"><vh>@ignore-node import</vh></v>
<v t="swot.20250914174817.1" descendentVnodeUnknownAttributes="7d71005803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>class ItemService</vh>
<v t="swot.20250914175541.1"><vh>@ignore-node 方式一：字段注入（需要 @Autowired）</vh></v>
<v t="swot.20250914175616.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>方式二 单个构造函数注入</vh></v>
<v t="swot.20250914175705.1"><vh>@ignore-node queryItemById</vh></v>
</v>
</v>
</v>
<v t="swot.20250914105307.1" descendentVnodeUnknownAttributes="7d7100285807000000302e302e302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755807000000302e312e312e3071197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3134711f75580500000069636f6e7371205d71217d712228680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677123680e580d000000636c656f2f707269322e706e6771246810681168124b0068134b0268144b0168156816681768187561755807000000302e322e312e3171257d7126285808000000616e6e6f7461746571277d71282858080000007072696f7269747971294b03580a00000070726973657464617465712a580a000000323032352d30392d3134712b75580500000069636f6e73712c5d712d7d712e28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67712f680e580d000000636c656f2f707269332e706e6771306810681168124b0068134b0268144b016815681668176818756175752e"><vh>5.2 RestTemplate + OkHttp 可以兼容老代码</vh>
<v t="swot.20250914180307.1" descendentVnodeUnknownAttributes="7d71005805000000302e302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/pom.xml</vh>
<v t="swot.20250914181023.1" descendentVnodeUnknownAttributes="7d71005803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@ignore-node project</vh>
<v t="swot.20250914181123.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>okhttp 依赖</vh></v>
</v>
</v>
<v t="swot.20250914182058.1" descendentVnodeUnknownAttributes="7d71005805000000302e312e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh>
<v t="swot.20250914182242.1"><vh>@ignore-node import</vh></v>
<v t="swot.20250914182310.1" descendentVnodeUnknownAttributes="7d71005803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@ignore-node class ServiceOrderApplication</vh>
<v t="swot.20250914182350.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>RestTemplate restTemplate</vh></v>
</v>
</v>
<v t="swot.20250914195444.1" descendentVnodeUnknownAttributes="7d71005805000000302e312e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh>
<v t="swot.20250914195444.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250914195444.3" descendentVnodeUnknownAttributes="7d71005803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@ignore-node class ItemService</vh>
<v t="swot.20250914195444.4"><vh>@ignore-node 方式一：字段注入（需要 @Autowired）</vh></v>
<v t="swot.20250914195444.5" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>方式二 单个构造函数注入 -- 增加了查看是否成功使用了 OkHttp 打印</vh></v>
<v t="swot.20250914195444.6"><vh>@ignore-node queryItemById</vh></v>
</v>
</v>
</v>
<v t="swot.20250914091119.1" descendentVnodeUnknownAttributes="7d7100285807000000302e302e312e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735807000000302e302e312e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3134710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755803000000302e3171207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d313471267573752e"><vh>5.3 OkHttp -- 单独使用 Square 开源的高性能 HTTP 客户端</vh>
<v t="swot.20250914204525.1" descendentVnodeUnknownAttributes="7d7100285805000000302e312e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735805000000302e312e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3134710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh>
<v t="swot.20250914204525.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250914204525.3" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735803000000302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3134710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>@ignore-node class ServiceOrderApplication</vh>
<v t="swot.20250914204525.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node RestTemplate restTemplate</vh></v>
<v t="swot.20250914102420.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>OkHttpClient okHttpClient</vh></v>
</v>
</v>
<v t="swot.20250914105516.1" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh></v>
</v>
<v t="swot.20250914085621.1" descendentVnodeUnknownAttributes="7d7100285807000000302e302e302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735807000000302e302e302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3134710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755807000000302e312e312e3071207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3134712675735807000000302e312e312e3171277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3134712d75735807000000302e312e312e32712e7d712f285808000000616e6e6f7461746571307d71312858080000007072696f7269747971324b02580a000000707269736574646174657133580a000000323032352d30392d3134713475580500000069636f6e7371355d71367d71372868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e6771386815580d000000636c656f2f707269322e706e6771396817681868194b00681a4b02681b4b01681c681d681e681f7561755803000000302e32713a7d713b285808000000616e6e6f74617465713c7d713d2858080000007072696f72697479713e4b03580a00000070726973657464617465713f580a000000323032352d30392d3134714075580500000069636f6e7371415d71427d71432868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e6771446815580d000000636c656f2f707269332e706e6771456817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>5.4 WebClient  -- Spring WebFlux 提供的响应式 HTTP 客户端</vh>
<v t="swot.20250914212915.1" descendentVnodeUnknownAttributes="7d7100285805000000302e302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735805000000302e302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3134710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>file -&gt; service-order/pom.xml</vh>
<v t="swot.20250914212915.2" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735803000000302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3134710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>@ignore-node project</vh>
<v t="swot.20250914212915.3" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node okhttp 依赖</vh></v>
<v t="swot.20250914101602.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>WebClient</vh></v>
</v>
</v>
<v t="swot.20250914213134.1" descendentVnodeUnknownAttributes="7d7100285805000000302e312e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735805000000302e312e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3134710e75735805000000302e312e32710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b02580a000000707269736574646174657114580a000000323032352d30392d3134711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67711b580700000072656c50617468711c580d000000636c656f2f707269322e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e71255801000000317126756175752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh>
<v t="swot.20250914213134.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250914213134.3" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3134710e75735803000000302e32710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b02580a000000707269736574646174657114580a000000323032352d30392d3134711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67711b580700000072656c50617468711c580d000000636c656f2f707269322e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e71255801000000317126756175752e"><vh>@ignore-node class ServiceOrderApplication</vh>
<v t="swot.20250914213134.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node RestTemplate restTemplate</vh></v>
<v t="swot.20250914213134.5" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node OkHttpClient okHttpClient</vh></v>
<v t="swot.20250914102436.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>WebClient</vh></v>
</v>
</v>
<v t="swot.20250914214630.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh></v>
</v>
<v t="swot.20250914103506.1"><vh>5.5  RestClient -- Spring 6.1 才支持（目前的 Spring Boot 2.7.18 使用的是 Spring 5.3.x）</vh></v>
</v>
<v t="swot.20250920073920.1" descendentVnodeUnknownAttributes="7d7100285805000000302e302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3135710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755805000000302e302e3171197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3135711f75735807000000302e302e312e3171207d7121285808000000616e6e6f7461746571227d71232858080000007072696f7269747971244b02580a000000707269736574646174657125580a000000323032352d30392d3135712675580500000069636f6e7371275d71287d712928680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67712a680e580d000000636c656f2f707269322e706e67712b6810681168124b0068134b0268144b0168156816681768187561755809000000302e302e312e312e30712c7d712d5808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304d0f27580a000000707269736574646174657131580a000000323032352d30392d3134713275735809000000302e302e312e312e3171337d71345808000000616e6e6f7461746571357d71362858080000007072696f7269747971374d0f27580a000000707269736574646174657138580a000000323032352d30392d3134713975735809000000302e302e312e312e32713a7d713b285808000000616e6e6f74617465713c7d713d2858080000007072696f72697479713e4b03580a00000070726973657464617465713f580a000000323032352d30392d3135714075580500000069636f6e7371415d71427d714328680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677144680e580d000000636c656f2f707269332e706e6771456810681168124b0068134b0268144b0168156816681768187561755805000000302e312e3071467d7147285808000000616e6e6f7461746571487d71492858080000007072696f72697479714a4b01580a00000070726973657464617465714b580a000000323032352d30392d3136714c75580500000069636f6e73714d5d714e7d714f28680b680c680c680d680e580d000000636c656f2f707269312e706e6771506810681168124b0068134b0268144b0168156816681768187561755805000000302e312e3171517d71525808000000616e6e6f7461746571537d71542858080000007072696f7269747971554d0f27580a000000707269736574646174657156580a000000323032352d30392d3135715775735807000000302e312e312e3171587d71595808000000616e6e6f74617465715a7d715b2858080000007072696f72697479715c4d0f27580a00000070726973657464617465715d580a000000323032352d30392d3135715e75735809000000302e312e312e312e30715f7d7160285808000000616e6e6f7461746571617d71622858080000007072696f7269747971634b02580a000000707269736574646174657164580a000000323032352d30392d3238716575580500000069636f6e7371665d71677d716828680b680c680c682a680e580d000000636c656f2f707269322e706e6771696810681168124b0068134b0268144b0168156816681768187561755809000000302e312e312e312e32716a7d716b5808000000616e6e6f74617465716c7d716d2858080000007072696f72697479716e4d0f27580a00000070726973657464617465716f580a000000323032352d30392d3134717075735809000000302e312e312e312e3371717d71725808000000616e6e6f7461746571737d71742858080000007072696f7269747971754d0f27580a000000707269736574646174657176580a000000323032352d30392d3134717775735809000000302e312e312e312e3471787d7179285808000000616e6e6f74617465717a7d717b2858080000007072696f72697479717c4b03580a00000070726973657464617465717d580a000000323032352d30392d3135717e75580500000069636f6e73717f5d71807d718128680b680c680c6844680e580d000000636c656f2f707269332e706e6771826810681168124b0068134b0268144b016815681668176818756175752e"><vh>6. service-order url 硬编码问题（在后面引入 Eureka 后不用url，直接用名字了）</vh>
<v t="swot.20250915094305.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3135710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3171197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3135711f75735805000000302e312e3171207d7121285808000000616e6e6f7461746571227d71232858080000007072696f7269747971244b02580a000000707269736574646174657125580a000000323032352d30392d3135712675580500000069636f6e7371275d71287d712928680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67712a680e580d000000636c656f2f707269322e706e67712b6810681168124b0068134b0268144b0168156816681768187561755807000000302e312e312e30712c7d712d5808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304d0f27580a000000707269736574646174657131580a000000323032352d30392d3134713275735807000000302e312e312e3171337d71345808000000616e6e6f7461746571357d71362858080000007072696f7269747971374d0f27580a000000707269736574646174657138580a000000323032352d30392d3134713975735807000000302e312e312e32713a7d713b285808000000616e6e6f74617465713c7d713d2858080000007072696f72697479713e4b03580a00000070726973657464617465713f580a000000323032352d30392d3135714075580500000069636f6e7371415d71427d714328680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677144680e580d000000636c656f2f707269332e706e6771456810681168124b0068134b0268144b016815681668176818756175752e"><vh>6.1 解决 service-order url 硬编码问题：以 WebClient 为例使用 @Value</vh>
<v t="swot.20250915102329.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3135710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/resources/application.yml</vh></v>
<v t="swot.20250915140414.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3135710775735803000000302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b02580a00000070726973657464617465710d580a000000323032352d30392d3135710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677114580700000072656c506174687115580d000000636c656f2f707269322e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755805000000302e312e3071207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3134712675735805000000302e312e3171277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3134712d75735805000000302e312e32712e7d712f285808000000616e6e6f7461746571307d71312858080000007072696f7269747971324b03580a000000707269736574646174657133580a000000323032352d30392d3135713475580500000069636f6e7371355d71367d71372868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e6771386815580d000000636c656f2f707269332e706e6771396817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh>
<v t="swot.20250915140414.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250915140414.3" descendentVnodeUnknownAttributes="7d71002858010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3135710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3071197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3134711f75735803000000302e3171207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3134712675735803000000302e3271277d7128285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4b03580a00000070726973657464617465712c580a000000323032352d30392d3135712d75580500000069636f6e73712e5d712f7d713028680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677131680e580d000000636c656f2f707269332e706e6771326810681168124b0068134b0268144b016815681668176818756175752e"><vh>class ServiceOrderApplication</vh>
<v t="swot.20250915140414.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node RestTemplate restTemplate</vh></v>
<v t="swot.20250915140414.5" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node OkHttpClient okHttpClient</vh></v>
<v t="swot.20250915140414.6" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3135710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>WebClient</vh></v>
</v>
</v>
</v>
<v t="swot.20250915172449.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3136710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3171197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3135711f75735805000000302e312e3171207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3135712675735807000000302e312e312e3071277d7128285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4b02580a00000070726973657464617465712c580a000000323032352d30392d3238712d75580500000069636f6e73712e5d712f7d713028680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677131680e580d000000636c656f2f707269322e706e6771326810681168124b0068134b0268144b0168156816681768187561755807000000302e312e312e3271337d71345808000000616e6e6f7461746571357d71362858080000007072696f7269747971374d0f27580a000000707269736574646174657138580a000000323032352d30392d3134713975735807000000302e312e312e33713a7d713b5808000000616e6e6f74617465713c7d713d2858080000007072696f72697479713e4d0f27580a00000070726973657464617465713f580a000000323032352d30392d3134714075735807000000302e312e312e3471417d7142285808000000616e6e6f7461746571437d71442858080000007072696f7269747971454b03580a000000707269736574646174657146580a000000323032352d30392d3135714775580500000069636f6e7371485d71497d714a28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67714b680e580d000000636c656f2f707269332e706e67714c6810681168124b0068134b0268144b016815681668176818756175752e"><vh>6.2 解决 service-order url 硬编码问题：使用 @ConfigurationProperties</vh>
<v t="swot.20250916112922.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3136710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/utils/ItemProperties.java</vh></v>
<v t="swot.20250916113222.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3135710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3135710e75735805000000302e312e30710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b02580a000000707269736574646174657114580a000000323032352d30392d3238711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67711b580700000072656c50617468711c580d000000636c656f2f707269322e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e712558010000003171267561755805000000302e312e3271277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3134712d75735805000000302e312e33712e7d712f5808000000616e6e6f7461746571307d71312858080000007072696f7269747971324d0f27580a000000707269736574646174657133580a000000323032352d30392d3134713475735805000000302e312e3471357d7136285808000000616e6e6f7461746571377d71382858080000007072696f7269747971394b03580a00000070726973657464617465713a580a000000323032352d30392d3135713b75580500000069636f6e73713c5d713d7d713e286819681a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67713f681c580d000000636c656f2f707269332e706e677140681e681f68204b0068214b0268224b016823682468256826756175752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh>
<v t="swot.20250916113222.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250916113222.3" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3135710775735803000000302e3071087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b02580a00000070726973657464617465710d580a000000323032352d30392d3238710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677114580700000072656c506174687115580d000000636c656f2f707269322e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755803000000302e3271207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3134712675735803000000302e3371277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3134712d75735803000000302e34712e7d712f285808000000616e6e6f7461746571307d71312858080000007072696f7269747971324b03580a000000707269736574646174657133580a000000323032352d30392d3135713475580500000069636f6e7371355d71367d71372868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e6771386815580d000000636c656f2f707269332e706e6771396817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>class ServiceOrderApplication</vh>
<v t="swot.20250928064421.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3238710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>DI itemProperties -- New Added</vh></v>
<v t="swot.20250928064324.1"><vh>public static void main</vh></v>
<v t="swot.20250916113222.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node RestTemplate restTemplate</vh></v>
<v t="swot.20250916113222.5" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node OkHttpClient okHttpClient</vh></v>
<v t="swot.20250916113222.6" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3135710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@Bean WebClient -- New Added</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20250916132736.1" descendentVnodeUnknownAttributes=""><vh>7. 引入微服务注册、发现机制</vh>
<v t="swot.20250916133305.1"><vh>7.1 Eureka 介绍</vh></v>
<v t="swot.20250916134236.1"><vh>7.2 Eureka Server 的创建</vh>
<v t="swot.20250916141123.1"><vh>file -&gt; eureka/pom.xml</vh>
<v t="swot.20250916152133.1"><vh>properties 配置项目属性：Java 版本、Spring Boot 和 Spring Cloud 版本</vh></v>
<v t="swot.20250916152144.1"><vh>dependencyManagement 依赖管理：导入 Spring Boot 和 Spring Cloud 的依赖管理</vh></v>
<v t="swot.20250916152233.1"><vh>dependencies 项目依赖：添加 Eureka Server 依赖</vh></v>
<v t="swot.20250916152243.1"><vh>plugins 构建配置：添加 Spring Boot Maven 插件</vh></v>
</v>
<v t="swot.20250916155249.1"><vh>file -&gt; eureka/src/main/java/com/tjise/eureka/EurekaApplication.java</vh></v>
<v t="swot.20250916160550.1"><vh>file -&gt; eureka/src/main/resources/application.yml</vh></v>
<v t="swot.20250917094025.1"><vh>启动 Eureka Server 并测试网页管理端</vh></v>
</v>
<v t="swot.20250917113532.1" descendentVnodeUnknownAttributes="7d7100285807000000302e302e302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755807000000302e302e302e3171197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3138711f75580500000069636f6e7371205d71217d712228680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677123680e580d000000636c656f2f707269322e706e6771246810681168124b0068134b0268144b0168156816681768187561755809000000302e302e302e322e3071257d7126285808000000616e6e6f7461746571277d71282858080000007072696f7269747971294b03580a00000070726973657464617465712a580a000000323032352d30392d3138712b75580500000069636f6e73712c5d712d7d712e28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67712f680e580d000000636c656f2f707269332e706e6771306810681168124b0068134b0268144b0168156816681768187561755803000000302e3171317d7132285808000000616e6e6f7461746571337d71342858080000007072696f7269747971354b04580a000000707269736574646174657136580a000000323032352d30392d3138713775580500000069636f6e7371385d71397d713a28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67713b680e580d000000636c656f2f707269342e706e67713c6810681168124b0068134b0268144b0168156816681768187561755803000000302e32713d7d713e285808000000616e6e6f74617465713f7d71402858080000007072696f7269747971414b05580a000000707269736574646174657142580a000000323032352d30392d3138714375580500000069636f6e7371445d71457d714628680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677147680e580d000000636c656f2f707269352e706e6771486810681168124b0068134b0268144b016815681668176818756175752e"><vh>7.3 Eureka Server 注册商品微服务</vh>
<v t="swot.20250917113753.1" descendentVnodeUnknownAttributes="7d7100285805000000302e302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755805000000302e302e3171197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3138711f75580500000069636f6e7371205d71217d712228680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677123680e580d000000636c656f2f707269322e706e6771246810681168124b0068134b0268144b0168156816681768187561755807000000302e302e322e3071257d7126285808000000616e6e6f7461746571277d71282858080000007072696f7269747971294b03580a00000070726973657464617465712a580a000000323032352d30392d3138712b75580500000069636f6e73712c5d712d7d712e28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67712f680e580d000000636c656f2f707269332e706e6771306810681168124b0068134b0268144b016815681668176818756175752e"><vh>file -&gt; service-item/pom.xml</vh>
<v t="swot.20250918182311.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3171197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3138711f75580500000069636f6e7371205d71217d712228680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677123680e580d000000636c656f2f707269322e706e6771246810681168124b0068134b0268144b0168156816681768187561755805000000302e322e3071257d7126285808000000616e6e6f7461746571277d71282858080000007072696f7269747971294b03580a00000070726973657464617465712a580a000000323032352d30392d3138712b75580500000069636f6e73712c5d712d7d712e28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67712f680e580d000000636c656f2f707269332e706e6771306810681168124b0068134b0268144b016815681668176818756175752e"><vh>@ignore-node project</vh>
<v t="swot.20250918182153.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>properties Add cloud Version 2021.0.8</vh></v>
<v t="swot.20250918182407.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>dependencyManagement Add cloud dependency</vh></v>
<v t="swot.20250918182711.1" descendentVnodeUnknownAttributes="7d71005803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@ignore-node dependencies</vh>
<v t="swot.20250918182810.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>spring-cloud-starter-netflix-eureka-client</vh></v>
</v>
</v>
</v>
<v t="swot.20250918184444.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b04580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67710d580700000072656c50617468710e580d000000636c656f2f707269342e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-item/src/main/resources/application.yml</vh></v>
<v t="swot.20250913170621.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b05580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67710d580700000072656c50617468710e580d000000636c656f2f707269352e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-item/src/main/java/com/tjise/serviceitem/ServiceItemApplication.java</vh></v>
<v t="swot.20250927165432.1"><vh>启动多个 service-item 商品微服务实例</vh></v>
</v>
<v t="swot.20250918225928.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735807000000302e302e302e3071087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3230710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755807000000302e302e302e3171207d7121285808000000616e6e6f7461746571227d71232858080000007072696f7269747971244b02580a000000707269736574646174657125580a000000323032352d30392d3230712675580500000069636f6e7371275d71287d71292868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67712a6815580d000000636c656f2f707269322e706e67712b6817681868194b00681a4b02681b4b01681c681d681e681f7561755809000000302e302e302e322e30712c7d712d5808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304d0f27580a000000707269736574646174657131580a000000323032352d30392d3134713275735809000000302e302e302e322e3171337d71345808000000616e6e6f7461746571357d71362858080000007072696f7269747971374d0f27580a000000707269736574646174657138580a000000323032352d30392d3134713975735809000000302e302e302e322e32713a7d713b285808000000616e6e6f74617465713c7d713d2858080000007072696f72697479713e4b03580a00000070726973657464617465713f580a000000323032352d30392d3138714075580500000069636f6e7371415d71427d71432868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e6771446815580d000000636c656f2f707269332e706e6771456817681868194b00681a4b02681b4b01681c681d681e681f7561755803000000302e3171467d71475808000000616e6e6f7461746571487d71492858080000007072696f72697479714a4d0f27580a00000070726973657464617465714b580a000000323032352d30392d3231714c75735805000000302e312e31714d7d714e5808000000616e6e6f74617465714f7d71502858080000007072696f7269747971514d0f27580a000000707269736574646174657152580a000000323032352d30392d3231715375735805000000302e312e3271547d7155285808000000616e6e6f7461746571567d71572858080000007072696f7269747971584b04580a000000707269736574646174657159580a000000323032352d30392d3231715a75580500000069636f6e73715b5d715c7d715d2868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67715e6815580d000000636c656f2f707269342e706e67715f6817681868194b00681a4b02681b4b01681c681d681e681f7561755803000000302e3271607d71615808000000616e6e6f7461746571627d71632858080000007072696f7269747971644d0f27580a000000707269736574646174657165580a000000323032352d30392d3231716675735805000000302e322e3171677d7168285808000000616e6e6f7461746571697d716a2858080000007072696f72697479716b4b05580a00000070726973657464617465716c580a000000323032352d30392d3231716d75580500000069636f6e73716e5d716f7d71702868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e6771716815580d000000636c656f2f707269352e706e6771726817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e322e312e3071737d71745808000000616e6e6f7461746571757d71762858080000007072696f7269747971774d0f27580a000000707269736574646174657178580a000000323032352d30392d3231717975735807000000302e322e312e31717a7d717b5808000000616e6e6f74617465717c7d717d2858080000007072696f72697479717e4d0f27580a00000070726973657464617465717f580a000000323032352d30392d3231718075735807000000302e322e312e3271817d71825808000000616e6e6f7461746571837d71842858080000007072696f7269747971854d0f27580a000000707269736574646174657186580a000000323032352d30392d3139718775735803000000302e3371887d71895808000000616e6e6f74617465718a7d718b2858080000007072696f72697479718c4d0f27580a00000070726973657464617465718d580a000000323032352d30392d3231718e75735805000000302e332e31718f7d7190285808000000616e6e6f7461746571917d71922858080000007072696f7269747971934b06580a000000707269736574646174657194580a000000323032352d30392d3231719575580500000069636f6e7371965d71977d71982868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e6771996815580d000000636c656f2f707269362e706e67719a6817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e342e312e31719b7d719c285808000000616e6e6f74617465719d7d719e2858080000007072696f72697479719f4b07580a0000007072697365746461746571a0580a000000323032352d30392d323171a175580500000069636f6e7371a25d71a37d71a42868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269372e706e6771a56815580d000000636c656f2f707269372e706e6771a66817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>7.4 Eureka 中发现商品微服务</vh>
<v t="swot.20250919080549.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735805000000302e302e3071087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3230710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755805000000302e302e3171207d7121285808000000616e6e6f7461746571227d71232858080000007072696f7269747971244b02580a000000707269736574646174657125580a000000323032352d30392d3230712675580500000069636f6e7371275d71287d71292868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67712a6815580d000000636c656f2f707269322e706e67712b6817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e302e322e30712c7d712d5808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304d0f27580a000000707269736574646174657131580a000000323032352d30392d3134713275735807000000302e302e322e3171337d71345808000000616e6e6f7461746571357d71362858080000007072696f7269747971374d0f27580a000000707269736574646174657138580a000000323032352d30392d3134713975735807000000302e302e322e32713a7d713b285808000000616e6e6f74617465713c7d713d2858080000007072696f72697479713e4b03580a00000070726973657464617465713f580a000000323032352d30392d3138714075580500000069636f6e7371415d71427d71432868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e6771446815580d000000636c656f2f707269332e706e6771456817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>file -&gt; service-order/pom.xml</vh>
<v t="swot.20250919080549.2" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3230710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3171197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3230711f75580500000069636f6e7371205d71217d712228680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677123680e580d000000636c656f2f707269322e706e6771246810681168124b0068134b0268144b0168156816681768187561755805000000302e322e3071257d71265808000000616e6e6f7461746571277d71282858080000007072696f7269747971294d0f27580a00000070726973657464617465712a580a000000323032352d30392d3134712b75735805000000302e322e31712c7d712d5808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304d0f27580a000000707269736574646174657131580a000000323032352d30392d3134713275735805000000302e322e3271337d7134285808000000616e6e6f7461746571357d71362858080000007072696f7269747971374b03580a000000707269736574646174657138580a000000323032352d30392d3138713975580500000069636f6e73713a5d713b7d713c28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67713d680e580d000000636c656f2f707269332e706e67713e6810681168124b0068134b0268144b016815681668176818756175752e"><vh>@ignore-node project</vh>
<v t="swot.20250919135501.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3230710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>properties version</vh></v>
<v t="swot.20250919135651.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3230710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>Add cloud dependency</vh></v>
<v t="swot.20250919135524.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3134710e75735803000000302e32710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b03580a000000707269736574646174657114580a000000323032352d30392d3138711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67711b580700000072656c50617468711c580d000000636c656f2f707269332e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e71255801000000317126756175752e"><vh>@ignore-node dependencies</vh>
<v t="swot.20250919080549.3" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node OkHttp 依赖</vh></v>
<v t="swot.20250919080549.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node WebClient 依赖</vh></v>
<v t="swot.20250919135739.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>eureka-client 依赖</vh></v>
</v>
</v>
</v>
<v t="swot.20250919170635.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735803000000302e32710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b04580a000000707269736574646174657114580a000000323032352d30392d3231711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67711b580700000072656c50617468711c580d000000636c656f2f707269342e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e71255801000000317126756175752e"><vh>file -&gt; service-order/src/main/resources/application.yml</vh>
<v t="swot.20250921075637.1"><vh>port</vh></v>
<v t="swot.20250921075656.1" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323171077573732e"><vh>name</vh></v>
<v t="swot.20250921075711.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b04580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67710d580700000072656c50617468710e580d000000636c656f2f707269342e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>eureka</vh></v>
</v>
<v t="swot.20250919222308.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b05580a00000070726973657464617465710d580a000000323032352d30392d3231710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677114580700000072656c506174687115580d000000636c656f2f707269352e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755805000000302e312e3071207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3231712675735805000000302e312e3171277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3231712d75735805000000302e312e32712e7d712f5808000000616e6e6f7461746571307d71312858080000007072696f7269747971324d0f27580a000000707269736574646174657133580a000000323032352d30392d313971347573752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh>
<v t="swot.20250919222308.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250919222308.3" descendentVnodeUnknownAttributes="7d71002858010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b05580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67710d580700000072656c50617468710e580d000000636c656f2f707269352e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3071197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3231711f75735803000000302e3171207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3231712675735803000000302e3271277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3139712d7573752e"><vh>class ServiceOrderApplication -&gt; NOTE:下面的三个客户端任选一个即可</vh>
<v t="swot.20250919222308.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323171077573732e"><vh>RestTemplate</vh></v>
<v t="swot.20250919222308.5" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323171077573732e"><vh>OkHttpClient 不支持 @LoadBalanced</vh></v>
<v t="swot.20250919222308.6" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313971077573732e"><vh>WebClient</vh></v>
</v>
</v>
<v t="swot.20250920121016.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b06580a00000070726973657464617465710d580a000000323032352d30392d3231710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e677114580700000072656c506174687115580d000000636c656f2f707269362e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh>
<v t="swot.20250921083535.1"><vh>import</vh></v>
<v t="swot.20250921083629.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b06580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e67710d580700000072656c50617468710e580d000000636c656f2f707269362e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>class ItemService</vh>
<v t="swot.20250921084241.1"><vh>方式一: RestTemplate -&gt; queryItemById</vh></v>
<v t="swot.20250921115356.1"><vh>方式二: OkHttpClient -&gt; queryItemByIdWithOkHttpClient -&gt; OkHttpClient 本身不支持服务发现功能，需要自己实现</vh></v>
<v t="swot.20250921085305.1"><vh>方式三: WebClient    -&gt; queryItemByIdWithWebClient</vh></v>
</v>
</v>
<v t="swot.20250921102752.1" descendentVnodeUnknownAttributes="7d71005805000000302e312e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b07580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269372e706e67710d580700000072656c50617468710e580d000000636c656f2f707269372e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/OrderService.java</vh>
<v t="swot.20250921102844.1"><vh>@ignore-node import</vh></v>
<v t="swot.20250921103039.1" descendentVnodeUnknownAttributes="7d71005803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b07580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269372e706e67710d580700000072656c50617468710e580d000000636c656f2f707269372e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@ignore-node OrderService</vh>
<v t="swot.20250921103135.1"><vh>@ignore-node ORDER_DATA 使用静态 Map 模拟数据库存储订单数据</vh></v>
<v t="swot.20250921103403.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b07580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269372e706e67710d580700000072656c50617468710e580d000000636c656f2f707269372e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>Order queryOrderById</vh></v>
</v>
</v>
</v>
<v t="swot.20250928164633.1" descendentVnodeUnknownAttributes="7d7100285805000000302e312e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735807000000302e312e302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735809000000302e312e302e312e30710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b01580a000000707269736574646174657114580a000000323032352d30392d3239711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67711b580700000072656c50617468711c580d000000636c656f2f707269312e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e712558010000003171267561755809000000302e312e302e312e3171277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3239712d7573752e"><vh>7.5 测试 service-item 被负载均衡分配的结果</vh>
<v t="swot.20250928233710.1"><vh>7.5.1 只在 service-item 的不同实例中打印端口调用信息</vh>
<v t="swot.20250928232827.1"><vh>file -&gt; service-item/src/main/java/com/tjise/serviceitem/controller/ItemController.java</vh></v>
</v>
<v t="swot.20250928233840.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735805000000302e302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735807000000302e302e312e30710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b01580a000000707269736574646174657114580a000000323032352d30392d3239711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67711b580700000072656c50617468711c580d000000636c656f2f707269312e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e712558010000003171267561755807000000302e302e312e3171277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3239712d7573752e"><vh>7.5.2 在 service-order 中集中打印负载均衡端口调用信息</vh>
<v t="swot.20250929000751.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735805000000302e312e30710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b01580a000000707269736574646174657114580a000000323032352d30392d3239711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67711b580700000072656c50617468711c580d000000636c656f2f707269312e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e712558010000003171267561755805000000302e312e3171277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3239712d7573752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh>
<v t="swot.20250929000751.2"><vh>import</vh></v>
<v t="swot.20250929000751.3" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3071087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3239710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755803000000302e3171207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d323971267573752e"><vh>class ItemService</vh>
<v t="swot.20250929000751.4" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3239710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>方式一: RestTemplate -&gt; queryItemById</vh></v>
<v t="swot.20250929000751.5" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323971077573732e"><vh>方式二: OkHttpClient -&gt; queryItemByIdWithOkHttpClient -&gt; OkHttpClient 本身不支持服务发现功能，需要自己实现</vh></v>
<v t="swot.20250929000751.6"><vh>方式三: WebClient    -&gt; queryItemByIdWithWebClient</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20250921163937.1" descendentVnodeUnknownAttributes="7d7100285809000000302e302e302e322e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755805000000302e312e3171197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3231711f75580500000069636f6e7371205d71217d712228680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677123680e580d000000636c656f2f707269322e706e6771246810681168124b0068134b0268144b0168156816681768187561755805000000302e312e3271257d7126285808000000616e6e6f7461746571277d71282858080000007072696f7269747971294b03580a00000070726973657464617465712a580a000000323032352d30392d3231712b75580500000069636f6e73712c5d712d7d712e28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67712f680e580d000000636c656f2f707269332e706e6771306810681168124b0068134b0268144b0168156816681768187561755805000000302e322e3171317d7132285808000000616e6e6f7461746571337d71342858080000007072696f7269747971354b04580a000000707269736574646174657136580a000000323032352d30392d3231713775580500000069636f6e7371385d71397d713a28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67713b680e580d000000636c656f2f707269342e706e67713c6810681168124b0068134b0268144b0168156816681768187561755803000000302e33713d7d713e5808000000616e6e6f74617465713f7d71402858080000007072696f7269747971414d0f27580a000000707269736574646174657142580a000000323032352d30392d3138714375735805000000302e332e3271447d7145285808000000616e6e6f7461746571467d71472858080000007072696f7269747971484b05580a000000707269736574646174657149580a000000323032352d30392d3231714a75580500000069636f6e73714b5d714c7d714d28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67714e680e580d000000636c656f2f707269352e706e67714f6810681168124b0068134b0268144b0168156816681768187561755803000000302e3471507d71515808000000616e6e6f7461746571527d71532858080000007072696f7269747971544d0f27580a000000707269736574646174657155580a000000323032352d30392d3231715675735805000000302e342e3171577d71585808000000616e6e6f7461746571597d715a2858080000007072696f72697479715b4d0f27580a00000070726973657464617465715c580a000000323032352d30392d3231715d75735805000000302e342e32715e7d715f285808000000616e6e6f7461746571607d71612858080000007072696f7269747971624b06580a000000707269736574646174657163580a000000323032352d30392d3231716475580500000069636f6e7371655d71667d716728680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e677168680e580d000000636c656f2f707269362e706e6771696810681168124b0068134b0268144b016815681668176818756175752e"><vh>7.6 Eureka 添加用户认证</vh>
<v t="swot.20250921164454.1" descendentVnodeUnknownAttributes="7d71005807000000302e302e322e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; eureka/pom.xml</vh>
<v t="swot.20250921164739.1" descendentVnodeUnknownAttributes="7d71005805000000302e322e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@ignore-node project</vh>
<v t="swot.20250921164454.2"><vh>@ignore-node properties 配置项目属性：Java 版本、Spring Boot 和 Spring Cloud 版本</vh></v>
<v t="swot.20250921164454.3"><vh>@ignore-node dependencyManagement 依赖管理：导入 Spring Boot 和 Spring Cloud 的依赖管理</vh></v>
<v t="swot.20250921164454.4" descendentVnodeUnknownAttributes="7d71005803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@ignore-node dependencies</vh>
<v t="swot.20250921165129.1"><vh>@ignore-node Eureka Server 核心依赖</vh></v>
<v t="swot.20250921165148.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>security 安全认证依赖</vh></v>
</v>
<v t="swot.20250921164454.5"><vh>@ignore-node plugins 构建配置：添加 Spring Boot Maven 插件</vh></v>
</v>
</v>
<v t="swot.20250921165831.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3271197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b03580a00000070726973657464617465711e580a000000323032352d30392d3231711f75580500000069636f6e7371205d71217d712228680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677123680e580d000000636c656f2f707269332e706e6771246810681168124b0068134b0268144b016815681668176818756175752e"><vh>file -&gt; eureka/src/main/resources/application.yml</vh>
<v t="swot.20250921170022.1"><vh>server</vh></v>
<v t="swot.20250921170040.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>spring -&gt; new added</vh></v>
<v t="swot.20250921165918.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>eureka -&gt; new changed</vh></v>
</v>
<v t="swot.20250921180203.1" descendentVnodeUnknownAttributes="7d71005803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b04580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67710d580700000072656c50617468710e580d000000636c656f2f707269342e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; eureka/src/main/java/com/tjise/eureka/conf/WebSecurityConfig.java</vh>
<v t="swot.20250921180537.1"><vh>@ignore-node import</vh></v>
<v t="swot.20250921180605.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b04580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67710d580700000072656c50617468710e580d000000636c656f2f707269342e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>WebSecurityConfig 新建安全配置类</vh></v>
</v>
<v t="swot.20250921181348.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3138710775735803000000302e3271087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b05580a00000070726973657464617465710d580a000000323032352d30392d3231710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677114580700000072656c506174687115580d000000636c656f2f707269352e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>file -&gt; service-item/src/main/resources/application.yml</vh>
<v t="swot.20250921182102.1"><vh>port</vh></v>
<v t="swot.20250921182058.1"><vh>name</vh></v>
<v t="swot.20250921182054.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b05580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67710d580700000072656c50617468710e580d000000636c656f2f707269352e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>eureka</vh></v>
</v>
<v t="swot.20250921181657.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735803000000302e32710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b06580a000000707269736574646174657114580a000000323032352d30392d3231711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e67711b580700000072656c50617468711c580d000000636c656f2f707269362e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e71255801000000317126756175752e"><vh>file -&gt; service-order/src/main/resources/application.yml</vh>
<v t="swot.20250921181657.2"><vh>port</vh></v>
<v t="swot.20250921181657.3" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323171077573732e"><vh>name</vh></v>
<v t="swot.20250921181657.4" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b06580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e67710d580700000072656c50617468710e580d000000636c656f2f707269362e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>eureka</vh></v>
</v>
</v>
<v t="swot.20250921193934.1" descendentVnodeUnknownAttributes="7d7100285805000000302e312e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3138710775735807000000302e312e302e3271087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3232710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755805000000302e312e3171207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3231712675735807000000302e312e312e3171277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3231712d75735807000000302e312e312e32712e7d712f285808000000616e6e6f7461746571307d71312858080000007072696f7269747971324b02580a000000707269736574646174657133580a000000323032352d30392d3232713475580500000069636f6e7371355d71367d71372868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e6771386815580d000000636c656f2f707269322e706e6771396817681868194b00681a4b02681b4b01681c681d681e681f756175580d000000302e322e322e302e312e302e31713a7d713b285808000000616e6e6f74617465713c7d713d2858080000007072696f72697479713e4b01580a00000070726973657464617465713f580a000000323032352d30392d3237714075580500000069636f6e7371415d71427d71432868126813681368146815580d000000636c656f2f707269312e706e6771446817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>7.7 Eureka 集群（高可用性）</vh>
<v t="swot.20250922232410.1"><vh>配置 Eureka</vh>
<v t="swot.20250921213623.1"><vh>file -&gt; eureka/src/main/resources/application-peer2.yml</vh></v>
<v t="swot.20250921213424.1"><vh>file -&gt; eureka/src/main/resources/application-peer1.yml</vh></v>
<v t="swot.20250921213631.1"><vh>file -&gt; eureka/src/main/resources/application-peer3.yml</vh></v>
<v t="swot.20250921235101.1"><vh>反例: 创建 nginx 容器实现访问 Eureka 3 台服务器集群的负载均衡（会引入 nginx 单点故障问题）</vh>
<v t="swot.20250922001602.1"><vh>file -&gt; eureka/src/main/resources/eureka.conf</vh></v>
</v>
</v>
<v t="swot.20250922232431.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3138710775735805000000302e302e3271087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3232710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755803000000302e3171207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3231712675735805000000302e312e3171277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3231712d75735805000000302e312e32712e7d712f285808000000616e6e6f7461746571307d71312858080000007072696f7269747971324b02580a000000707269736574646174657133580a000000323032352d30392d3232713475580500000069636f6e7371355d71367d71372868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e6771386815580d000000636c656f2f707269322e706e6771396817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>配置 微服务(2个)</vh>
<v t="swot.20250922225939.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3138710775735803000000302e3271087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3232710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>file -&gt; service-item/src/main/resources/application.yml</vh>
<v t="swot.20250922225939.2"><vh>port</vh></v>
<v t="swot.20250922225939.3"><vh>name</vh></v>
<v t="swot.20250922225939.4" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3232710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>eureka</vh></v>
</v>
<v t="swot.20250922225949.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735803000000302e32710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b02580a000000707269736574646174657114580a000000323032352d30392d3232711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67711b580700000072656c50617468711c580d000000636c656f2f707269322e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e71255801000000317126756175752e"><vh>file -&gt; service-order/src/main/resources/application.yml</vh>
<v t="swot.20250922225949.2"><vh>port</vh></v>
<v t="swot.20250922225949.3" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323171077573732e"><vh>name</vh></v>
<v t="swot.20250922225949.4" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3232710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>eureka</vh></v>
</v>
</v>
<v t="swot.20250922232551.1" descendentVnodeUnknownAttributes="7d7100580b000000302e322e302e312e302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3237710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>测试高可用性</vh>
<v t="swot.20250923003436.1"><vh>httpie 测试</vh></v>
<v t="swot.20250923003556.1"><vh>停止一个 eureka 服务再测试</vh></v>
<v t="swot.20250923003649.1" descendentVnodeUnknownAttributes="7d71005809000000302e302e312e302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3237710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>创建新订单再测试</vh>
<v t="swot.20250923002644.1" descendentVnodeUnknownAttributes="7d71005807000000302e312e302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3237710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/OrderService.java</vh>
<v t="swot.20250923002644.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250923002644.3" descendentVnodeUnknownAttributes="7d71005805000000302e302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3237710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>class OrderService</vh>
<v t="swot.20250923002644.4" descendentVnodeUnknownAttributes="7d71005803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3237710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>ORDER_DATA 模拟数据</vh>
<v t="swot.20250923002644.5"><vh>第一个订单 order</vh></v>
<v t="swot.20250923002644.6" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3237710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>第二个订单 order2</vh></v>
</v>
<v t="swot.20250923002644.7"><vh>queryOrderById</vh></v>
</v>
</v>
</v>
<v t="swot.20250923003731.1"><vh>重启 service-order 后，httpie 测试:</vh></v>
</v>
</v>
</v>
<v t="swot.20250929114654.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3330710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3330710e75735805000000302e312e30710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3231711575735809000000302e312e302e302e3071167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d30392d3230711c75735809000000302e312e302e302e31711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d30392d323071237573580b000000302e312e302e302e322e3071247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d30392d3134712a7573580b000000302e312e302e302e322e31712b7d712c5808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4d0f27580a000000707269736574646174657130580a000000323032352d30392d313471317573580b000000302e312e302e302e322e3271327d71335808000000616e6e6f7461746571347d71352858080000007072696f7269747971364d0f27580a000000707269736574646174657137580a000000323032352d30392d313871387573580b000000302e312e302e302e322e3371397d713a285808000000616e6e6f74617465713b7d713c2858080000007072696f72697479713d4b01580a00000070726973657464617465713e580a000000323032352d30392d3330713f75580500000069636f6e7371405d71417d7142285804000000747970657143580400000066696c657144684458320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677145580700000072656c506174687146580d000000636c656f2f707269312e706e677147580500000077686572657148580e0000006265666f7265486561646c696e6571495807000000796f6666736574714a4b005807000000786f6666736574714b4b02580400000078706164714c4b0158020000006f6e714d5805000000766e6f6465714e5808000000636c656f49636f6e714f58010000003171507561755805000000302e312e3171517d7152285808000000616e6e6f7461746571537d71542858080000007072696f7269747971554b16580a000000707269736574646174657156580a000000323032352d31302d3031715775580500000069636f6e7371585d71597d715a2868436844684458320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f786772792e706e67715b6846580d000000636c656f2f786772792e706e67715c68486849684a4b00684b4b02684c4b01684d684e684f68507561755807000000302e312e312e31715d7d715e68537d715f2858080000007072696f7269747971604d0f27580a000000707269736574646174657161580a000000323032352d30392d3231716275735809000000302e312e312e312e3171637d71645808000000616e6e6f7461746571657d71662858080000007072696f7269747971674d0f27580a000000707269736574646174657168580a000000323032352d30392d3239716975735809000000302e312e312e312e32716a7d716b68537d716c2858080000007072696f72697479716d4d0f27580a00000070726973657464617465716e580a000000323032352d30392d3239716f75735809000000302e312e312e312e3371707d71715808000000616e6e6f7461746571727d71732858080000007072696f7269747971744d0f27580a000000707269736574646174657175580a000000323032352d31302d303171767573580b000000302e312e322e312e302e3171777d71785808000000616e6e6f7461746571797d717a2858080000007072696f72697479717b4d0f27580a00000070726973657464617465717c580a000000323032352d30392d3237717d75735809000000302e312e322e312e31717e7d717f2868727d71802868744b036875580a000000323032352d31302d303171817568585d71827d71832868436844684458320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e6771846846580d000000636c656f2f707269332e706e67718568486849684a4b00684b4b02684c4b01684d684e684f68507561755809000000302e312e322e312e3271867d71872868727d71882868744b046875580a000000323032352d31302d303171897568585d718a7d718b2868436844684458320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67718c6846580d000000636c656f2f707269342e706e67718d68486849684a4b00684b4b02684c4b01684d684e684f68507561755809000000302e312e322e312e33718e7d718f2868727d71902868744b056875580a000000323032352d31302d303171917568585d71927d71932868436844684458320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e6771946846580d000000636c656f2f707269352e706e67719568486849684a4b00684b4b02684c4b01684d684e684f68507561755805000000302e312e3371967d71975808000000616e6e6f7461746571987d71992858080000007072696f72697479719a4d0f27580a00000070726973657464617465719b580a000000323032352d30392d3231719c75735807000000302e312e332e31719d7d719e68987d719f2858080000007072696f7269747971a04d0f27580a0000007072697365746461746571a1580a000000323032352d30392d323171a275735807000000302e312e332e3271a37d71a468987d71a52858080000007072696f7269747971a64d0f27580a0000007072697365746461746571a7580a000000323032352d30392d323271a875735807000000302e312e332e3371a97d71aa2868727d71ab2868744b046875580a000000323032352d31302d303171ac7568585d71ad7d71ae28684368446844688c6846580d000000636c656f2f707269342e706e6771af68486849684a4b00684b4b02684c4b01684d684e684f6850756175752e"><vh>8. 容错保护：Resilience4j</vh>
<v t="swot.20250929155909.1"><vh>雪崩效应</vh></v>
<v t="swot.20250929172607.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3330710775735803000000302e3071087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735807000000302e302e302e30710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3230711575735807000000302e302e302e3171167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d30392d3230711c75735809000000302e302e302e322e30711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d30392d3134712375735809000000302e302e302e322e3171247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d30392d3134712a75735809000000302e302e302e322e32712b7d712c5808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4d0f27580a000000707269736574646174657130580a000000323032352d30392d3138713175735809000000302e302e302e322e3371327d7133285808000000616e6e6f7461746571347d71352858080000007072696f7269747971364b01580a000000707269736574646174657137580a000000323032352d30392d3330713875580500000069636f6e7371395d713a7d713b28580400000074797065713c580400000066696c65713d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67713e580700000072656c50617468713f580d000000636c656f2f707269312e706e677140580500000077686572657141580e0000006265666f7265486561646c696e6571425807000000796f666673657471434b005807000000786f666673657471444b0258040000007870616471454b0158020000006f6e71465805000000766e6f646571475808000000636c656f49636f6e714858010000003171497561755803000000302e31714a7d714b285808000000616e6e6f74617465714c7d714d2858080000007072696f72697479714e4b16580a00000070726973657464617465714f580a000000323032352d31302d3031715075580500000069636f6e7371515d71527d715328683c683d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f786772792e706e677154683f580d000000636c656f2f786772792e706e6771556841684268434b0068444b0268454b0168466847684868497561755805000000302e312e3171567d7157684c7d71582858080000007072696f7269747971594d0f27580a00000070726973657464617465715a580a000000323032352d30392d3231715b75735807000000302e312e312e31715c7d715d5808000000616e6e6f74617465715e7d715f2858080000007072696f7269747971604d0f27580a000000707269736574646174657161580a000000323032352d30392d3239716275735807000000302e312e312e3271637d7164684c7d71652858080000007072696f7269747971664d0f27580a000000707269736574646174657167580a000000323032352d30392d3239716875735807000000302e312e312e3371697d716a5808000000616e6e6f74617465716b7d716c2858080000007072696f72697479716d4d0f27580a00000070726973657464617465716e580a000000323032352d31302d3031716f75735809000000302e322e312e302e3171707d71715808000000616e6e6f7461746571727d71732858080000007072696f7269747971744d0f27580a000000707269736574646174657175580a000000323032352d30392d3237717675735807000000302e322e312e3171777d717828686b7d717928686d4b03686e580a000000323032352d31302d3031717a7568515d717b7d717c28683c683d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67717d683f580d000000636c656f2f707269332e706e67717e6841684268434b0068444b0268454b0168466847684868497561755807000000302e322e312e32717f7d718028686b7d718128686d4b04686e580a000000323032352d31302d303171827568515d71837d718428683c683d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677185683f580d000000636c656f2f707269342e706e6771866841684268434b0068444b0268454b0168466847684868497561755807000000302e322e312e3371877d718828686b7d718928686d4b05686e580a000000323032352d31302d3031718a7568515d718b7d718c28683c683d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67718d683f580d000000636c656f2f707269352e706e67718e6841684268434b0068444b0268454b0168466847684868497561755803000000302e33718f7d71905808000000616e6e6f7461746571917d71922858080000007072696f7269747971934d0f27580a000000707269736574646174657194580a000000323032352d30392d3231719575735805000000302e332e3171967d719768917d71982858080000007072696f7269747971994d0f27580a00000070726973657464617465719a580a000000323032352d30392d3231719b75735805000000302e332e32719c7d719d68917d719e2858080000007072696f72697479719f4d0f27580a0000007072697365746461746571a0580a000000323032352d30392d323271a175735805000000302e332e3371a27d71a328686b7d71a428686d4b04686e580a000000323032352d31302d303171a57568515d71a67d71a728683c683d683d6885683f580d000000636c656f2f707269342e706e6771a86841684268434b0068444b0268454b016846684768486849756175752e"><vh>Resilience4j 快速入门</vh>
<v t="swot.20250930135203.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735805000000302e302e3071087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3230710e75735805000000302e302e31710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3230711575735807000000302e302e322e3071167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d30392d3134711c75735807000000302e302e322e31711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d30392d3134712375735807000000302e302e322e3271247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d30392d3138712a75735807000000302e302e322e33712b7d712c285808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4b01580a000000707269736574646174657130580a000000323032352d30392d3330713175580500000069636f6e7371325d71337d7134285804000000747970657135580400000066696c657136683658320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677137580700000072656c506174687138580d000000636c656f2f707269312e706e67713958050000007768657265713a580e0000006265666f7265486561646c696e65713b5807000000796f6666736574713c4b005807000000786f6666736574713d4b02580400000078706164713e4b0158020000006f6e713f5805000000766e6f646571405808000000636c656f49636f6e71415801000000317142756175752e"><vh>@file service-order/pom.xml</vh></v>
<v t="swot.20251001074653.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b16580a000000707269736574646174657106580a000000323032352d31302d3031710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f786772792e706e67710d580700000072656c50617468710e580d000000636c656f2f786772792e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3171197d711a68037d711b2858080000007072696f72697479711c4d0f27580a00000070726973657464617465711d580a000000323032352d30392d3231711e75735805000000302e312e31711f7d71205808000000616e6e6f7461746571217d71222858080000007072696f7269747971234d0f27580a000000707269736574646174657124580a000000323032352d30392d3239712575735805000000302e312e3271267d712768037d71282858080000007072696f7269747971294d0f27580a00000070726973657464617465712a580a000000323032352d30392d3239712b75735805000000302e312e33712c7d712d5808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304d0f27580a000000707269736574646174657131580a000000323032352d31302d303171327573752e"><vh>@file service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh></v>
<v t="swot.20251001110527.1" descendentVnodeUnknownAttributes="7d7100285807000000302e312e302e3171017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3237710775735805000000302e312e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b03580a00000070726973657464617465710d580a000000323032352d31302d3031710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677114580700000072656c506174687115580d000000636c656f2f707269332e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755805000000302e312e3271207d712128680a7d712228680c4b04680d580a000000323032352d31302d3031712375680f5d71247d71252868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e6771266815580d000000636c656f2f707269342e706e6771276817681868194b00681a4b02681b4b01681c681d681e681f7561755805000000302e312e3371287d712928680a7d712a28680c4b05680d580a000000323032352d31302d3031712b75680f5d712c7d712d2868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67712e6815580d000000636c656f2f707269352e706e67712f6817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>@file service-order/src/main/java/com/tjise/serviceorder/service/OrderService.java</vh></v>
<v t="swot.20251001084921.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3171087d710968037d710a2858080000007072696f72697479710b4d0f27580a00000070726973657464617465710c580a000000323032352d30392d3231710d75735803000000302e32710e7d710f68037d71102858080000007072696f7269747971114d0f27580a000000707269736574646174657112580a000000323032352d30392d3232711375735803000000302e3371147d7115285808000000616e6e6f7461746571167d71172858080000007072696f7269747971184b04580a000000707269736574646174657119580a000000323032352d31302d3031711a75580500000069636f6e73711b5d711c7d711d28580400000074797065711e580400000066696c65711f681f58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677120580700000072656c506174687121580d000000636c656f2f707269342e706e677122580500000077686572657123580e0000006265666f7265486561646c696e6571245807000000796f666673657471254b005807000000786f666673657471264b0258040000007870616471274b0158020000006f6e71285805000000766e6f646571295808000000636c656f49636f6e712a580100000031712b756175752e"><vh>@file service-order/src/main/resources/application.yml</vh></v>
<v t="swot.20251001091156.1"><vh>测试 Resilience4j --实现不了，很沮丧--</vh></v>
</v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="swot.20250909151313.2">@language asciidoc
:source-highlighter: pygments
:icons: font
:scripts: cjk
:stem: latexmath
:toc:
:toc: right
:toc-title: Table of Contents
:toclevels: 3</t>
<t tx="swot.20250909151323.1">@language asciidoc

image::img/create_empty_project.png[,800]

</t>
<t tx="swot.20250909151510.1">
++++
&lt;button id="toggleButton"&gt;Table of Contents&lt;/button&gt;
&lt;script&gt;
    // 获取按钮和 div 元素
    const toggleButton = document.getElementById('toggleButton');
    const contentDiv = document.getElementById('toc');
    contentDiv.style.display = 'block';

    // 添加点击事件监听器
    toggleButton.addEventListener('click', () =&gt; {
        // 切换 div 的显示状态
        // if (contentDiv.style.display === 'none' || contentDiv.style.display === '') {
        if (contentDiv.style.display === 'none') {
            contentDiv.style.display = 'block';
        } else {
            contentDiv.style.display = 'none';
        }
    });
&lt;/script&gt;
++++
</t>
<t tx="swot.20250909151547.1"></t>
<t tx="swot.20250909160528.1">@language asciidoc
1. 单体架构的困境
+
在传统单体架构（Monolithic Architecture）中，所有功能模块（如用户管理、订单管理、支付管理等）都被打包在一个大的应用程序中，并部署在一个应用服务器上。

* *优点*：开发、测试、部署简单。
* *缺点*：
  ** 复杂性高：代码庞大，耦合度高，维护困难。
  ** 技术栈僵化：难以引入新的技术或框架。
  ** 扩展性差：无法针对特定模块进行扩展，必须扩展整个应用。
  ** 部署不灵活：一个小修改就需要重新部署整个应用，风险高。
  ** 可靠性低：一个微小的问题可能导致整个应用崩溃。


2. 微服务架构的解决方案
+
微服务架构（Microservices Architecture）是一种将单个应用程序拆分为 #一组小而自治的服务# 的架构风格。

* *核心思想*：*拆分* 与 *解耦*。
* *每个服务*：
  ** 围绕 *业务能力* 构建。
  ** 拥有独立的 *数据库* 和 *数据模型*。
  ** 可以独立 *开发*、*部署*、*扩展* 和 *重启*。
  ** 通过轻量级的通信机制（如 HTTP/REST、gRPC）进行协作。

+
比喻：

* *单体应用* 像一个 *大商场* ：所有部门（服装、餐饮、超市）在一个大楼里，共享水电消防。一损俱损。
* *微服务* 像一个 *商业街* ：每个店铺（服务）独立经营，有自己的特色和库存，通过公共街道（网络）连接。一店装修，不影响其他店。

</t>
<t tx="swot.20250909160632.1">@language asciidoc
拆分成多个服务后，也引入了新的复杂性：

. 服务发现：服务实例动态变化，消费者如何找到提供者？
. 配置管理：如何统一管理所有服务的配置，并实现动态更新？
. 负载均衡：如何将请求合理地分发到多个服务实例上？
. 容错与熔断：如何防止一个服务故障导致整个系统雪崩？
. API网关：如何为外部客户端提供一个统一的入口，并处理跨切面问题（认证、限流、路由）？
. 分布式事务：如何保证跨多个服务的数据一致性？
. 监控与链路追踪：如何跟踪一个请求穿越多个服务的全过程，以便排查问题？

</t>
<t tx="swot.20250909160640.1">@language asciidoc
1. 定义
+
Spring Cloud 是一套基于 Spring Boot的 #微服务生态工具集#。它提供了一系列 #标准化的工具和组件#，用于快速解决微服务架构中的常见问题（如上述挑战），让我们能更专注于业务逻辑的开发。
+
*简单来说*：Spring Boot 让开发单个微服务变得简单，而 Spring Cloud 让 #管理和协调# 这些微服务变得简单。


2. 核心定位
+
Spring Cloud 通过封装 *Netflix*、*Alibaba* 等公司成熟的微服务解决方案，提供了 *开箱即用* 的分布式系统开发体验。

</t>
<t tx="swot.20250909160728.1">@language asciidoc
Spring Cloud是一个“全家桶”，包含众多组件，以下是其中最核心的几个：

[cols="1,3,2", options="header"]
|===
| 组件名称
| 功能
| 比喻

| *Eureka / Nacos*
| *服务发现与注册*：服务提供者启动后向注册中心注册自己的地址，消费者从注册中心拉取服务列表。
| *电话簿*：服务在这里注册和查找彼此的地址。

| *Ribbon / LoadBalancer*
| *客户端负载均衡*：从服务列表中选择一个实例，将请求分发过去。
| *导游*：在多个相同的服务实例中，选择一个带你去。

| *Feign / OpenFeign*
| *声明式HTTP客户端*：基于接口和注解的方式调用远程服务，像调用本地方法一样简单。
| *翻译官*：帮你自动完成HTTP请求的组装和发送。

| *Hystrix / Sentinel*
| *熔断器*：当服务调用失败率达到阈值时，快速失败（熔断），防止雪崩效应，并提供服务降级。
| *保险丝*：电流过大（故障太多）自动熔断，保护整个电路（系统）。

| *Zuul / Gateway*
| *API网关*：所有外部请求的统一入口，负责路由、过滤、认证、限流、监控等。
| *前台/门卫*：所有访客必须经过这里，由它决定谁可以进、去哪里。

| *Config / Nacos*
| *分布式配置中心*：集中管理所有环境的配置文件，支持动态刷新。
| *公告板*：所有服务从这里获取最新配置，无需重启即可生效。

| *Sleuth / Zipkin*
| *分布式链路追踪*：跟踪一个请求从开始到结束的完整路径，用于性能分析和故障排查。
| *快递追踪*：可以查看你的包裹（请求）经过了哪些中转站（服务）。
|===
</t>
<t tx="swot.20250909160750.1">@language asciidoc
目前主要有两大主流体系：

. *Netflix系*：Spring Cloud Netflix（如 Eureka, Hystrix, Zuul）是早期标准，目前已部分进入维护模式。

. *Alibaba系*：*Spring Cloud Alibaba* 是目前国内最主流的方案，它提供了一站式的微服务解决方案（如 Nacos, Sentinel, Seata），与 Spring Cloud 生态无缝集成，功能强大且活跃度高。

*建议*：新项目首选 *Spring Cloud Alibaba*。
</t>
<t tx="swot.20250909160832.1">@language asciidoc
* 微服务架构通过拆分和解耦，解决了单体应用的痛点，但也带来了分布式系统的复杂性。

* *Spring Cloud* 不是一门新技术，而是一个 *工具箱*，它提供了 *一整套标准化的解决方案* 来轻松应对这些复杂性。

* 使用 *Spring Boot + Spring Cloud*，可以快速构建和治理一套完整、健壮的分布式微服务系统。
</t>
<t tx="swot.20250911081358.1">@language asciidoc
写完下面的代码后，使用 httpie 测试一下

http :8081/item/1

</t>
<t tx="swot.20250912101224.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-item&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-item&lt;/name&gt;
    &lt;description&gt;service-item&lt;/description&gt;
    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        
        &lt;!-- Lombok --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;


&lt;/project&gt;
</t>
<t tx="swot.20250912104007.1">@language java
package com.tjise.serviceitem.pojo;

import lombok.Data;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Item {
    
    private Long id;
    
    private String title;
    
    private String pic;
    
    private String desc;
    
    private Long price;
}
</t>
<t tx="swot.20250912112243.1">@language java
package com.tjise.serviceitem.service;

import com.tjise.serviceitem.pojo.Item;
import org.springframework.stereotype.Service;
import java.util.HashMap;
import java.util.Map;

@Service
public class ItemService {

    private static final Map&lt;Long, Item&gt; ITEM_MAP = new HashMap&lt;Long, Item&gt;();

    static {// 准备一些静态数据，模拟数据库，只是为了简单而已
        ITEM_MAP.put(1L, new Item(1L, "商品1", "http://图片1", "商品描述1", 1000L));
        ITEM_MAP.put(2L, new Item(2L, "商品2", "http://图片2", "商品描述2", 2000L));
        ITEM_MAP.put(3L, new Item(3L, "商品3", "http://图片3", "商品描述3", 3000L));
        ITEM_MAP.put(4L, new Item(4L, "商品4", "http://图片4", "商品描述4", 4000L));
        ITEM_MAP.put(5L, new Item(5L, "商品5", "http://图片5", "商品描述5", 5000L));
        ITEM_MAP.put(6L, new Item(6L, "商品6", "http://图片6", "商品描述6", 6000L));
        ITEM_MAP.put(7L, new Item(7L, "商品7", "http://图片7", "商品描述7", 7000L));
        ITEM_MAP.put(8L, new Item(8L, "商品8", "http://图片8", "商品描述8", 8000L));
        ITEM_MAP.put(9L, new Item(9L, "商品9", "http://图片9", "商品描述9", 9000L));
        ITEM_MAP.put(10L, new Item(10L, "商品10", "http://图片10", "商品描述10", 10000L));
    }

    /**
     * 模拟实现商品查询
     *
     * @param id
     * @return
     */
    public Item queryItemById(Long id) {
        return ITEM_MAP.get(id);
    }

}
</t>
<t tx="swot.20250912113856.1">@language java
package com.tjise.serviceitem.controller;

import com.tjise.serviceitem.pojo.Item;
import com.tjise.serviceitem.service.ItemService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ItemController {

    @Autowired
    private ItemService itemService;

    /**
     * 对外提供接口服务，查询商品信息
     *
     * @param id
     * @return
     */
    @GetMapping(value = "item/{id}")
    public Item queryItemById(@PathVariable("id") Long id) {
        return this.itemService.queryItemById(id);
    }
}
</t>
<t tx="swot.20250912123428.1">@language python
server:
  port: 8081
</t>
<t tx="swot.20250912140740.1"></t>
<t tx="swot.20250912140845.1">@doc
.商品实体类 Item
[source,java]
----
@c
@language java
package com.tjise.serviceorder.pojo;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Item {
    private Long id;
    private String title;
    private String pic;
    private String desc;
    private Long price;
}
@doc
----
</t>
<t tx="swot.20250912140908.1">@doc
.订单实体类 Order
[source,java]
----
@c
@language java
package com.tjise.serviceorder.pojo;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.Date;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Order {
    private String orderId;
    private Long userId;
    private Date createDate;
    private Date updateDate;
    private List&lt;OrderDetail&gt; orderDetails;
}
@doc
----
</t>
<t tx="swot.20250912141126.1">@language java
package com.tjise.serviceorder.pojo;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class OrderDetail {
    private String orderId;
    private Item item;
}
</t>
<t tx="swot.20250913160821.1">@language java
@others
</t>
<t tx="swot.20250913164255.1">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceorder.controller;

import com.tjise.serviceorder.pojo.Order;
import com.tjise.serviceorder.service.OrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

/**
 * 订单控制器
 * 处理订单相关的HTTP请求
 */
@RestController
public class OrderController {
    
    // 注入订单服务
    @Autowired
    private OrderService orderService;

    /**
     * 根据订单ID查询订单信息
     * 
     * @param orderId 订单ID
     * @return Order 订单信息
     */
    @GetMapping(value = "order/{orderId}")
    public Order queryOrderById(@PathVariable("orderId") String orderId) {
        return orderService.queryOrderById(orderId);
    }
}
@language asciidoc
@doc
----

httpie 测试:
http :8091/order/201810300001
</t>
<t tx="swot.20250913164316.1">@language java
package com.tjise.serviceorder.service;

import com.tjise.serviceorder.pojo.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

/**
 * 商品服务类
 * 通过 REST 方式调用商品微服务获取商品信息
 */
@Service
public class ItemService {

    // Spring 框架对 RESTful 方式的 http 请求做了封装，来简化操作
    @Autowired
    private RestTemplate restTemplate;

    /**
     * 根据商品 ID 查询商品信息
     * 通过 REST 调用商品微服务获取商品详细数据
     * 
     * @param id 商品ID
     * @return Item 商品信息
     */
    public Item queryItemById(Long id) {
        return restTemplate.getForObject("http://127.0.0.1:8081/item/"
                + id, Item.class);
    }
}
</t>
<t tx="swot.20250913170215.1">@language java
package com.tjise.serviceorder;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.web.client.RestTemplate;

/**
 * 订单服务启动类
 * Spring Boot 应用程序入口点
 */
@SpringBootApplication
public class ServiceOrderApplication {
    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }

    /**
     * 创建RestTemplate实例
     * 用于调用其他微服务
     * 
     * @return RestTemplate
     */
    @Bean
    public RestTemplate restTemplate() {
        // 可以在这里添加拦截器来统一处理URL前缀
        return new RestTemplate();
    }
}
</t>
<t tx="swot.20250913170621.1" annotate="7d71002858080000007072696f7269747971014b05580a000000707269736574646174657102580a000000323032352d30392d31387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677104580700000072656c506174687105580d000000636c656f2f707269352e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceitem;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;

@SpringBootApplication
@EnableEurekaClient  // &lt;1&gt;
public class ServiceItemApplication {

    public static void main(String[] args) {
        SpringApplication.run(ServiceItemApplication.class, args);
    }
}
@doc
----

&lt;1&gt; 启用 uereka 客户端注解
</t>
<t tx="swot.20250913172427.1">@language python
server:
  port: 8091
</t>
<t tx="swot.20250914085607.1"></t>
<t tx="swot.20250914085621.1"></t>
<t tx="swot.20250914091119.1">@language asciidoc
OkHttp 的异步 API 在应用程序层面实现了与 Node.js 类似的高并发编程模型：通过非阻塞 I/O 和回调机制，最大化利用少量线程来处理海量网络连接，从而高效地处理高并发 HTTP 请求。
</t>
<t tx="swot.20250914092716.1">前面演示的是 方式一：字段注入（需要 @Autowired），
下面演示一下使用 方式二单个构造函数注入的例子。
</t>
<t tx="swot.20250914101602.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....</t>
<t tx="swot.20250914102420.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
@Bean
public OkHttpClient okHttpClient() {
    return new OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build();
}
@doc
----

</t>
<t tx="swot.20250914102436.1" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
@Bean
public WebClient webClient() {
    return WebClient.builder()
          .baseUrl("http://127.0.0.1:8081/item")
          .build();
}
@doc
----

</t>
<t tx="swot.20250914103506.1">@language asciidoc
RestClient 的主要价值在于它提供了一个现代化但又不失简单的 API，结合了 RestTemplate 的易用性和 WebClient 的功能强大，是未来 Spring 应用HTTP 客户端调用的推荐选择。
</t>
<t tx="swot.20250914105307.1">为了兼容老的 RestTemplate 代码，也可以在 RestTemplate 中配置 OkHttp。

</t>
<t tx="swot.20250914105516.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceorder.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.tjise.serviceorder.pojo.Item;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.springframework.stereotype.Service;

import java.io.IOException;

@Service
public class ItemService {
    // 下面这两种方式是等价的，看自己的使用方式而定
    // 方式一：字段注入（需要 @Autowired）
    // @Autowired
    // private OkHttpClient client;

    // 方式二 单个构造函数注入
    private final OkHttpClient client;  // 单个构造函数注入（不需要 @Autowired
    private final ObjectMapper objectMapper;  // 可支持 json 序列化
    public ItemService(OkHttpClient client, ObjectMapper objectMapper) {
        this.client = client;
        this.objectMapper = objectMapper;
        // 检查请求工厂类型
        System.out.println("Using OkHttpClient: " + client.getClass().getName());
        // 打印：Using OkHttpClient: okhttp3.OkHttpClient
    }

    public Item queryItemById(Long id) throws IOException {
        Request request = new Request.Builder()
                .url("http://127.0.0.1:8081/item/" + id)
                .build();
        try (Response response = client.newCall(request).execute()) {
            // 读取响应体
            String json = response.body().string();
            // 使用注入的 objectMapper 反序列化成 JSON 字符串
            return objectMapper.readValue(json, Item.class);
        }
    }
}
@doc
----
</t>
<t tx="swot.20250914141436.1">@language java
@others
</t>
<t tx="swot.20250914174528.1">package com.tjise.serviceorder.service;

import com.tjise.serviceorder.pojo.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
</t>
<t tx="swot.20250914174817.1">/**
 * 商品服务类
 * 通过 REST 方式调用商品微服务获取商品信息
 */
@Service
public class ItemService {
    @others
}
</t>
<t tx="swot.20250914175541.1">// Spring 框架对 RESTful 方式的 http 请求做了封装，来简化操作
// @Autowired
// private RestTemplate restTemplate;
</t>
<t tx="swot.20250914175616.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
private final RestTemplate restTemplate;
public ItemService(RestTemplate restTemplate) {
    this.restTemplate = restTemplate;
}
@doc
----

</t>
<t tx="swot.20250914175705.1">/**
 * 根据商品 ID 查询商品信息
 * 通过 REST 调用商品微服务获取商品详细数据
 * 
 * @param id 商品ID
 * @return Item 商品信息
 */
public Item queryItemById(Long id) {
    return restTemplate.getForObject(
        "http://127.0.0.1:8081/item/" + id,
        Item.class
    );
}
</t>
<t tx="swot.20250914180307.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
@others
</t>
<t tx="swot.20250914181023.1">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-order&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-order&lt;/name&gt;
    &lt;description&gt;service-order&lt;/description&gt;
    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;

        &lt;!-- Lombok --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
        @others
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</t>
<t tx="swot.20250914181123.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 使用 Spring Boot 管理的版本： --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;
    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250914182058.1">@language java
@others
</t>
<t tx="swot.20250914182242.1">package com.tjise.serviceorder;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;
</t>
<t tx="swot.20250914182310.1">/**
 * 订单服务启动类
 * Spring Boot 应用程序入口点
 */
@SpringBootApplication
public class ServiceOrderApplication {

    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }
    @others
}
</t>
<t tx="swot.20250914182350.1" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
/**
 * 创建RestTemplate实例
 * 用于调用其他微服务
 * 
 * @return RestTemplate
 */
@Bean
public RestTemplate restTemplate() {
    // 可以在这里添加拦截器来统一处理URL前缀
    // return new RestTemplate();  // 未使用 OkHttp
    return new RestTemplate(new OkHttp3ClientHttpRequestFactory());
}
@doc
----
</t>
<t tx="swot.20250914195444.1">@language java
@others
</t>
<t tx="swot.20250914195444.2">package com.tjise.serviceorder.service;

import com.tjise.serviceorder.pojo.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
</t>
<t tx="swot.20250914195444.3">/**
 * 商品服务类
 * 通过 REST 方式调用商品微服务获取商品信息
 */
@Service
public class ItemService {
    @others
}
</t>
<t tx="swot.20250914195444.4">// Spring 框架对 RESTful 方式的 http 请求做了封装，来简化操作
// @Autowired
// private RestTemplate restTemplate;
</t>
<t tx="swot.20250914195444.5" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
private final RestTemplate restTemplate;
public ItemService(RestTemplate restTemplate) {  // 单个构造函数
    this.restTemplate = restTemplate;
    // 检查请求工厂类型
    System.out.println("Request Factory: " + restTemplate.getRequestFactory().getClass().getName());
    // 成功使用 OkHttp 会打印
    // Request Factory: org.springframework.http.client.OkHttp3ClientHttpRequestFactory
}
@doc
----

</t>
<t tx="swot.20250914195444.6">/**
 * 根据商品 ID 查询商品信息
 * 通过 REST 调用商品微服务获取商品详细数据
 * 
 * @param id 商品ID
 * @return Item 商品信息
 */
public Item queryItemById(Long id) {
    return restTemplate.getForObject(
        "http://127.0.0.1:8081/item/" + id,
        Item.class
    );
}
</t>
<t tx="swot.20250914204525.1">@language java
@others
</t>
<t tx="swot.20250914204525.2">package com.tjise.serviceorder;

import okhttp3.OkHttpClient;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import java.util.concurrent.TimeUnit;
</t>
<t tx="swot.20250914204525.3">/**
 * 订单服务启动类
 * Spring Boot 应用程序入口点
 */
@SpringBootApplication
public class ServiceOrderApplication {

    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }
    @others
}
</t>
<t tx="swot.20250914204525.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
/**
 * 创建RestTemplate实例
 * 用于调用其他微服务
 * 
 * @return RestTemplate
 */
@Bean
public RestTemplate restTemplate() {
    // 可以在这里添加拦截器来统一处理URL前缀
    // return new RestTemplate();  // 未使用 OkHttp
    return new RestTemplate(new OkHttp3ClientHttpRequestFactory());
}
@doc
----
</t>
<t tx="swot.20250914212915.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
@others
</t>
<t tx="swot.20250914212915.2">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-order&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-order&lt;/name&gt;
    &lt;description&gt;service-order&lt;/description&gt;
    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;

        &lt;!-- Lombok --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
        @others
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</t>
<t tx="swot.20250914212915.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 使用 Spring Boot 管理的版本： --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;
    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250914213134.1">@language java
@others
</t>
<t tx="swot.20250914213134.2">package com.tjise.serviceorder;

import okhttp3.OkHttpClient;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import java.util.concurrent.TimeUnit;
</t>
<t tx="swot.20250914213134.3">/**
 * 订单服务启动类
 * Spring Boot 应用程序入口点
 */
@SpringBootApplication
public class ServiceOrderApplication {

    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }
    @others
}
</t>
<t tx="swot.20250914213134.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
/**
 * 创建RestTemplate实例
 * 用于调用其他微服务
 * 
 * @return RestTemplate
 */
@Bean
public RestTemplate restTemplate() {
    // 可以在这里添加拦截器来统一处理URL前缀
    // return new RestTemplate();  // 未使用 OkHttp
    return new RestTemplate(new OkHttp3ClientHttpRequestFactory());
}
@doc
----
</t>
<t tx="swot.20250914213134.5" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
@Bean
public OkHttpClient okHttpClient() {
    return new OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build();
}
@doc
----

</t>
<t tx="swot.20250914214630.1" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceorder.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.tjise.serviceorder.pojo.Item;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import java.io.IOException;

@Service
public class ItemService {
    // 下面这两种方式是等价的，看自己的使用方式而定
    // 方式一：字段注入（需要 @Autowired）
    // @Autowired
    // private WebClient webClient;

    // 方式二 单个构造函数注入
    private final WebClient webClient;
    public ItemService(WebClient webClient) {
        this.webClient = webClient;
    }

    public Item queryItemById(Long id) {
        return webClient.get()
            .uri("/{id}", id)
            .retrieve()
            .bodyToMono(Item.class)
            .block(); // 同步调用，如需要异步可去掉block()
    }
}
@doc
----
</t>
<t tx="swot.20250915094305.1">@language asciidoc
通过以上的测试发现，在订单系统中要调用商品微服务中的查询接口来获取数据，在订单微服务中将 url 硬编码到代码中，这样显然不好，因为，运行环境一旦发生变化这个 url 地址将不可用。

如何解决呢？

解决方案：将 url 地址写入到 yml 配置文件中。

</t>
<t tx="swot.20250915102329.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,python]
----
@c
@language python
server:
  port: 8091

# 新增 url 配置
myspcloud:
  item:
    url: http://127.0.0.1:8081/item/

@doc
----
</t>
<t tx="swot.20250915140414.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31357103752e">@language java
@others
</t>
<t tx="swot.20250915140414.2">package com.tjise.serviceorder;

import okhttp3.OkHttpClient;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import java.util.concurrent.TimeUnit;
</t>
<t tx="swot.20250915140414.3" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d31357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">/**
 * 订单服务启动类
 * Spring Boot 应用程序入口点
 */
@SpringBootApplication
public class ServiceOrderApplication {

    // 新增使用 @Value 注解获取配置的 url
    @Value("${myspcloud.item.url}")
    private String itemUrl;

    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }
    @others
}
</t>
<t tx="swot.20250915140414.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
/**
 * 创建RestTemplate实例
 * 用于调用其他微服务
 * 
 * @return RestTemplate
 */
@Bean
public RestTemplate restTemplate() {
    // 可以在这里添加拦截器来统一处理URL前缀
    // return new RestTemplate();  // 未使用 OkHttp
    return new RestTemplate(new OkHttp3ClientHttpRequestFactory());
}
@doc
----
</t>
<t tx="swot.20250915140414.5" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
@Bean
public OkHttpClient okHttpClient() {
    return new OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build();
}
@doc
----

</t>
<t tx="swot.20250915140414.6" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d31357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
@Bean
public WebClient webClient() {
    return WebClient.builder()
        .baseUrl(itemUrl)   // 使用注入的 Url
        .build();
}
@doc
----

</t>
<t tx="swot.20250915172449.1"></t>
<t tx="swot.20250916112922.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31367103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceorder.utils;

import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;


@Data
@Component
@ConfigurationProperties(prefix = "myspcloud.item")
public class ItemProperties {
    // 下面属性值的内容会从配置文件中被自动获取到
    private String url;
}
@doc
----

</t>
<t tx="swot.20250916113222.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31357103752e">@language java
@others
</t>
<t tx="swot.20250916113222.2">package com.tjise.serviceorder;

import com.tjise.serviceorder.utils.ItemProperties;
import okhttp3.OkHttpClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import java.util.concurrent.TimeUnit;
</t>
<t tx="swot.20250916113222.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31357103752e">/**
 * 订单服务启动类
 * Spring Boot 应用程序入口点
 */
@SpringBootApplication
public class ServiceOrderApplication {
    @others
}
</t>
<t tx="swot.20250916113222.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
/**
 * 创建RestTemplate实例
 * 用于调用其他微服务
 * 
 * @return RestTemplate
 */
@Bean
public RestTemplate restTemplate() {
    // 可以在这里添加拦截器来统一处理URL前缀
    // return new RestTemplate();  // 未使用 OkHttp
    return new RestTemplate(new OkHttp3ClientHttpRequestFactory());
}
@doc
----
</t>
<t tx="swot.20250916113222.5" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
@Bean
public OkHttpClient okHttpClient() {
    return new OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build();
}
@doc
----

</t>
<t tx="swot.20250916113222.6" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d31357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
// 方法参数注入（直接从 Spring 容器里获取 ItemProperties）
@Bean
public WebClient webClient(ItemProperties properties) {
    return WebClient.builder()
            .baseUrl(properties.getUrl())
            .build();
}
@doc
----

</t>
<t tx="swot.20250916132736.1">@language asciidoc
* 问题：商品微服务 ip 发生变更则需要更改订单微服务的配置文件
* 问题：商品微服务有多个，订单微服务该链接哪个？

从而引入微服务注册、发现机制，如下。

image::img/service_register.png[,640]

1. 服务提供者将服务注册到注册中心
2. 服务消费者通过注册中心查找服务
3. 查找到服务后进行调用（这里就是无需硬编码 url 的解决方案）
4. 服务的消费者与服务注册中心保持心跳连接，一旦服务提供者的地址发生变更时，注册中心会通知服务消费者

</t>
<t tx="swot.20250916133305.1">@language asciidoc
Eureka 是 Netfix 开源的服务发现组件，本身是一个基于 REST 的服务。它包含 Server 和 Client 两部分。SpringCloud 将它集成在子项目 SpringCloud Netfix 中，从而实现微服务的注册与发现。

* Eureka Server 提供服务注册服务，各个节点启动后，会在 Eureka Server 中进行注册，这样 EurekaServer 中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。

* Eureka Client 是一个 java 客户端，用于简化与 Eureka Server 的交互，客户端同时也有一个内置的、使用轮询(round-robin)负载算法的负载均衡器。

* 在应用启动后，将会向 Eureka Server 发送心跳,默认周期为 30 秒，如果 Eureka Server 在多个心跳周期内没有接收到某个节点的心跳，Eureka Server 将会从服务注册表中把这个服务节点移除(默认90秒)。

* Eureka Server 之间通过复制的方式完成数据的同步，Eureka 还提供了客户端缓存机制，即使所有的 Eureka Server 都挂掉，客户端依然可以利用缓存中的信息消费其他服务的 API。

综上，Eureka 通过心跳检查、客户端缓存等机制，确保了系统的高可用性、灵活性和可伸缩性。
</t>
<t tx="swot.20250916134236.1">@language asciidoc
创建一个 maven 的项目，命名为 eureka。

image::img/create_eureka_module.png[,800]

</t>
<t tx="swot.20250916141123.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@doc
[source,scss]
....
@c
@language xml
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;eureka&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;!-- 加入下面各项内容 --&gt;
    @others
&lt;/project&gt;
@doc
....
</t>
<t tx="swot.20250916152133.1">@doc
[source,scss]
....
@c
@language xml
&lt;properties&gt;
    &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;
    &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;!-- 这两个版本要匹配才行 --&gt;
    &lt;spring.boot.version&gt;2.7.18&lt;/spring.boot.version&gt;
    &lt;spring.cloud.version&gt;2021.0.8&lt;/spring.cloud.version&gt;
&lt;/properties&gt;
@doc
....
</t>
<t tx="swot.20250916152144.1">@doc
[source,scss]
....
@c
@language xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;!-- Spring Boot 依赖管理 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring.boot.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;!-- Spring Cloud依赖管理 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring.cloud.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
@doc
....
</t>
<t tx="swot.20250916152233.1">@doc
[source,scss]
....
@c
@language xml
&lt;dependencies&gt;
    &lt;!-- Eureka Server核心依赖 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
@doc
....
</t>
<t tx="swot.20250916152243.1">@doc
[source,scss]
....
@c
@language xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;!-- Spring Boot Maven插件，用于打包可执行jar --&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${spring.boot.version}&lt;/version&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
@doc
....
</t>
<t tx="swot.20250916155249.1">@language java
package com.tjise.eureka;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;

/**
 * Eureka Server启动类
 * 
 * @EnableEurekaServer 注解启用 Eureka Server 功能
 */
@SpringBootApplication
@EnableEurekaServer
public class EurekaApplication {
    
    public static void main(String[] args) {
        SpringApplication.run(EurekaApplication.class, args);
    }
}
</t>
<t tx="swot.20250916160550.1">@language python
server:
  port: 8761  # 1. Eureka Server端口设置为8761（默认端口）

eureka:
  instance:
    hostname: localhost  # 2. 设置主机名为localhost
  client:
    register-with-eureka: false  # 3. Eureka Server不向自己注册
    fetch-registry: false        # 4. Eureka 自己不需要获取服务注册信息
    service-url:
      # 5. 设置 Eureka Server 的访问地址
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
      
  server:
    enable-self-preservation: false  # 6. 关闭自我保护机制（开发环境建议关闭，但是会有红色警告提示，属于正常）
                                     # 设置成 false 后保证服务不可用时及时剔除相应的微服务，易测试。
</t>
<t tx="swot.20250917094025.1">@language asciidoc
现在可以通过以下命令启动 Eureka Server：

. 进入eureka项目目录
* cd /Users/swot/swot-learning/java/SpringCloud/eureka

. 使用 IDEA 启动应用
* mvn spring-boot:run

. 或者先打包再运行
* mvn clean package
* java -jar target/eureka-1.0-SNAPSHOT.jar

启动后访问 http://localhost:8761 即可看到 Eureka Server 的管理界面。

image::img/eureka_admin_no_instance.png[]

</t>
<t tx="swot.20250917113532.1">@language asciidoc
成功注册 service-item 到 eureka 是这样的，如下图

image::img/eureka_admin_with_service-item.png[]

</t>
<t tx="swot.20250917113753.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
@others
</t>
<t tx="swot.20250918182153.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;properties&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;spring-cloud.version&gt;2021.0.8&lt;/spring-cloud.version&gt;
&lt;/properties&gt;
@doc
....
</t>
<t tx="swot.20250918182311.1">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-item&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-item&lt;/name&gt;
    &lt;description&gt;service-item&lt;/description&gt;
    @others
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</t>
<t tx="swot.20250918182407.1" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d31387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring-cloud.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
@doc
....
</t>
<t tx="swot.20250918182711.1">&lt;dependencies&gt;
    &lt;!-- 添加Spring Boot Web依赖 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;
    
    &lt;!-- 添加Spring Boot Test依赖 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;!-- Lombok --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
        &lt;artifactId&gt;lombok&lt;/artifactId&gt;
        &lt;optional&gt;true&lt;/optional&gt;
    &lt;/dependency&gt;
    @others
&lt;/dependencies&gt;
</t>
<t tx="swot.20250918182810.1" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d31387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 添加 Eureka 客户端依赖, 用于将服务注册到 Eureka --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250918184444.1" annotate="7d71002858080000007072696f7269747971014b04580a000000707269736574646174657102580a000000323032352d30392d31387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677104580700000072656c506174687105580d000000636c656f2f707269342e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,python]
----
@c
@language python
### 服务端口号(本身是一个web项目)
server:
    port: 8081

### 起个名字作为服务名称(该服务注册到eureka注册中心的名称，比如商品服务)
spring:
    application:
        name: app-item

### 服务注册到eureka注册中心的地址
eureka:
    client:
        service-url:
            defaultZone: http://127.0.0.1:8761/eureka/
        ### 因为该应用为服务提供者，是 eureka 的一个客户端，需要注册到注册中心
        register-with-eureka: true
        ### 是否需要从 eureka 上检索服务
        fetch-registry: true
    instance:
        # 使用IP地址注册而不是主机名
        prefer-ip-address: true
        # 客户端在注册时使用自己的IP，而不是主机名，是生产环境的最佳实践。避免主机名解析问题
        ip-address: 127.0.0.1
@doc
----

****
name 和 instance 两者都有重要作用，缺一不可：

- spring.application.name：服务的逻辑名称，用于服务发现和负载均衡
- eureka.instance 配置：实例的网络地址，用于实际通信

即使使用IP注册，仍然需要服务名称来进行服务发现和调用。
****
</t>
<t tx="swot.20250918221324.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31387103752e">@language java
package com.tjise.serviceitem;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ServiceItemApplication {

    public static void main(String[] args) {
        SpringApplication.run(ServiceItemApplication.class, args);
    }
}
</t>
<t tx="swot.20250918225928.1">@language asciidoc
之前我们在订单系统中是将商品微服务的地址进行了硬编码，现在，由于已经将商品服务注册到 Eureka 中，所以，只需要从 Eureka 中发现服务即可。

想要从 Eureka 中发现服务，需要先将 service-order 成功注册到 eureka，如下图是成功注册后的截图。

image::img/eureka_admin_with_service-order.png[]

httpie 测试注册 service-order 到 Eureka 后，也是可以正常运行的:
[source,console]
----
http :8091/order/201810300001
----

</t>
<t tx="swot.20250919080549.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
@others
</t>
<t tx="swot.20250919080549.2">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;

    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-order&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-order&lt;/name&gt;
    &lt;description&gt;service-order&lt;/description&gt;
    @others
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</t>
<t tx="swot.20250919080549.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 使用 Spring Boot 管理的版本： --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;
    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250919080549.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,scss]
....
@c
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....</t>
<t tx="swot.20250919081656.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-order&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-order&lt;/name&gt;
    &lt;description&gt;service-order&lt;/description&gt;
    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;

        &lt;!-- Lombok --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</t>
<t tx="swot.20250919135501.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d32307103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;properties&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;spring-cloud.version&gt;2021.0.8&lt;/spring-cloud.version&gt;
&lt;/properties&gt;
@doc
....
</t>
<t tx="swot.20250919135524.1">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;!-- Lombok --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
        &lt;artifactId&gt;lombok&lt;/artifactId&gt;
        &lt;optional&gt;true&lt;/optional&gt;
    &lt;/dependency&gt;
    @others
&lt;/dependencies&gt;
</t>
<t tx="swot.20250919135651.1" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d32307103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring-cloud.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
@doc
....
</t>
<t tx="swot.20250919135739.1" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d31387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 添加 Eureka 客户端依赖, 用于将服务注册到 Eureka --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250919170635.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@language yaml
@others
</t>
<t tx="swot.20250919222308.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@language java
@others
</t>
<t tx="swot.20250919222308.2">package com.tjise.serviceorder;

import com.tjise.serviceorder.utils.ItemProperties;
import okhttp3.OkHttpClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.loadbalancer.LoadBalanced;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;
import java.util.concurrent.TimeUnit;
</t>
<t tx="swot.20250919222308.3" annotate="7d71002858080000007072696f7269747971014b05580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677104580700000072656c506174687105580d000000636c656f2f707269352e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
/**
 * 订单服务启动类，Spring Boot 应用程序入口点。
 */
@SpringBootApplication
@EnableEurekaClient  // new -&gt; 启用 Eureka 客户端功能
public class ServiceOrderApplication {
    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }
    // 包含其他代码
    @others
}
@doc
----

.负载均衡使用拦截器原理：
****
1. 拦截请求URL
2. 识别服务名
3. 通过服务发现获取实际地址
4. 替换URL并发起请求
****
</t>
<t tx="swot.20250919222308.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@doc
[source,java]
----
@c
/**
 * 创建 RestTemplate 实例，用于调用其他微服务。
 * @return RestTemplate
 */
@Bean
@LoadBalanced // new -&gt; 使用负载均衡
public RestTemplate restTemplate() {
    // 可以在这里添加拦截器来统一处理URL前缀
    // return new RestTemplate();  // not use OkHttp
    return new RestTemplate(
           new OkHttp3ClientHttpRequestFactory());  // use OkHttp
}
@doc
----
</t>
<t tx="swot.20250919222308.5" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@doc
[source,java]
----
@c
@Bean
// @LoadBalanced  // OkHttpClient 不支持负载均衡，在这儿写该注解没用。
public OkHttpClient okHttpClient() {
    return new OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build();
}
@doc
----

</t>
<t tx="swot.20250919222308.6" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31397103752e">@doc
@nowrap
[source,java]
----
@c
// 配置负载均衡的 WebClient.Builder
@Bean
@LoadBalanced // new -&gt; 使用负载均衡
public WebClient.Builder loadBalancedWebClientBuilder() {
    return WebClient.builder();
}

// 使用 Builder 创建 WebClient
@Bean
public WebClient webClient(WebClient.Builder builder) {
    return builder
        .baseUrl("http://app-item/item")  // 使用 eureka 注册中心调用(去注册中心查找服务 app-item，这种方式必须先开启负载均衡 @LoadBalanced)
        .build();
}

@doc
----

.总结
****
WebClient 也需要使用 @LoadBalanced 注解，但需要注解在 WebClient.Builder 上，而不是 WebClient 实例上。
这与 WebClient 的设计有关：

- WebClient 是不可变的（immutable）
- WebClient.Builder 是可变的，用于构建 WebClient 实例
- Spring Cloud 需要在 Builder 层面注入负载均衡能力

这样设计是为了与 WebClient 的不可变性设计保持一致，同时也提供了更灵活的配置方式。
****
</t>
<t tx="swot.20250920073920.1"></t>
<t tx="swot.20250920121016.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@language java
@others
</t>
<t tx="swot.20250921075637.1">@doc
[source,yaml]
----
@c
server:
    port: 8091
@doc
----
</t>
<t tx="swot.20250921075656.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@doc
[source, yaml]
----
@c
# 起个名字作为服务名称(该服务注册到 eureka 注册中心的名称，比如订单服务)
spring:
    application:
        name: app-order
@doc
----</t>
<t tx="swot.20250921075711.1" annotate="7d71002858080000007072696f7269747971014b04580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677104580700000072656c506174687105580d000000636c656f2f707269342e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,yaml]
----
@c
# 服务注册到 eureka 注册中心的地址
eureka:
    client:
        service-url:
            defaultZone: http://127.0.0.1:8761/eureka
        register-with-eureka: true  # 因为该应用为服务提供者，是 eureka 的一个客户端，需要注册到注册中心
        fetch-registry: true        # 是否需要从 eureka 上检索服务
    instance:
        prefer-ip-address: true     # 使用 IP地址 注册而不是主机名
        ip-address: 127.0.0.1       # 客户端在注册时使用自己的 IP，而不是主机名
                                    # 这是生产环境的最佳实践。避免主机名解析问题
@doc
----
</t>
<t tx="swot.20250921083535.1">package com.tjise.serviceorder.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.tjise.serviceorder.pojo.Item;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.loadbalancer.LoadBalancerClient;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import java.io.IOException;
</t>
<t tx="swot.20250921083629.1" annotate="7d71002858080000007072696f7269747971014b06580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e677104580700000072656c506174687105580d000000636c656f2f707269362e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
// 根据商品 ID 查询商品信息：通过 REST 调用商品微服务获取商品详细数据
@Service
public class ItemService {  // 商品服务类
    @Autowired
    private RestTemplate restTemplate;

    private final WebClient webClient;
    private final OkHttpClient okHttpClient;
    private final ObjectMapper objectMapper;  // 可支持 json 序列化

    // 单个构造方法注入
    public ItemService(
            WebClient webClient,
            @Autowired(required = false) OkHttpClient okHttpClient,
            @Autowired(required = false) ObjectMapper objectMapper) {
        this.webClient = webClient;
        this.okHttpClient = okHttpClient;
        this.objectMapper = objectMapper;
    }
    // 包含其他代码
    @others
}
@language asciidoc
@doc
----
</t>
<t tx="swot.20250921084241.1">@doc
[source,java]
----
@c
@language java
public Item queryItemById(Long id) {
    return restTemplate.getForObject(
            "http://app-item/item/" + id, Item.class);  // &lt;1&gt;
}
@language asciidoc
@doc
----

&lt;1&gt; app-item 是 service-item 在 Eureka 中注册的服务名。
</t>
<t tx="swot.20250921085305.1">@doc
[source,java]
----
@c
@language java
public Item queryItemByIdWithWebClient(Long id) {
    return webClient.get()
                    .uri("/{id}", id)
                    .retrieve()
                    .bodyToMono(Item.class)
                    .block();
}
@doc
----


</t>
<t tx="swot.20250921102752.1">@language java
@others
</t>
<t tx="swot.20250921102844.1">package com.tjise.serviceorder.service;

import com.tjise.serviceorder.pojo.Order;
import com.tjise.serviceorder.pojo.OrderDetail;
import com.tjise.serviceorder.pojo.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.*;
</t>
<t tx="swot.20250921103039.1">/**
 * 订单服务类
 * 提供订单查询功能，并通过调用商品服务获取商品详细信息
 */
@Service
public class OrderService {
    @others
}
</t>
<t tx="swot.20250921103135.1">private static final Map&lt;String, Order&gt; ORDER_DATA = new HashMap&lt;String, Order&gt;();
// 初始化订单数据
static {
    // 模拟数据库，构造测试数据
    Order order = new Order();
    order.setOrderId("201810300001");
    order.setCreateDate(new Date());
    order.setUpdateDate(order.getCreateDate());
    order.setUserId(1L);
    List&lt;OrderDetail&gt; orderDetails = new ArrayList&lt;OrderDetail&gt;();

    // 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
    Item item = new Item();
    item.setId(1L);
    orderDetails.add(new OrderDetail(order.getOrderId(), item));

    // 创建第二个商品详情
    item = new Item();
    item.setId(2L);
    orderDetails.add(new OrderDetail(order.getOrderId(), item));

    order.setOrderDetails(orderDetails);

    ORDER_DATA.put(order.getOrderId(), order);
}
</t>
<t tx="swot.20250921103403.1" annotate="7d71002858080000007072696f7269747971014b07580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269372e706e677104580700000072656c506174687105580d000000636c656f2f707269372e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
// 注入商品服务，用于查询商品详细信息
@Autowired
private ItemService itemService;
/**
 * 根据订单ID查询订单数据
 * @param orderId 订单ID
 * @return Order 订单信息，包含完整的商品详情
 */
public Order queryOrderById(String orderId) throws IOException {
    // 从模拟数据库中查询订单
    Order order = ORDER_DATA.get(orderId);
    if (null == order) {
        return null;
    }
    // 获取订单详情列表
    List&lt;OrderDetail&gt; orderDetails = order.getOrderDetails();
    // 遍历订单详情，通过商品微服务查询商品详细数据
    for (OrderDetail orderDetail : orderDetails) {
        // 通过商品微服务查询商品详细数据
        Item item = itemService.queryItemById(orderDetail.getItem().getId());  // &lt;1&gt;
        // Item item = itemService.queryItemByIdWithOkHttpClient(orderDetail.getItem().getId());  // &lt;2&gt;
        // Item item = itemService.queryItemByIdWithWebClient(orderDetail.getItem().getId());  // &lt;3&gt;
        if (null == item) {
            continue;
        }
        orderDetail.setItem(item);  // 将查询到的商品详细信息设置到订单详情中
    }
    return order;
}
@language asciidoc
@doc
----
&lt;1&gt; 使用 RestTemplate
&lt;2&gt; 使用 OkHttpClient
&lt;3&gt; 使用 WebClient
</t>
<t tx="swot.20250921115356.1">@doc
[source,java]
----
@c
@language java
@Autowired
private LoadBalancerClient loadBalancerClient;

public Item queryItemByIdWithOkHttpClient(Long id) throws IOException {
    // 使用 LoadBalancerClient 获取负载均衡的实例
    ServiceInstance instance = loadBalancerClient.choose("app-item");
    String actualUrl = "http://" + instance.getHost() + ":" + instance.getPort() + "/item/" + id;
    Request request = new Request.Builder().url(actualUrl).build();
    try (Response response = okHttpClient.newCall(request).execute()) {  // 执行 OkHttpClient 调用
        String json = response.body().string();  // 读取响应体
        // 使用注入的 objectMapper 反序列化成 JSON 字符串
        return objectMapper.readValue(json, Item.class);
    }
}
@doc
----

</t>
<t tx="swot.20250921163937.1">@language asciidoc
在前面的示例中，我们可以看到不需要登录即可访问到 Eureka 服务，这样其实是不安全的。
所以需要为 Eureka 添加用户认证功能。

.加入用户认证功能后需要登录界面
image::img/eureka_login.png[,800]

.加入用户认证功能后依然可以注册成功
image::img/eureka_admin_with_user_and_pass.png[]
</t>
<t tx="swot.20250921164454.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
@others
</t>
<t tx="swot.20250921164454.2">@doc
[source,scss]
....
@c
@language xml
&lt;properties&gt;
    &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;
    &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;!-- 这两个版本要匹配才行 --&gt;
    &lt;spring.boot.version&gt;2.7.18&lt;/spring.boot.version&gt;
    &lt;spring.cloud.version&gt;2021.0.8&lt;/spring.cloud.version&gt;
&lt;/properties&gt;
@doc
....
</t>
<t tx="swot.20250921164454.3">@doc
[source,scss]
....
@c
@language xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;!-- Spring Boot 依赖管理 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring.boot.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;!-- Spring Cloud依赖管理 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring.cloud.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
@doc
....
</t>
<t tx="swot.20250921164454.4">&lt;dependencies&gt;
    @others
&lt;/dependencies&gt;
</t>
<t tx="swot.20250921164454.5">@doc
[source,scss]
....
@c
@language xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;!-- Spring Boot Maven插件，用于打包可执行jar --&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${spring.boot.version}&lt;/version&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
@doc
....
</t>
<t tx="swot.20250921164739.1">&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;eureka&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;!-- 加入下面各项内容 --&gt;
    @others
&lt;/project&gt;
</t>
<t tx="swot.20250921165129.1">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;
&lt;/dependency&gt;
</t>
<t tx="swot.20250921165148.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250921165831.1">@language yaml
@others
</t>
<t tx="swot.20250921165918.1" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,yaml]
----
@c
@language yaml
eureka:
  instance:
    hostname: localhost  # 2. 设置主机名为localhost
  client:
    register-with-eureka: false  # 3. Eureka Server不向自己注册
    fetch-registry: false        # 4. Eureka 自己不需要获取服务注册信息
    service-url:
      # 5. 设置 Eureka Server 的访问地址
      # defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
      # 改成需要账号和密码的形式
      defaultZone: http://${spring.security.user.name}:${spring.security.user.password}@${eureka.instance.hostname}:${server.port}/eureka/
  server:
    enable-self-preservation: true  # 6. 关闭自我保护机制（开发环境建议关闭）
@doc
----

</t>
<t tx="swot.20250921170022.1">@doc
[source,yaml]
----
@c
@language yaml
server:
  port: 8761  # 1. Eureka Server端口设置为8761（默认端口）
@doc
----
</t>
<t tx="swot.20250921170040.1" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,yaml]
----
@c
@language yaml
spring:
  application:
    name: app-eureka-center
  security:
    basic:
      enable: true  # 开启基于 HTTP basic 的认证
    user:  # 配置用户的账号信息
      name: root
      password: root
@doc
----
</t>
<t tx="swot.20250921180203.1">@language java
@others
</t>
<t tx="swot.20250921180537.1">package com.tjise.eureka.conf;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
</t>
<t tx="swot.20250921180605.1" annotate="7d71002858080000007072696f7269747971014b04580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677104580700000072656c506174687105580d000000636c656f2f707269342e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
@Configuration
@EnableWebSecurity
public class WebSecurityConfig {
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.sessionManagement()
            .sessionCreationPolicy(SessionCreationPolicy.NEVER)
            .and()
            .csrf().disable()
            .authorizeHttpRequests(authz -&gt; authz
                    .anyRequest().authenticated()
            )
            .httpBasic(Customizer.withDefaults());
        return http.build();
    }
}
@doc
----
</t>
<t tx="swot.20250921181348.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31387103752e">@language yaml
@others
@doc
****
name 和 instance 两者都有重要作用，缺一不可：

- spring.application.name：服务的逻辑名称，用于服务发现和负载均衡
- eureka.instance 配置：实例的网络地址，用于实际通信

即使使用 IP 注册，仍然需要服务名称来进行服务发现和调用。
****
</t>
<t tx="swot.20250921181657.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@language yaml
@others
</t>
<t tx="swot.20250921181657.2">@doc
[source,yaml]
----
@c
server:
    port: 8082
@doc
----
</t>
<t tx="swot.20250921181657.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@doc
[source, yaml]
----
@c
# 起个名字作为服务名称(该服务注册到 eureka 注册中心的名称，比如订单服务)
spring:
    application:
        name: app-order
@doc
----
</t>
<t tx="swot.20250921181657.4" annotate="7d71002858080000007072696f7269747971014b06580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e677104580700000072656c506174687105580d000000636c656f2f707269362e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,yaml]
----
@c
# 服务注册到 eureka 注册中心的地址
eureka:
    client:
        service-url:
            # defaultZone: http://127.0.0.1:8761/eureka/
            # 更改：加入用户名和密码
            defaultZone: http://root:root@127.0.0.1:8761/eureka/
        register-with-eureka: true  # 因为该应用为服务提供者，是 eureka 的一个客户端，需要注册到注册中心
        fetch-registry: true        # 是否需要从 eureka 上检索服务
    instance:
        prefer-ip-address: true     # 使用 IP地址 注册而不是主机名
        ip-address: 127.0.0.1       # 客户端在注册时使用自己的 IP，而不是主机名
                                    # 这是生产环境的最佳实践。避免主机名解析问题
@doc
----
</t>
<t tx="swot.20250921182054.1" annotate="7d71002858080000007072696f7269747971014b05580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677104580700000072656c506174687105580d000000636c656f2f707269352e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,yaml]
----
@c
@language yaml
### 服务注册到eureka注册中心的地址
eureka:
    client:
        service-url:
            # defaultZone: http://127.0.0.1:8761/eureka/
            # 更改：加入用户名和密码
            defaultZone: http://root:root@127.0.0.1:8761/eureka/

        ### 因为该应用为服务提供者，是 eureka 的一个客户端，需要注册到注册中心
        register-with-eureka: true
        ### 是否需要从 eureka 上检索服务
        fetch-registry: true
    instance:
        prefer-ip-address: true  # 使用IP地址注册而不是主机名
        ip-address: 127.0.0.1    # 客户端在注册时使用自己的IP，而不是主机名。
                                 # 这是生产环境的最佳实践，避免主机名解析问题。
@doc
----

</t>
<t tx="swot.20250921182058.1">@doc
[source,yaml]
----
@c
@language yaml
### 起个名字作为服务名称(该服务注册到eureka注册中心的名称，比如商品服务)
spring:
    application:
        name: app-item
@doc
----

</t>
<t tx="swot.20250921182102.1">@doc
[source,yaml]
----
@c
@language yaml
### 服务端口号(本身是一个web项目)
server:
    port: 8081
@doc
----

</t>
<t tx="swot.20250921193934.1">@language asciidoc
前面的测试发现，Eureka 服务是一个单点服务，在生产环境就会出现单点故障，为了确保 Eureka 服务的高可用，需要搭建 Eureka 服务的集群。

1. sudo vim /etc/hosts 增加 3 个主机名
+
[source,shell]
----
127.0.0.1 eureka1
127.0.0.1 eureka2
127.0.0.1 eureka3
----
2. 在 eureka 中创建 3 个配置文件: application-peer[1,2,3].yml
* defaultZone 配置多个地址在 Eureka 集群中的作用：
  ** 相互注册: 每个 Eureka Server 实例都需要知道集群中其他实例的地址，以便它们能够互相注册和同步服务注册信息。
    *** application-peer1.yml 中的这个配置告诉 eureka1 实例，它需要向 eureka2 和 eureka3 进行注册，并从它们那里获取服务注册信息。
    *** 同理，application-peer2.yml 会配置 eureka1 和 eureka3 的地址，application-peer3.yml 会配置 eureka1 和 eureka2 的地址。
  ** 高可用性: 通过相互注册，整个 Eureka 集群形成了一个去中心化的结构。即使其中一个 Eureka Server 实例宕机，其他实例仍然可以提供服务注册与发现功能，保证了服务的持续可用性。
  ** 信息同步: Eureka Server 实例之间会定期同步服务注册信息，确保所有实例上的服务列表保持一致。
  
3. 按下图在开发机器上配置 3 个 Eureka 服务的集群。
+
image::img/eureka_multi.png[]

4. 访问三个 eureka 管理端网址，查看注册情况。
+
http://localhost:8761/ | http://localhost:8762/ | http://localhost:8763/
+
.三个网址内容类似
image::img/eureka_multi_admin.png[]

TIP: 用户名: root 密码: root

5. 为了实现高可用性，service-item 和 service-order 应该像 Eureka Server 之间相互注册那样，将所有 Eureka Server 的地址都配置上。这样做可以确保即使其中一个 Eureka Server 实例宕机，服务仍然能够成功注册和发现其他服务，从而提高整个系统的可用性。
+
[source,yaml]
----
eureka:
    client:
        service-url:
            defaultZone: http://root:root@eureka1:8761/eureka/,http://root:root@eureka2:8762/eureka/,http://root:root@eureka3:8763/eureka/
        register-with-eureka: true
        fetch-registry: true
    instance:
        prefer-ip-address: true
        ip-address: 127.0.0.1
----
</t>
<t tx="swot.20250921213424.1">@doc
[source,yaml]
----
@c
@language yaml
server:
  port: 8761

spring:
  application:
    name: eureka-server-clustered
  security:
    basic:
      enable: true
    user:
      name: root
      password: root

eureka:
  instance:
    hostname: eureka1
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://root:root@eureka2:8762/eureka/,http://root:root@eureka3:8763/eureka/
  server:
    enable-self-preservation: false
    # Eureka Server 的核心配置参数，用于控制服务失效实例的清理频率 10s。
    eviction-interval-timer-in-ms: 10000
@doc
----
</t>
<t tx="swot.20250921213623.1">@doc
[source,yaml]
----
@c
@language yaml
server:
  port: 8762

spring:
  application:
    name: eureka-server-clustered
  security:
    basic:
      enable: true
    user:
      name: root
      password: root

eureka:
  instance:
    hostname: eureka2
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://root:root@eureka1:8761/eureka/,http://root:root@eureka3:8763/eureka/
  server:
    enable-self-preservation: false
    # Eureka Server 的核心配置参数，用于控制服务失效实例的清理频率 10s。
    eviction-interval-timer-in-ms: 10000
@doc
----

</t>
<t tx="swot.20250921213631.1">@doc
[source,yaml]
----
@c
@language yaml
server:
  port: 8763

spring:
  application:
    name: eureka-server-clustered
  security:
    basic:
      enable: true
    user:
      name: root
      password: root

eureka:
  instance:
    hostname: eureka3
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://root:root@eureka1:8761/eureka/,http://root:root@eureka2:8762/eureka/
  server:
    enable-self-preservation: false
    # Eureka Server 的核心配置参数，用于控制服务失效实例的清理频率 10s。
    eviction-interval-timer-in-ms: 10000
@doc
----

</t>
<t tx="swot.20250921235101.1">@language asciidoc
.创建 nginx 容器
[source,console]
----
docker run -d --name nginx \
-p 80:80 \
-p 8760:8760 \
-v ./eureka.conf:/etc/nginx/conf.d/eureka.conf \
nginx
----

NOTE: 使用命令行可以同时映射多个端口。docker desktop GUI 客户端无法映射多个端口。

***

WARNING: nginx 出现单点故障，则整个 Eureka 集群无法访问。所以这种方式用的很少。


.好好理解一下
****
- **Eureka 自己带了客户端负载均衡思想**

  - 客户端直接配置多台 `Eureka Server`，会自动轮询、重试。
  - 集群节点之间数据同步，不需要额外中间层。

- **Nginx 放在这里反而引入了单点**

  - Eureka 是 peer-to-peer 对等架构，本来就没有“主从”问题。
  - 加个 Nginx 只会让本来不需要的层变成潜在风险点。

- **现在更清楚 Nginx 的定位**

  - 它更适合放在 **网关层**（对外入口），做统一访问、鉴权、流量控制。
  - 不适合放在 **注册中心层**。
****
</t>
<t tx="swot.20250922001602.1">@doc
[source,python]
----
@c
@language python
upstream eureka-cluster {
    server host.docker.internal:8761;
    server host.docker.internal:8762;
    server host.docker.internal:8763;
}

server {
    listen 8760;
    location / {
        proxy_pass http://eureka-cluster;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
@language asciidoc
@doc
----

要让容器里的 Nginx 把请求转发到“宿主机上的 Eureka”，就得用宿主机在 Docker 网络中的地址。 +
Docker 已经预留了一个特殊 DNS 名：host.docker.internal +
它自动解析成宿主机在 Docker 网桥里的 IP。

访问 http://localhost:8760/ 会按 nginx 默认的负载均衡访问 3 台 Eureka 服务器。
</t>
<t tx="swot.20250922225939.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31387103752e">@language yaml
@others
@doc
****
name 和 instance 两者都有重要作用，缺一不可：

- spring.application.name：服务的逻辑名称，用于服务发现和负载均衡
- eureka.instance 配置：实例的网络地址，用于实际通信

即使使用 IP 注册，仍然需要服务名称来进行服务发现和调用。
****
</t>
<t tx="swot.20250922225939.2">@doc
[source,yaml]
----
@c
@language yaml
### 服务端口号(本身是一个web项目)
server:
    port: 8081
@doc
----

</t>
<t tx="swot.20250922225939.3">@doc
[source,yaml]
----
@c
@language yaml
### 起个名字作为服务名称(该服务注册到eureka注册中心的名称，比如商品服务)
spring:
    application:
        name: app-item
@doc
----

</t>
<t tx="swot.20250922225939.4" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d32327103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,yaml]
----
@c
@language yaml
### 服务注册到 eureka 注册中心的地址
eureka:
    client:
        service-url:
            # defaultZone: http://root:root@127.0.0.1:8761/eureka/
            defaultZone: http://root:root@eureka1:8761/eureka/,http://root:root@eureka2:8762/eureka/,http://root:root@eureka3:8763/eureka/
        register-with-eureka: true # 因为该应用为服务提供者，是 eureka 的一个客户端，需要注册到注册中心
        fetch-registry: true       # 是否需要从 eureka 上检索服务

    instance:
        prefer-ip-address: true    # 使用IP地址注册而不是主机名
        ip-address: 127.0.0.1      # 客户端在注册时使用自己的IP，而不是主机名。
                                   # 这是生产环境的最佳实践，避免主机名解析问题。
@doc
----
</t>
<t tx="swot.20250922225949.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@language yaml
@others
</t>
<t tx="swot.20250922225949.2">@doc
[source,yaml]
----
@c
server:
    port: 8091
@doc
----
</t>
<t tx="swot.20250922225949.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@doc
[source, yaml]
----
@c
# 起个名字作为服务名称(该服务注册到 eureka 注册中心的名称，比如订单服务)
spring:
    application:
        name: app-order
@doc
----
</t>
<t tx="swot.20250922225949.4" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d32327103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,yaml]
----
@c
# 服务注册到 eureka 注册中心的地址
eureka:
    client:
        service-url:
            # defaultZone: http://root:root@127.0.0.1:8761/eureka/
            defaultZone: http://root:root@eureka1:8761/eureka/,http://root:root@eureka2:8762/eureka/,http://root:root@eureka3:8763/eureka/
        register-with-eureka: true  # 因为该应用为服务提供者，是 eureka 的一个客户端，需要注册到注册中心
        fetch-registry: true        # 是否需要从 eureka 上检索服务
    instance:
        prefer-ip-address: true     # 使用 IP地址 注册而不是主机名
        ip-address: 127.0.0.1       # 客户端在注册时使用自己的 IP，而不是主机名
                                    # 这是生产环境的最佳实践。避免主机名解析问题
@doc
----
</t>
<t tx="swot.20250922232410.1"></t>
<t tx="swot.20250922232431.1"></t>
<t tx="swot.20250922232551.1">@language asciidoc
</t>
<t tx="swot.20250922234952.1">package com.tjise.serviceorder.service;

import com.tjise.serviceorder.pojo.Order;
import com.tjise.serviceorder.pojo.OrderDetail;
import com.tjise.serviceorder.pojo.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.io.IOException;
import java.util.*;
</t>
<t tx="swot.20250923001453.1">/**
 * 订单服务类
 * 提供订单查询功能，并通过调用商品服务获取商品详细信息
 */
@Service
public class OrderService {
    @others
}
</t>
<t tx="swot.20250923001649.1">// 使用静态Map模拟数据库存储订单数据
private static final Map&lt;String, Order&gt; ORDER_DATA = new HashMap&lt;String, Order&gt;();
// 初始化订单数据
static {
    // 模拟数据库，构造测试数据
    @others
}
</t>
<t tx="swot.20250923001803.1">// 注入商品服务，用于查询商品详细信息
@Autowired
private ItemService itemService;
/**
 * 根据订单ID查询订单数据
 * 
 * @param orderId 订单ID
 * @return Order 订单信息，包含完整的商品详情
 */
public Order queryOrderById(String orderId) throws IOException {
    // 从模拟数据库中查询订单
    Order order = ORDER_DATA.get(orderId);
    if (null == order) {
        return null;
    }
    // 获取订单详情列表
    List&lt;OrderDetail&gt; orderDetails = order.getOrderDetails();

    // 遍历订单详情，通过商品微服务查询商品详细数据
    for (OrderDetail orderDetail : orderDetails) {
        // 通过商品微服务查询商品详细数据
        Item item = itemService.queryItemById(orderDetail.getItem().getId());
        if (null == item) {
            continue;
        }
        // 将查询到的商品详细信息设置到订单详情中
        orderDetail.setItem(item);
    }
    return order;
}
</t>
<t tx="swot.20250923002048.1">Order order = new Order();
order.setOrderId("201810300001");
order.setCreateDate(new Date());
order.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order.setUserId(1L);
List&lt;OrderDetail&gt; orderDetails = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item = new Item();
item.setId(1L);
orderDetails.add(new OrderDetail(order.getOrderId(), item));

// 创建第二个商品详情
item = new Item();
item.setId(2L);
orderDetails.add(new OrderDetail(order.getOrderId(), item));

order.setOrderDetails(orderDetails);

ORDER_DATA.put(order.getOrderId(), order);
</t>
<t tx="swot.20250923002644.1">@language java
@others
</t>
<t tx="swot.20250923002644.2">package com.tjise.serviceorder.service;

import com.tjise.serviceorder.pojo.Order;
import com.tjise.serviceorder.pojo.OrderDetail;
import com.tjise.serviceorder.pojo.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.io.IOException;
import java.util.*;
</t>
<t tx="swot.20250923002644.3">/**
 * 订单服务类
 * 提供订单查询功能，并通过调用商品服务获取商品详细信息
 */
@Service
public class OrderService {
    @others
}
</t>
<t tx="swot.20250923002644.4">// 使用静态Map模拟数据库存储订单数据
private static final Map&lt;String, Order&gt; ORDER_DATA = new HashMap&lt;String, Order&gt;();
// 初始化订单数据
static {
    // 模拟数据库，构造测试数据
    @others
}
</t>
<t tx="swot.20250923002644.5">Order order = new Order();
order.setOrderId("201810300001");
order.setCreateDate(new Date());
order.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order.setUserId(1L);
List&lt;OrderDetail&gt; orderDetails = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item = new Item();
item.setId(1L);
orderDetails.add(new OrderDetail(order.getOrderId(), item));

// 创建第二个商品详情
item = new Item();
item.setId(2L);
orderDetails.add(new OrderDetail(order.getOrderId(), item));

order.setOrderDetails(orderDetails);

ORDER_DATA.put(order.getOrderId(), order);
</t>
<t tx="swot.20250923002644.6" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d32377103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">Order order2 = new Order();
order2.setOrderId("201810300002");
order2.setCreateDate(new Date());
order2.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order2.setUserId(2L);
List&lt;OrderDetail&gt; orderDetails2 = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item2 = new Item();
item2.setId(3L);
orderDetails2.add(new OrderDetail(order2.getOrderId(), item2));

// 创建第二个商品详情
item2 = new Item();
item2.setId(4L);
orderDetails2.add(new OrderDetail(order2.getOrderId(), item2));

order2.setOrderDetails(orderDetails2);

ORDER_DATA.put(order2.getOrderId(), order2);
</t>
<t tx="swot.20250923002644.7">// 注入商品服务，用于查询商品详细信息
@Autowired
private ItemService itemService;
/**
 * 根据订单ID查询订单数据
 * 
 * @param orderId 订单ID
 * @return Order 订单信息，包含完整的商品详情
 */
public Order queryOrderById(String orderId) throws IOException {
    // 从模拟数据库中查询订单
    Order order = ORDER_DATA.get(orderId);
    if (null == order) {
        return null;
    }
    // 获取订单详情列表
    List&lt;OrderDetail&gt; orderDetails = order.getOrderDetails();

    // 遍历订单详情，通过商品微服务查询商品详细数据
    for (OrderDetail orderDetail : orderDetails) {
        // 通过商品微服务查询商品详细数据
        Item item = itemService.queryItemById(orderDetail.getItem().getId());
        if (null == item) {
            continue;
        }
        // 将查询到的商品详细信息设置到订单详情中
        orderDetail.setItem(item);
    }
    return order;
}
</t>
<t tx="swot.20250923003436.1">[source,console]
----
http :8091/order/201810300001
----
+
....
HTTP/1.1 200
Connection: keep-alive
Content-Type: application/json
Date: Mon, 22 Sep 2025 16:32:37 GMT
Keep-Alive: timeout=60
Transfer-Encoding: chunked

{
    "createDate": "2025-09-22T16:30:20.174+00:00",
    "orderDetails": [
        {
            "item": {
                "desc": "商品描述1",
                "id": 1,
                "pic": "http://图片1",
                "price": 1000,
                "title": "商品1"
            },
            "orderId": "201810300001"
        },
        {
            "item": {
                "desc": "商品描述2",
                "id": 2,
                "pic": "http://图片2",
                "price": 2000,
                "title": "商品2"
            },
            "orderId": "201810300001"
        }
    ],
    "orderId": "201810300001",
    "updateDate": "2025-09-22T16:30:20.174+00:00",
    "userId": 1
}
....
</t>
<t tx="swot.20250923003556.1">停掉端口为 8761 的 eureka 服务，再测试应该还是能正常访问的。
</t>
<t tx="swot.20250923003649.1">为了防止是缓存的效果，再创建一个订单 order2，如下。
</t>
<t tx="swot.20250923003731.1">[source,console]
----
http :8091/order/201810300002
----
+
.测试结果说明 Eureka 高可用无问题
....
HTTP/1.1 200
Connection: keep-alive
Content-Type: application/json
Date: Mon, 22 Sep 2025 16:31:11 GMT
Keep-Alive: timeout=60
Transfer-Encoding: chunked

{
    "createDate": "2025-09-22T16:30:20.175+00:00",
    "orderDetails": [
        {
            "item": {
                "desc": "商品描述3",
                "id": 3,
                "pic": "http://图片3",
                "price": 3000,
                "title": "商品3"
            },
            "orderId": "201810300002"
        },
        {
            "item": {
                "desc": "商品描述4",
                "id": 4,
                "pic": "http://图片4",
                "price": 4000,
                "title": "商品4"
            },
            "orderId": "201810300002"
        }
    ],
    "orderId": "201810300002",
    "updateDate": "2025-09-22T16:30:20.174+00:00",
    "userId": 2
}
....
</t>
<t tx="swot.20250927165432.1">@language asciidoc
重复操作下面步骤 2 次，一共启动 3 个 service-item 实例。

.复制 service-item 配置
image::img/serviceItem_copy_config.png[]

.编辑 service-item 配置启动新端口
image::img/serviceItem_copy_config_edit_8082.png[,520]

启动 3 个实例，如下图所示：

.在 Eureka 中发现有 3 个 service-item 实例已经注册成功
image::img/three_serviceItem_in_eureka.png[]
</t>
<t tx="swot.20250928064324.1">@doc
[source,java]
----
@c
@language java
public static void main(String[] args) {
    SpringApplication.run(ServiceOrderApplication.class, args);
}
@doc
----

</t>
<t tx="swot.20250928064421.1" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d32387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
// 成员注入的方式
// @Autowired
// private ItemProperties itemProperties;

private final ItemProperties itemProperties;
// 单构造器注入，不用 @Autowired
public ServiceOrderApplication(ItemProperties itemProperties) {
    this.itemProperties = itemProperties;
}
@doc
----

</t>
<t tx="swot.20250928164633.1">下面代码使用 @Value("${server.port}") 可以获取到运行时的实际端口号，即使是在通过 Edit Configuration 传递 --server.port=8082 或 8083
参数启动多个实例的情况下。这是 Spring Boot 的一个强大功能，它会自动解析运行时的实际配置值。

现在已经修改了 ItemController，在每次请求时会打印当前处理请求的端口号。以下是简单的负载均衡测试方法：

负载均衡测试步骤：

1. 确认所有服务都已启动：
  - Eureka Server (端口 8761)
  - 3 个 service-item 实例 (端口 8081, 8082, 8083)
  - service-order (端口 8091)

2. 在 3 个 service-item 实例的控制台分别观察日志输出。

3. 通过 service-order 发起请求：

   # 重复执行以下命令，观察哪个实例在处理请求
   http :8091/order/201810300001

4. 每次执行上述命令时，观察 3 个 service-item 实例的控制台，应该会看到类似下面的日志，显示哪个端口在处理请求：

   Processing request on port: 8081 for item ID: 1
   Processing request on port: 8083 for item ID: 2
   Processing request on port: 8082 for item ID: 1

这样就能清楚地看到负载均衡在工作，请求被分发到不同的 service-item 实例上。
</t>
<t tx="swot.20250928232827.1">@language java
package com.tjise.serviceitem.controller;

import com.tjise.serviceitem.pojo.Item;
import com.tjise.serviceitem.service.ItemService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import java.util.logging.Logger;

@RestController
public class ItemController {

    @Autowired
    private ItemService itemService;
    
    @Value("${server.port}")
    private int serverPort;

    private static final Logger logger = Logger.getLogger(ItemController.class.getName());

    /**
     * 对外提供接口服务，查询商品信息
     *
     * @param id
     * @return
     */
    @GetMapping(value = "item/{id}")
    public Item queryItemById(@PathVariable("id") Long id) {
        // 增加了日志打印功能，方便查看是哪个 service-item 提供的服务。
        logger.info("Handling request on port: " + serverPort + " for item ID: " + id);
        System.out.println("Processing request on port: " + serverPort + " for item ID: " + id);
        return this.itemService.queryItemById(id);
    }
}
</t>
<t tx="swot.20250928233710.1"></t>
<t tx="swot.20250928233840.1"></t>
<t tx="swot.20250929000751.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@language java
@others
</t>
<t tx="swot.20250929000751.2">package com.tjise.serviceorder.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.tjise.serviceorder.pojo.Item;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.loadbalancer.LoadBalancerClient;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import java.io.IOException;
</t>
<t tx="swot.20250929000751.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@doc
[source,java]
----
@c
@language java
// 根据商品 ID 查询商品信息：通过 REST 调用商品微服务获取商品详细数据
@Service
public class ItemService {  // 商品服务类
    @Autowired
    private RestTemplate restTemplate;

    private final WebClient webClient;
    private final OkHttpClient okHttpClient;
    private final ObjectMapper objectMapper;  // 可支持 json 序列化

    // 单个构造方法注入
    public ItemService(
            WebClient webClient,
            @Autowired(required = false) OkHttpClient okHttpClient,
            @Autowired(required = false) ObjectMapper objectMapper) {
        this.webClient = webClient;
        this.okHttpClient = okHttpClient;
        this.objectMapper = objectMapper;
    }
    // 包含其他代码
    @others
}
@language asciidoc
@doc
----
</t>
<t tx="swot.20250929000751.4" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d32397103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
public Item queryItemById(Long id) {

    // 获取实际被选择的实例
    ServiceInstance serviceInstance = loadBalancerClient.choose("app-item");
    if (serviceInstance != null) {
        // String targetUrl = serviceInstance.getUri().toString() + "/item/" + id;
        // logger.info("Load Balancer: Requesting instance at " +
                // serviceInstance.getHost() + ":" + serviceInstance.getPort() +
                // " for item ID: " + id);
        System.out.println("负载均衡选择了端口: " + serviceInstance.getPort());
    }

    // restTemplate 会自动应用负载均衡，上面的实例选取只是为了能演示出负载均衡的策略。
    Item item = restTemplate.getForObject(
            "http://app-item/item/" + id, Item.class);  // &lt;1&gt;

    // logger.info("Load Balancer: Got response fro item ID: " + id +
                // ", result: " + (item != null ? "SUCCESS" : "FAILED"));
    return item;
}
@language asciidoc
@doc
----

&lt;1&gt; app-item 是 service-item 在 Eureka 中注册的服务名。
</t>
<t tx="swot.20250929000751.5" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32397103752e">@doc
[source,java]
----
@c
@language java
@Autowired
private LoadBalancerClient loadBalancerClient;

public Item queryItemByIdWithOkHttpClient(Long id) throws IOException {
    // 使用 LoadBalancerClient 获取负载均衡的实例
    ServiceInstance instance = loadBalancerClient.choose("app-item");
    String actualUrl = "http://" + instance.getHost() + ":" + instance.getPort() + "/item/" + id;
    Request request = new Request.Builder().url(actualUrl).build();
    try (Response response = okHttpClient.newCall(request).execute()) {  // 执行 OkHttpClient 调用
        String json = response.body().string();  // 读取响应体
        // 使用注入的 objectMapper 反序列化成 JSON 字符串
        return objectMapper.readValue(json, Item.class);
    }
}
@doc
----

</t>
<t tx="swot.20250929000751.6">@doc
[source,java]
----
@c
@language java
public Item queryItemByIdWithWebClient(Long id) {
    return webClient.get()
                    .uri("/{id}", id)
                    .retrieve()
                    .bodyToMono(Item.class)
                    .block();
}
@doc
----


</t>
<t tx="swot.20250929114654.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d33307103752e"></t>
<t tx="swot.20250929155909.1">@language asciidoc
在微服务架构中通常会有多个服务层调用，基础服务的故障可能会导致级联故障，进而造成整个系统不可用的情况，这种现象被称为服务雪崩效应。

服务雪崩效应是一种因“服务提供者”的不可用导致“服务消费者”的不可用，并将不可用逐渐放大的过程。

如下图所示：A 作为服务提供者，B 为 A 的服务消费者，C 和 D 是 B 的服务消费者。A 不可用引起了 B 的不可用，并将不可用像滚雪球一样放大到 C 和 D 时，雪崩效应就形成了。

image::img/avalanche.png[,600]
</t>
<t tx="swot.20250929172607.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d33307103752e"></t>
<t tx="swot.20251001091156.1">@language asciidoc
测试步骤

1. 启动 Eureka 服务注册中心
2. 不要启动 service-item 服务（这样调用会失败）
3. 启动 service-order 服务

4. 调用 order 服务的相关接口
+
[source,console]
----
http :8091/order/201810300001
----

5. 重复调用几次（超过 failure-rate-threshold 设置的阈值）

6. 观察日志输出，应该会看到降级方法被调用
+
.降级结果
....

....
</t>
</tnodes>
</leo_file>
