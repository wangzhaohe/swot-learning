<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: https://leo-editor.github.io/leo-editor/leo_toc.html -->
<leo_file xmlns:leo="https://leo-editor.github.io/leo-editor/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="swot.20250909151313.2" descendentVnodeUnknownAttributes=""><vh>@adoc SpringClound.adoc</vh>
<v t="swot.20250909151510.1" descendentVnodeUnknownAttributes=""><vh>Spring Cloud 微服务</vh>
<v t="swot.20250909151547.1"><vh>1. Spring Cloud 微服务介绍</vh>
<v t="swot.20250909160528.1"><vh>1.1 什么是微服务？</vh></v>
<v t="swot.20250909160632.1"><vh>1.2 微服务带来的新挑战</vh></v>
<v t="swot.20250909160640.1"><vh>1.3 Spring Cloud？</vh></v>
<v t="swot.20250909160728.1"><vh>1.4 Cloud 的核心组件/子项目</vh></v>
<v t="swot.20250909160750.1"><vh>1.5 Cloud 的流派</vh></v>
<v t="swot.20250909160832.1"><vh>1.6 总结</vh></v>
</v>
<v t="swot.20250909151323.1"><vh>2. 创建一个空的工程 micro-service</vh></v>
<v t="swot.20250911081358.1" descendentVnodeUnknownAttributes="7d71005803000000302e3471017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313871077573732e"><vh>3. 创建商品微服务模块 service-item</vh>
<v t="swot.20250912101224.1"><vh>file -&gt; service-item/pom.xml</vh></v>
<v t="swot.20250912104007.1"><vh>file -&gt; service-item/src/main/java/com/tjise/serviceitem/pojo/Item.java</vh></v>
<v t="swot.20250912112243.1"><vh>file -&gt; service-item/src/main/java/com/tjise/serviceitem/service/ItemService.java</vh></v>
<v t="swot.20250912113856.1"><vh>file -&gt; service-item/src/main/java/com/tjise/serviceitem/controller/ItemController.java</vh></v>
<v t="swot.20250918221324.1" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313871077573732e"><vh>file -&gt; service-item/src/main/java/com/tjise/serviceitem/ServiceItemApplication.java</vh></v>
<v t="swot.20250912123428.1"><vh>file -&gt; service-item/src/main/resources/application.yml</vh></v>
</v>
<v t="swot.20250912140740.1"><vh>4. 创建订单微服务模块 service-order</vh>
<v t="swot.20250919081656.1"><vh>file -&gt; service-order/pom.xml</vh></v>
<v t="swot.20250912140845.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/pojo/Item.java</vh></v>
<v t="swot.20250912140908.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/pojo/Order.java</vh></v>
<v t="swot.20250912141126.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/pojo/OrderDetail.java</vh></v>
<v t="swot.20250913160821.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/OrderService.java</vh>
<v t="swot.20250922234952.1"><vh>@ignore-node import</vh></v>
<v t="swot.20250923001453.1"><vh>class OrderService</vh>
<v t="swot.20250923001649.1"><vh>ORDER_DATA 模拟数据</vh>
<v t="swot.20250923002048.1"><vh>订单 order</vh></v>
</v>
<v t="swot.20250923001803.1"><vh>queryOrderById</vh></v>
</v>
</v>
<v t="swot.20250913164316.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh></v>
<v t="swot.20250913164255.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/controller/OrderController.java</vh></v>
<v t="swot.20250913170215.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh></v>
<v t="swot.20250913172427.1"><vh>file -&gt; service-order/src/main/resources/application.yml</vh></v>
</v>
<v t="swot.20250914085607.1" descendentVnodeUnknownAttributes="7d7100285809000000302e302e302e312e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755809000000302e312e302e302e3071197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b01580a00000070726973657464617465711e580a000000323032352d30392d3134711f75580500000069636f6e7371205d71217d712228680b680c680c680d680e580d000000636c656f2f707269312e706e6771236810681168124b0068134b0268144b0168156816681768187561755809000000302e312e312e312e3071247d7125285808000000616e6e6f7461746571267d71272858080000007072696f7269747971284b02580a000000707269736574646174657129580a000000323032352d30392d3134712a75580500000069636f6e73712b5d712c7d712d28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67712e680e580d000000636c656f2f707269322e706e67712f6810681168124b0068134b0268144b0168156816681768187561755809000000302e312e322e312e3171307d7131285808000000616e6e6f7461746571327d71332858080000007072696f7269747971344b03580a000000707269736574646174657135580a000000323032352d30392d3134713675580500000069636f6e7371375d71387d713928680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67713a680e580d000000636c656f2f707269332e706e67713b6810681168124b0068134b0268144b0168156816681768187561755809000000302e322e302e312e30713c7d713d5808000000616e6e6f74617465713e7d713f2858080000007072696f7269747971404d0f27580a000000707269736574646174657141580a000000323032352d30392d3134714275735809000000302e322e302e312e3171437d7144285808000000616e6e6f7461746571457d71462858080000007072696f7269747971474b01580a000000707269736574646174657148580a000000323032352d30392d3134714975580500000069636f6e73714a5d714b7d714c28680b680c680c680d680e580d000000636c656f2f707269312e706e67714d6810681168124b0068134b0268144b0168156816681768187561755805000000302e322e31714e7d714f5808000000616e6e6f7461746571507d71512858080000007072696f7269747971524d0f27580a000000707269736574646174657153580a000000323032352d30392d3134715475735809000000302e332e302e302e3071557d71565808000000616e6e6f7461746571577d71582858080000007072696f7269747971594d0f27580a00000070726973657464617465715a580a000000323032352d30392d3134715b75735809000000302e332e302e302e31715c7d715d285808000000616e6e6f74617465715e7d715f2858080000007072696f7269747971604b01580a000000707269736574646174657161580a000000323032352d30392d3134716275580500000069636f6e7371635d71647d716528680b680c680c680d680e580d000000636c656f2f707269312e706e6771666810681168124b0068134b0268144b0168156816681768187561755809000000302e332e312e312e3071677d71685808000000616e6e6f7461746571697d716a2858080000007072696f72697479716b4d0f27580a00000070726973657464617465716c580a000000323032352d30392d3134716d75735809000000302e332e312e312e31716e7d716f5808000000616e6e6f7461746571707d71712858080000007072696f7269747971724d0f27580a000000707269736574646174657173580a000000323032352d30392d3134717475735809000000302e332e312e312e3271757d7176285808000000616e6e6f7461746571777d71782858080000007072696f7269747971794b02580a00000070726973657464617465717a580a000000323032352d30392d3134717b75580500000069636f6e73717c5d717d7d717e28680b680c680c682e680e580d000000636c656f2f707269322e706e67717f6810681168124b0068134b0268144b0168156816681768187561755805000000302e332e3271807d7181285808000000616e6e6f7461746571827d71832858080000007072696f7269747971844b03580a000000707269736574646174657185580a000000323032352d30392d3134718675580500000069636f6e7371875d71887d718928680b680c680c683a680e580d000000636c656f2f707269332e706e67718a6810681168124b0068134b0268144b016815681668176818756175752e"><vh>5. HTTP 客户端</vh>
<v t="swot.20250914092716.1" descendentVnodeUnknownAttributes="7d71005807000000302e302e312e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>5.1 RestTemplate -- Spring 提供的传统同步 HTTP 客户端</vh>
<v t="swot.20250914141436.1" descendentVnodeUnknownAttributes="7d71005805000000302e312e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh>
<v t="swot.20250914174528.1"><vh>@ignore-node import</vh></v>
<v t="swot.20250914174817.1" descendentVnodeUnknownAttributes="7d71005803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>class ItemService</vh>
<v t="swot.20250914175541.1"><vh>@ignore-node 方式一：字段注入（需要 @Autowired）</vh></v>
<v t="swot.20250914175616.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>方式二 单个构造函数注入</vh></v>
<v t="swot.20250914175705.1"><vh>@ignore-node queryItemById</vh></v>
</v>
</v>
</v>
<v t="swot.20250914105307.1" descendentVnodeUnknownAttributes="7d7100285807000000302e302e302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755807000000302e312e312e3071197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3134711f75580500000069636f6e7371205d71217d712228680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677123680e580d000000636c656f2f707269322e706e6771246810681168124b0068134b0268144b0168156816681768187561755807000000302e322e312e3171257d7126285808000000616e6e6f7461746571277d71282858080000007072696f7269747971294b03580a00000070726973657464617465712a580a000000323032352d30392d3134712b75580500000069636f6e73712c5d712d7d712e28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67712f680e580d000000636c656f2f707269332e706e6771306810681168124b0068134b0268144b016815681668176818756175752e"><vh>5.2 RestTemplate + OkHttp 可以兼容老代码</vh>
<v t="swot.20250914180307.1" descendentVnodeUnknownAttributes="7d71005805000000302e302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/pom.xml</vh>
<v t="swot.20250914181023.1" descendentVnodeUnknownAttributes="7d71005803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@ignore-node project</vh>
<v t="swot.20250914181123.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>okhttp 依赖</vh></v>
</v>
</v>
<v t="swot.20250914182058.1" descendentVnodeUnknownAttributes="7d71005805000000302e312e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh>
<v t="swot.20250914182242.1"><vh>@ignore-node import</vh></v>
<v t="swot.20250914182310.1" descendentVnodeUnknownAttributes="7d71005803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@ignore-node class ServiceOrderApplication</vh>
<v t="swot.20250914182350.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>RestTemplate restTemplate</vh></v>
</v>
</v>
<v t="swot.20250914195444.1" descendentVnodeUnknownAttributes="7d71005805000000302e312e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh>
<v t="swot.20250914195444.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250914195444.3" descendentVnodeUnknownAttributes="7d71005803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@ignore-node class ItemService</vh>
<v t="swot.20250914195444.4"><vh>@ignore-node 方式一：字段注入（需要 @Autowired）</vh></v>
<v t="swot.20250914195444.5" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>方式二 单个构造函数注入 -- 增加了查看是否成功使用了 OkHttp 打印</vh></v>
<v t="swot.20250914195444.6"><vh>@ignore-node queryItemById</vh></v>
</v>
</v>
</v>
<v t="swot.20250914091119.1" descendentVnodeUnknownAttributes="7d7100285807000000302e302e312e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735807000000302e302e312e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3134710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755803000000302e3171207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d313471267573752e"><vh>5.3 OkHttp -- 单独使用 Square 开源的高性能 HTTP 客户端</vh>
<v t="swot.20250914204525.1" descendentVnodeUnknownAttributes="7d7100285805000000302e312e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735805000000302e312e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3134710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh>
<v t="swot.20250914204525.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250914204525.3" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735803000000302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3134710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>@ignore-node class ServiceOrderApplication</vh>
<v t="swot.20250914204525.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node RestTemplate restTemplate</vh></v>
<v t="swot.20250914102420.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>OkHttpClient okHttpClient</vh></v>
</v>
</v>
<v t="swot.20250914105516.1" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh></v>
</v>
<v t="swot.20250914085621.1" descendentVnodeUnknownAttributes="7d7100285807000000302e302e302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735807000000302e302e302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3134710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755807000000302e312e312e3071207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3134712675735807000000302e312e312e3171277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3134712d75735807000000302e312e312e32712e7d712f285808000000616e6e6f7461746571307d71312858080000007072696f7269747971324b02580a000000707269736574646174657133580a000000323032352d30392d3134713475580500000069636f6e7371355d71367d71372868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e6771386815580d000000636c656f2f707269322e706e6771396817681868194b00681a4b02681b4b01681c681d681e681f7561755803000000302e32713a7d713b285808000000616e6e6f74617465713c7d713d2858080000007072696f72697479713e4b03580a00000070726973657464617465713f580a000000323032352d30392d3134714075580500000069636f6e7371415d71427d71432868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e6771446815580d000000636c656f2f707269332e706e6771456817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>5.4 WebClient  -- Spring WebFlux 提供的响应式 HTTP 客户端</vh>
<v t="swot.20250914212915.1" descendentVnodeUnknownAttributes="7d7100285805000000302e302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735805000000302e302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3134710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>file -&gt; service-order/pom.xml</vh>
<v t="swot.20250914212915.2" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735803000000302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3134710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>@ignore-node project</vh>
<v t="swot.20250914212915.3" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node okhttp 依赖</vh></v>
<v t="swot.20250914101602.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>WebClient</vh></v>
</v>
</v>
<v t="swot.20250914213134.1" descendentVnodeUnknownAttributes="7d7100285805000000302e312e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735805000000302e312e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3134710e75735805000000302e312e32710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b02580a000000707269736574646174657114580a000000323032352d30392d3134711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67711b580700000072656c50617468711c580d000000636c656f2f707269322e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e71255801000000317126756175752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh>
<v t="swot.20250914213134.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250914213134.3" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3134710e75735803000000302e32710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b02580a000000707269736574646174657114580a000000323032352d30392d3134711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67711b580700000072656c50617468711c580d000000636c656f2f707269322e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e71255801000000317126756175752e"><vh>@ignore-node class ServiceOrderApplication</vh>
<v t="swot.20250914213134.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node RestTemplate restTemplate</vh></v>
<v t="swot.20250914213134.5" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node OkHttpClient okHttpClient</vh></v>
<v t="swot.20250914102436.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>WebClient</vh></v>
</v>
</v>
<v t="swot.20250914214630.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh></v>
</v>
<v t="swot.20250914103506.1"><vh>5.5  RestClient -- Spring 6.1 才支持（目前的 Spring Boot 2.7.18 使用的是 Spring 5.3.x）</vh></v>
</v>
<v t="swot.20250920073920.1" descendentVnodeUnknownAttributes="7d7100285805000000302e302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3135710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755805000000302e302e3171197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3135711f75735807000000302e302e312e3171207d7121285808000000616e6e6f7461746571227d71232858080000007072696f7269747971244b02580a000000707269736574646174657125580a000000323032352d30392d3135712675580500000069636f6e7371275d71287d712928680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67712a680e580d000000636c656f2f707269322e706e67712b6810681168124b0068134b0268144b0168156816681768187561755809000000302e302e312e312e30712c7d712d5808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304d0f27580a000000707269736574646174657131580a000000323032352d30392d3134713275735809000000302e302e312e312e3171337d71345808000000616e6e6f7461746571357d71362858080000007072696f7269747971374d0f27580a000000707269736574646174657138580a000000323032352d30392d3134713975735809000000302e302e312e312e32713a7d713b285808000000616e6e6f74617465713c7d713d2858080000007072696f72697479713e4b03580a00000070726973657464617465713f580a000000323032352d30392d3135714075580500000069636f6e7371415d71427d714328680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677144680e580d000000636c656f2f707269332e706e6771456810681168124b0068134b0268144b0168156816681768187561755805000000302e312e3071467d7147285808000000616e6e6f7461746571487d71492858080000007072696f72697479714a4b01580a00000070726973657464617465714b580a000000323032352d30392d3136714c75580500000069636f6e73714d5d714e7d714f28680b680c680c680d680e580d000000636c656f2f707269312e706e6771506810681168124b0068134b0268144b0168156816681768187561755805000000302e312e3171517d71525808000000616e6e6f7461746571537d71542858080000007072696f7269747971554d0f27580a000000707269736574646174657156580a000000323032352d30392d3135715775735807000000302e312e312e3171587d71595808000000616e6e6f74617465715a7d715b2858080000007072696f72697479715c4d0f27580a00000070726973657464617465715d580a000000323032352d30392d3135715e75735809000000302e312e312e312e30715f7d7160285808000000616e6e6f7461746571617d71622858080000007072696f7269747971634b02580a000000707269736574646174657164580a000000323032352d30392d3238716575580500000069636f6e7371665d71677d716828680b680c680c682a680e580d000000636c656f2f707269322e706e6771696810681168124b0068134b0268144b0168156816681768187561755809000000302e312e312e312e32716a7d716b5808000000616e6e6f74617465716c7d716d2858080000007072696f72697479716e4d0f27580a00000070726973657464617465716f580a000000323032352d30392d3134717075735809000000302e312e312e312e3371717d71725808000000616e6e6f7461746571737d71742858080000007072696f7269747971754d0f27580a000000707269736574646174657176580a000000323032352d30392d3134717775735809000000302e312e312e312e3471787d7179285808000000616e6e6f74617465717a7d717b2858080000007072696f72697479717c4b03580a00000070726973657464617465717d580a000000323032352d30392d3135717e75580500000069636f6e73717f5d71807d718128680b680c680c6844680e580d000000636c656f2f707269332e706e6771826810681168124b0068134b0268144b016815681668176818756175752e"><vh>6. service-order url 硬编码问题（在后面引入 Eureka 后不用url，直接用名字了）</vh>
<v t="swot.20250915094305.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3135710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3171197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3135711f75735805000000302e312e3171207d7121285808000000616e6e6f7461746571227d71232858080000007072696f7269747971244b02580a000000707269736574646174657125580a000000323032352d30392d3135712675580500000069636f6e7371275d71287d712928680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67712a680e580d000000636c656f2f707269322e706e67712b6810681168124b0068134b0268144b0168156816681768187561755807000000302e312e312e30712c7d712d5808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304d0f27580a000000707269736574646174657131580a000000323032352d30392d3134713275735807000000302e312e312e3171337d71345808000000616e6e6f7461746571357d71362858080000007072696f7269747971374d0f27580a000000707269736574646174657138580a000000323032352d30392d3134713975735807000000302e312e312e32713a7d713b285808000000616e6e6f74617465713c7d713d2858080000007072696f72697479713e4b03580a00000070726973657464617465713f580a000000323032352d30392d3135714075580500000069636f6e7371415d71427d714328680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677144680e580d000000636c656f2f707269332e706e6771456810681168124b0068134b0268144b016815681668176818756175752e"><vh>6.1 解决 service-order url 硬编码问题：以 WebClient 为例使用 @Value</vh>
<v t="swot.20250915102329.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3135710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/resources/application.yml</vh></v>
<v t="swot.20250915140414.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3135710775735803000000302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b02580a00000070726973657464617465710d580a000000323032352d30392d3135710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677114580700000072656c506174687115580d000000636c656f2f707269322e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755805000000302e312e3071207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3134712675735805000000302e312e3171277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3134712d75735805000000302e312e32712e7d712f285808000000616e6e6f7461746571307d71312858080000007072696f7269747971324b03580a000000707269736574646174657133580a000000323032352d30392d3135713475580500000069636f6e7371355d71367d71372868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e6771386815580d000000636c656f2f707269332e706e6771396817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh>
<v t="swot.20250915140414.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250915140414.3" descendentVnodeUnknownAttributes="7d71002858010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3135710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3071197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3134711f75735803000000302e3171207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3134712675735803000000302e3271277d7128285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4b03580a00000070726973657464617465712c580a000000323032352d30392d3135712d75580500000069636f6e73712e5d712f7d713028680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677131680e580d000000636c656f2f707269332e706e6771326810681168124b0068134b0268144b016815681668176818756175752e"><vh>class ServiceOrderApplication</vh>
<v t="swot.20250915140414.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node RestTemplate restTemplate</vh></v>
<v t="swot.20250915140414.5" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node OkHttpClient okHttpClient</vh></v>
<v t="swot.20250915140414.6" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3135710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>WebClient</vh></v>
</v>
</v>
</v>
<v t="swot.20250915172449.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3136710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3171197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3135711f75735805000000302e312e3171207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3135712675735807000000302e312e312e3071277d7128285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4b02580a00000070726973657464617465712c580a000000323032352d30392d3238712d75580500000069636f6e73712e5d712f7d713028680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677131680e580d000000636c656f2f707269322e706e6771326810681168124b0068134b0268144b0168156816681768187561755807000000302e312e312e3271337d71345808000000616e6e6f7461746571357d71362858080000007072696f7269747971374d0f27580a000000707269736574646174657138580a000000323032352d30392d3134713975735807000000302e312e312e33713a7d713b5808000000616e6e6f74617465713c7d713d2858080000007072696f72697479713e4d0f27580a00000070726973657464617465713f580a000000323032352d30392d3134714075735807000000302e312e312e3471417d7142285808000000616e6e6f7461746571437d71442858080000007072696f7269747971454b03580a000000707269736574646174657146580a000000323032352d30392d3135714775580500000069636f6e7371485d71497d714a28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67714b680e580d000000636c656f2f707269332e706e67714c6810681168124b0068134b0268144b016815681668176818756175752e"><vh>6.2 解决 service-order url 硬编码问题：使用 @ConfigurationProperties</vh>
<v t="swot.20250916112922.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3136710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/utils/ItemProperties.java</vh></v>
<v t="swot.20250916113222.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3135710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3135710e75735805000000302e312e30710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b02580a000000707269736574646174657114580a000000323032352d30392d3238711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67711b580700000072656c50617468711c580d000000636c656f2f707269322e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e712558010000003171267561755805000000302e312e3271277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3134712d75735805000000302e312e33712e7d712f5808000000616e6e6f7461746571307d71312858080000007072696f7269747971324d0f27580a000000707269736574646174657133580a000000323032352d30392d3134713475735805000000302e312e3471357d7136285808000000616e6e6f7461746571377d71382858080000007072696f7269747971394b03580a00000070726973657464617465713a580a000000323032352d30392d3135713b75580500000069636f6e73713c5d713d7d713e286819681a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67713f681c580d000000636c656f2f707269332e706e677140681e681f68204b0068214b0268224b016823682468256826756175752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh>
<v t="swot.20250916113222.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250916113222.3" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3135710775735803000000302e3071087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b02580a00000070726973657464617465710d580a000000323032352d30392d3238710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677114580700000072656c506174687115580d000000636c656f2f707269322e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755803000000302e3271207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3134712675735803000000302e3371277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3134712d75735803000000302e34712e7d712f285808000000616e6e6f7461746571307d71312858080000007072696f7269747971324b03580a000000707269736574646174657133580a000000323032352d30392d3135713475580500000069636f6e7371355d71367d71372868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e6771386815580d000000636c656f2f707269332e706e6771396817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>class ServiceOrderApplication</vh>
<v t="swot.20250928064421.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3238710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>DI itemProperties -- New Added</vh></v>
<v t="swot.20250928064324.1"><vh>public static void main</vh></v>
<v t="swot.20250916113222.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node RestTemplate restTemplate</vh></v>
<v t="swot.20250916113222.5" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node OkHttpClient okHttpClient</vh></v>
<v t="swot.20250916113222.6" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3135710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@Bean WebClient -- New Added</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20250916132736.1" descendentVnodeUnknownAttributes=""><vh>7. 引入微服务注册、发现机制</vh>
<v t="swot.20250916133305.1"><vh>7.1 Eureka 介绍</vh></v>
<v t="swot.20250916134236.1"><vh>7.2 Eureka Server 的创建</vh>
<v t="swot.20250916141123.1"><vh>file -&gt; eureka/pom.xml</vh>
<v t="swot.20250916152133.1"><vh>properties 配置项目属性：Java 版本、Spring Boot 和 Spring Cloud 版本</vh></v>
<v t="swot.20250916152144.1"><vh>dependencyManagement 依赖管理：导入 Spring Boot 和 Spring Cloud 的依赖管理</vh></v>
<v t="swot.20250916152233.1"><vh>dependencies 项目依赖：添加 Eureka Server 依赖</vh></v>
<v t="swot.20250916152243.1"><vh>plugins 构建配置：添加 Spring Boot Maven 插件</vh></v>
</v>
<v t="swot.20250916155249.1"><vh>file -&gt; eureka/src/main/java/com/tjise/eureka/EurekaApplication.java</vh></v>
<v t="swot.20250916160550.1"><vh>file -&gt; eureka/src/main/resources/application.yml</vh></v>
<v t="swot.20250917094025.1"><vh>启动 Eureka Server 并测试网页管理端</vh></v>
</v>
<v t="swot.20250917113532.1" descendentVnodeUnknownAttributes="7d7100285807000000302e302e302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755807000000302e302e302e3171197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3138711f75580500000069636f6e7371205d71217d712228680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677123680e580d000000636c656f2f707269322e706e6771246810681168124b0068134b0268144b0168156816681768187561755809000000302e302e302e322e3071257d7126285808000000616e6e6f7461746571277d71282858080000007072696f7269747971294b03580a00000070726973657464617465712a580a000000323032352d30392d3138712b75580500000069636f6e73712c5d712d7d712e28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67712f680e580d000000636c656f2f707269332e706e6771306810681168124b0068134b0268144b0168156816681768187561755803000000302e3171317d7132285808000000616e6e6f7461746571337d71342858080000007072696f7269747971354b04580a000000707269736574646174657136580a000000323032352d30392d3138713775580500000069636f6e7371385d71397d713a28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67713b680e580d000000636c656f2f707269342e706e67713c6810681168124b0068134b0268144b0168156816681768187561755803000000302e32713d7d713e285808000000616e6e6f74617465713f7d71402858080000007072696f7269747971414b05580a000000707269736574646174657142580a000000323032352d30392d3138714375580500000069636f6e7371445d71457d714628680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677147680e580d000000636c656f2f707269352e706e6771486810681168124b0068134b0268144b016815681668176818756175752e"><vh>7.3 Eureka Server 注册商品微服务</vh>
<v t="swot.20250917113753.1" descendentVnodeUnknownAttributes="7d7100285805000000302e302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755805000000302e302e3171197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3138711f75580500000069636f6e7371205d71217d712228680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677123680e580d000000636c656f2f707269322e706e6771246810681168124b0068134b0268144b0168156816681768187561755807000000302e302e322e3071257d7126285808000000616e6e6f7461746571277d71282858080000007072696f7269747971294b03580a00000070726973657464617465712a580a000000323032352d30392d3138712b75580500000069636f6e73712c5d712d7d712e28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67712f680e580d000000636c656f2f707269332e706e6771306810681168124b0068134b0268144b016815681668176818756175752e"><vh>file -&gt; service-item/pom.xml</vh>
<v t="swot.20250918182311.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3171197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3138711f75580500000069636f6e7371205d71217d712228680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677123680e580d000000636c656f2f707269322e706e6771246810681168124b0068134b0268144b0168156816681768187561755805000000302e322e3071257d7126285808000000616e6e6f7461746571277d71282858080000007072696f7269747971294b03580a00000070726973657464617465712a580a000000323032352d30392d3138712b75580500000069636f6e73712c5d712d7d712e28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67712f680e580d000000636c656f2f707269332e706e6771306810681168124b0068134b0268144b016815681668176818756175752e"><vh>@ignore-node project</vh>
<v t="swot.20250918182153.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>properties Add cloud Version 2021.0.8</vh></v>
<v t="swot.20250918182407.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>dependencyManagement Add cloud dependency</vh></v>
<v t="swot.20250918182711.1" descendentVnodeUnknownAttributes="7d71005803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@ignore-node dependencies</vh>
<v t="swot.20250918182810.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>spring-cloud-starter-netflix-eureka-client</vh></v>
</v>
</v>
</v>
<v t="swot.20250918184444.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b04580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67710d580700000072656c50617468710e580d000000636c656f2f707269342e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-item/src/main/resources/application.yml</vh></v>
<v t="swot.20250913170621.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b05580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67710d580700000072656c50617468710e580d000000636c656f2f707269352e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-item/src/main/java/com/tjise/serviceitem/ServiceItemApplication.java</vh></v>
<v t="swot.20250927165432.1"><vh>启动多个 service-item 商品微服务实例</vh></v>
</v>
<v t="swot.20250918225928.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735807000000302e302e302e3071087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3230710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755807000000302e302e302e3171207d7121285808000000616e6e6f7461746571227d71232858080000007072696f7269747971244b02580a000000707269736574646174657125580a000000323032352d30392d3230712675580500000069636f6e7371275d71287d71292868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67712a6815580d000000636c656f2f707269322e706e67712b6817681868194b00681a4b02681b4b01681c681d681e681f7561755809000000302e302e302e322e30712c7d712d5808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304d0f27580a000000707269736574646174657131580a000000323032352d30392d3134713275735809000000302e302e302e322e3171337d71345808000000616e6e6f7461746571357d71362858080000007072696f7269747971374d0f27580a000000707269736574646174657138580a000000323032352d30392d3134713975735809000000302e302e302e322e32713a7d713b285808000000616e6e6f74617465713c7d713d2858080000007072696f72697479713e4b03580a00000070726973657464617465713f580a000000323032352d30392d3138714075580500000069636f6e7371415d71427d71432868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e6771446815580d000000636c656f2f707269332e706e6771456817681868194b00681a4b02681b4b01681c681d681e681f7561755803000000302e3171467d71475808000000616e6e6f7461746571487d71492858080000007072696f72697479714a4d0f27580a00000070726973657464617465714b580a000000323032352d30392d3231714c75735805000000302e312e31714d7d714e5808000000616e6e6f74617465714f7d71502858080000007072696f7269747971514d0f27580a000000707269736574646174657152580a000000323032352d30392d3231715375735805000000302e312e3271547d7155285808000000616e6e6f7461746571567d71572858080000007072696f7269747971584b04580a000000707269736574646174657159580a000000323032352d30392d3231715a75580500000069636f6e73715b5d715c7d715d2868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67715e6815580d000000636c656f2f707269342e706e67715f6817681868194b00681a4b02681b4b01681c681d681e681f7561755803000000302e3271607d71615808000000616e6e6f7461746571627d71632858080000007072696f7269747971644d0f27580a000000707269736574646174657165580a000000323032352d30392d3231716675735805000000302e322e3171677d7168285808000000616e6e6f7461746571697d716a2858080000007072696f72697479716b4b05580a00000070726973657464617465716c580a000000323032352d30392d3231716d75580500000069636f6e73716e5d716f7d71702868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e6771716815580d000000636c656f2f707269352e706e6771726817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e322e312e3071737d71745808000000616e6e6f7461746571757d71762858080000007072696f7269747971774d0f27580a000000707269736574646174657178580a000000323032352d30392d3231717975735807000000302e322e312e31717a7d717b5808000000616e6e6f74617465717c7d717d2858080000007072696f72697479717e4d0f27580a00000070726973657464617465717f580a000000323032352d30392d3231718075735807000000302e322e312e3271817d71825808000000616e6e6f7461746571837d71842858080000007072696f7269747971854d0f27580a000000707269736574646174657186580a000000323032352d30392d3139718775735803000000302e3371887d71895808000000616e6e6f74617465718a7d718b2858080000007072696f72697479718c4d0f27580a00000070726973657464617465718d580a000000323032352d30392d3231718e75735805000000302e332e31718f7d7190285808000000616e6e6f7461746571917d71922858080000007072696f7269747971934b06580a000000707269736574646174657194580a000000323032352d30392d3231719575580500000069636f6e7371965d71977d71982868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e6771996815580d000000636c656f2f707269362e706e67719a6817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e342e312e31719b7d719c285808000000616e6e6f74617465719d7d719e2858080000007072696f72697479719f4b07580a0000007072697365746461746571a0580a000000323032352d30392d323171a175580500000069636f6e7371a25d71a37d71a42868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269372e706e6771a56815580d000000636c656f2f707269372e706e6771a66817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>7.4 Eureka 中发现商品微服务</vh>
<v t="swot.20250919080549.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735805000000302e302e3071087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3230710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755805000000302e302e3171207d7121285808000000616e6e6f7461746571227d71232858080000007072696f7269747971244b02580a000000707269736574646174657125580a000000323032352d30392d3230712675580500000069636f6e7371275d71287d71292868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67712a6815580d000000636c656f2f707269322e706e67712b6817681868194b00681a4b02681b4b01681c681d681e681f7561755807000000302e302e322e30712c7d712d5808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304d0f27580a000000707269736574646174657131580a000000323032352d30392d3134713275735807000000302e302e322e3171337d71345808000000616e6e6f7461746571357d71362858080000007072696f7269747971374d0f27580a000000707269736574646174657138580a000000323032352d30392d3134713975735807000000302e302e322e32713a7d713b285808000000616e6e6f74617465713c7d713d2858080000007072696f72697479713e4b03580a00000070726973657464617465713f580a000000323032352d30392d3138714075580500000069636f6e7371415d71427d71432868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e6771446815580d000000636c656f2f707269332e706e6771456817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>file -&gt; service-order/pom.xml</vh>
<v t="swot.20250919080549.2" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3230710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3171197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3230711f75580500000069636f6e7371205d71217d712228680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677123680e580d000000636c656f2f707269322e706e6771246810681168124b0068134b0268144b0168156816681768187561755805000000302e322e3071257d71265808000000616e6e6f7461746571277d71282858080000007072696f7269747971294d0f27580a00000070726973657464617465712a580a000000323032352d30392d3134712b75735805000000302e322e31712c7d712d5808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304d0f27580a000000707269736574646174657131580a000000323032352d30392d3134713275735805000000302e322e3271337d7134285808000000616e6e6f7461746571357d71362858080000007072696f7269747971374b03580a000000707269736574646174657138580a000000323032352d30392d3138713975580500000069636f6e73713a5d713b7d713c28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67713d680e580d000000636c656f2f707269332e706e67713e6810681168124b0068134b0268144b016815681668176818756175752e"><vh>@ignore-node project</vh>
<v t="swot.20250919135501.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3230710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>properties version</vh></v>
<v t="swot.20250919135651.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3230710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>Add cloud dependency</vh></v>
<v t="swot.20250919135524.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3134710e75735803000000302e32710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b03580a000000707269736574646174657114580a000000323032352d30392d3138711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67711b580700000072656c50617468711c580d000000636c656f2f707269332e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e71255801000000317126756175752e"><vh>@ignore-node dependencies</vh>
<v t="swot.20250919080549.3" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node OkHttp 依赖</vh></v>
<v t="swot.20250919080549.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node WebClient 依赖</vh></v>
<v t="swot.20250919135739.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>eureka-client 依赖</vh></v>
</v>
</v>
</v>
<v t="swot.20250919170635.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735803000000302e32710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b04580a000000707269736574646174657114580a000000323032352d30392d3231711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67711b580700000072656c50617468711c580d000000636c656f2f707269342e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e71255801000000317126756175752e"><vh>file -&gt; service-order/src/main/resources/application.yml</vh>
<v t="swot.20250921075637.1"><vh>port</vh></v>
<v t="swot.20250921075656.1" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323171077573732e"><vh>name</vh></v>
<v t="swot.20250921075711.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b04580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67710d580700000072656c50617468710e580d000000636c656f2f707269342e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>eureka</vh></v>
</v>
<v t="swot.20250919222308.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b05580a00000070726973657464617465710d580a000000323032352d30392d3231710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677114580700000072656c506174687115580d000000636c656f2f707269352e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755805000000302e312e3071207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3231712675735805000000302e312e3171277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3231712d75735805000000302e312e32712e7d712f5808000000616e6e6f7461746571307d71312858080000007072696f7269747971324d0f27580a000000707269736574646174657133580a000000323032352d30392d313971347573752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh>
<v t="swot.20250919222308.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250919222308.3" descendentVnodeUnknownAttributes="7d71002858010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b05580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67710d580700000072656c50617468710e580d000000636c656f2f707269352e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3071197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3231711f75735803000000302e3171207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3231712675735803000000302e3271277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3139712d7573752e"><vh>class ServiceOrderApplication -&gt; NOTE:下面的三个客户端任选一个即可</vh>
<v t="swot.20250919222308.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323171077573732e"><vh>RestTemplate</vh></v>
<v t="swot.20250919222308.5" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323171077573732e"><vh>OkHttpClient 不支持 @LoadBalanced</vh></v>
<v t="swot.20250919222308.6" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313971077573732e"><vh>WebClient</vh></v>
</v>
</v>
<v t="swot.20250920121016.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b06580a00000070726973657464617465710d580a000000323032352d30392d3231710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e677114580700000072656c506174687115580d000000636c656f2f707269362e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh>
<v t="swot.20250921083535.1"><vh>import</vh></v>
<v t="swot.20250921083629.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b06580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e67710d580700000072656c50617468710e580d000000636c656f2f707269362e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>class ItemService</vh>
<v t="swot.20250921084241.1"><vh>方式一: RestTemplate -&gt; queryItemById</vh></v>
<v t="swot.20250921115356.1"><vh>方式二: OkHttpClient -&gt; queryItemByIdWithOkHttpClient -&gt; OkHttpClient 本身不支持服务发现功能，需要自己实现</vh></v>
<v t="swot.20250921085305.1"><vh>方式三: WebClient    -&gt; queryItemByIdWithWebClient</vh></v>
</v>
</v>
<v t="swot.20250921102752.1" descendentVnodeUnknownAttributes="7d71005805000000302e312e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b07580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269372e706e67710d580700000072656c50617468710e580d000000636c656f2f707269372e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/OrderService.java</vh>
<v t="swot.20250921102844.1"><vh>@ignore-node import</vh></v>
<v t="swot.20250921103039.1" descendentVnodeUnknownAttributes="7d71005803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b07580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269372e706e67710d580700000072656c50617468710e580d000000636c656f2f707269372e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@ignore-node OrderService</vh>
<v t="swot.20250921103135.1"><vh>@ignore-node ORDER_DATA 使用静态 Map 模拟数据库存储订单数据</vh></v>
<v t="swot.20250921103403.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b07580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269372e706e67710d580700000072656c50617468710e580d000000636c656f2f707269372e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>Order queryOrderById</vh></v>
</v>
</v>
</v>
<v t="swot.20250928164633.1" descendentVnodeUnknownAttributes="7d7100285805000000302e312e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735807000000302e312e302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735809000000302e312e302e312e31710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b01580a000000707269736574646174657114580a000000323032352d30392d3239711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67711b580700000072656c50617468711c580d000000636c656f2f707269312e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e712558010000003171267561755809000000302e312e302e312e3271277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3239712d7573752e"><vh>7.5 测试 service-item 被负载均衡分配的结果</vh>
<v t="swot.20250928233710.1"><vh>7.5.1 只在 service-item 的不同实例中打印端口调用信息</vh>
<v t="swot.20250928232827.1"><vh>file -&gt; service-item/src/main/java/com/tjise/serviceitem/controller/ItemController.java</vh></v>
</v>
<v t="swot.20250928233840.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735805000000302e302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735807000000302e302e312e31710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b01580a000000707269736574646174657114580a000000323032352d30392d3239711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67711b580700000072656c50617468711c580d000000636c656f2f707269312e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e712558010000003171267561755807000000302e302e312e3271277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3239712d7573752e"><vh>7.5.2 在 service-order 中集中打印负载均衡端口调用信息</vh>
<v t="swot.20250929000751.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735805000000302e312e31710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b01580a000000707269736574646174657114580a000000323032352d30392d3239711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67711b580700000072656c50617468711c580d000000636c656f2f707269312e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e712558010000003171267561755805000000302e312e3271277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3239712d7573752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh>
<v t="swot.20250929000751.2"><vh>import</vh></v>
<v t="swot.20250929000751.3" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3239710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755803000000302e3271207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d323971267573752e"><vh>class ItemService</vh>
<v t="swot.20251001180733.1"><vh>@ignore-node ItemService 单个构造方法注入</vh></v>
<v t="swot.20250929000751.4" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3239710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>方式一: RestTemplate -&gt; queryItemById</vh></v>
<v t="swot.20250929000751.5" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323971077573732e"><vh>方式二: OkHttpClient -&gt; queryItemByIdWithOkHttpClient -&gt; OkHttpClient 本身不支持服务发现功能，需要自己实现</vh></v>
<v t="swot.20250929000751.6"><vh>方式三: WebClient    -&gt; queryItemByIdWithWebClient</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20250921163937.1" descendentVnodeUnknownAttributes="7d7100285809000000302e302e302e322e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755805000000302e312e3171197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3231711f75580500000069636f6e7371205d71217d712228680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677123680e580d000000636c656f2f707269322e706e6771246810681168124b0068134b0268144b0168156816681768187561755805000000302e312e3271257d7126285808000000616e6e6f7461746571277d71282858080000007072696f7269747971294b03580a00000070726973657464617465712a580a000000323032352d30392d3231712b75580500000069636f6e73712c5d712d7d712e28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67712f680e580d000000636c656f2f707269332e706e6771306810681168124b0068134b0268144b0168156816681768187561755805000000302e322e3171317d7132285808000000616e6e6f7461746571337d71342858080000007072696f7269747971354b04580a000000707269736574646174657136580a000000323032352d30392d3231713775580500000069636f6e7371385d71397d713a28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67713b680e580d000000636c656f2f707269342e706e67713c6810681168124b0068134b0268144b0168156816681768187561755803000000302e33713d7d713e5808000000616e6e6f74617465713f7d71402858080000007072696f7269747971414d0f27580a000000707269736574646174657142580a000000323032352d30392d3138714375735805000000302e332e3271447d7145285808000000616e6e6f7461746571467d71472858080000007072696f7269747971484b05580a000000707269736574646174657149580a000000323032352d30392d3231714a75580500000069636f6e73714b5d714c7d714d28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67714e680e580d000000636c656f2f707269352e706e67714f6810681168124b0068134b0268144b0168156816681768187561755803000000302e3471507d71515808000000616e6e6f7461746571527d71532858080000007072696f7269747971544d0f27580a000000707269736574646174657155580a000000323032352d30392d3231715675735805000000302e342e3171577d71585808000000616e6e6f7461746571597d715a2858080000007072696f72697479715b4d0f27580a00000070726973657464617465715c580a000000323032352d30392d3231715d75735805000000302e342e32715e7d715f285808000000616e6e6f7461746571607d71612858080000007072696f7269747971624b06580a000000707269736574646174657163580a000000323032352d30392d3231716475580500000069636f6e7371655d71667d716728680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e677168680e580d000000636c656f2f707269362e706e6771696810681168124b0068134b0268144b016815681668176818756175752e"><vh>7.6 Eureka 添加用户认证</vh>
<v t="swot.20250921164454.1" descendentVnodeUnknownAttributes="7d71005807000000302e302e322e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; eureka/pom.xml</vh>
<v t="swot.20250921164739.1" descendentVnodeUnknownAttributes="7d71005805000000302e322e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@ignore-node project</vh>
<v t="swot.20250921164454.2"><vh>@ignore-node properties 配置项目属性：Java 版本、Spring Boot 和 Spring Cloud 版本</vh></v>
<v t="swot.20250921164454.3"><vh>@ignore-node dependencyManagement 依赖管理：导入 Spring Boot 和 Spring Cloud 的依赖管理</vh></v>
<v t="swot.20250921164454.4" descendentVnodeUnknownAttributes="7d71005803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@ignore-node dependencies</vh>
<v t="swot.20250921165129.1"><vh>@ignore-node Eureka Server 核心依赖</vh></v>
<v t="swot.20250921165148.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>security 安全认证依赖</vh></v>
</v>
<v t="swot.20250921164454.5"><vh>@ignore-node plugins 构建配置：添加 Spring Boot Maven 插件</vh></v>
</v>
</v>
<v t="swot.20250921165831.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3271197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b03580a00000070726973657464617465711e580a000000323032352d30392d3231711f75580500000069636f6e7371205d71217d712228680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677123680e580d000000636c656f2f707269332e706e6771246810681168124b0068134b0268144b016815681668176818756175752e"><vh>file -&gt; eureka/src/main/resources/application.yml</vh>
<v t="swot.20250921170022.1"><vh>server</vh></v>
<v t="swot.20250921170040.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>spring -&gt; new added</vh></v>
<v t="swot.20250921165918.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>eureka -&gt; new changed</vh></v>
</v>
<v t="swot.20250921180203.1" descendentVnodeUnknownAttributes="7d71005803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b04580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67710d580700000072656c50617468710e580d000000636c656f2f707269342e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; eureka/src/main/java/com/tjise/eureka/conf/WebSecurityConfig.java</vh>
<v t="swot.20250921180537.1"><vh>@ignore-node import</vh></v>
<v t="swot.20250921180605.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b04580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67710d580700000072656c50617468710e580d000000636c656f2f707269342e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>WebSecurityConfig 新建安全配置类</vh></v>
</v>
<v t="swot.20250921181348.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3138710775735803000000302e3271087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b05580a00000070726973657464617465710d580a000000323032352d30392d3231710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677114580700000072656c506174687115580d000000636c656f2f707269352e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>file -&gt; service-item/src/main/resources/application.yml</vh>
<v t="swot.20250921182102.1"><vh>port</vh></v>
<v t="swot.20250921182058.1"><vh>name</vh></v>
<v t="swot.20250921182054.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b05580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67710d580700000072656c50617468710e580d000000636c656f2f707269352e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>eureka</vh></v>
</v>
<v t="swot.20250921181657.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735803000000302e32710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b06580a000000707269736574646174657114580a000000323032352d30392d3231711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e67711b580700000072656c50617468711c580d000000636c656f2f707269362e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e71255801000000317126756175752e"><vh>file -&gt; service-order/src/main/resources/application.yml</vh>
<v t="swot.20250921181657.2"><vh>port</vh></v>
<v t="swot.20250921181657.3" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323171077573732e"><vh>name</vh></v>
<v t="swot.20250921181657.4" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b06580a000000707269736574646174657106580a000000323032352d30392d3231710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e67710d580700000072656c50617468710e580d000000636c656f2f707269362e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>eureka</vh></v>
</v>
</v>
<v t="swot.20250921193934.1" descendentVnodeUnknownAttributes="7d7100285805000000302e312e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3138710775735807000000302e312e302e3271087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3232710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755805000000302e312e3171207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3231712675735807000000302e312e312e3171277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3231712d75735807000000302e312e312e32712e7d712f285808000000616e6e6f7461746571307d71312858080000007072696f7269747971324b02580a000000707269736574646174657133580a000000323032352d30392d3232713475580500000069636f6e7371355d71367d71372868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e6771386815580d000000636c656f2f707269322e706e6771396817681868194b00681a4b02681b4b01681c681d681e681f756175580d000000302e322e322e302e312e302e31713a7d713b285808000000616e6e6f74617465713c7d713d2858080000007072696f72697479713e4b01580a00000070726973657464617465713f580a000000323032352d30392d3237714075580500000069636f6e7371415d71427d71432868126813681368146815580d000000636c656f2f707269312e706e6771446817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>7.7 Eureka 集群（高可用性）</vh>
<v t="swot.20250922232410.1"><vh>配置 Eureka</vh>
<v t="swot.20250921213623.1"><vh>file -&gt; eureka/src/main/resources/application-peer2.yml</vh></v>
<v t="swot.20250921213424.1"><vh>file -&gt; eureka/src/main/resources/application-peer1.yml</vh></v>
<v t="swot.20250921213631.1"><vh>file -&gt; eureka/src/main/resources/application-peer3.yml</vh></v>
<v t="swot.20250921235101.1"><vh>反例: 创建 nginx 容器实现访问 Eureka 3 台服务器集群的负载均衡（会引入 nginx 单点故障问题）</vh>
<v t="swot.20250922001602.1"><vh>file -&gt; eureka/src/main/resources/eureka.conf</vh></v>
</v>
</v>
<v t="swot.20250922232431.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3138710775735805000000302e302e3271087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3232710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755803000000302e3171207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3231712675735805000000302e312e3171277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3231712d75735805000000302e312e32712e7d712f285808000000616e6e6f7461746571307d71312858080000007072696f7269747971324b02580a000000707269736574646174657133580a000000323032352d30392d3232713475580500000069636f6e7371355d71367d71372868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e6771386815580d000000636c656f2f707269322e706e6771396817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>配置 微服务(2个)</vh>
<v t="swot.20250922225939.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3138710775735803000000302e3271087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3232710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>file -&gt; service-item/src/main/resources/application.yml</vh>
<v t="swot.20250922225939.2"><vh>port</vh></v>
<v t="swot.20250922225939.3"><vh>name</vh></v>
<v t="swot.20250922225939.4" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3232710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>eureka</vh></v>
</v>
<v t="swot.20250922225949.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735803000000302e32710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b02580a000000707269736574646174657114580a000000323032352d30392d3232711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67711b580700000072656c50617468711c580d000000636c656f2f707269322e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e71255801000000317126756175752e"><vh>file -&gt; service-order/src/main/resources/application.yml</vh>
<v t="swot.20250922225949.2"><vh>port</vh></v>
<v t="swot.20250922225949.3" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323171077573732e"><vh>name</vh></v>
<v t="swot.20250922225949.4" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3232710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>eureka</vh></v>
</v>
</v>
<v t="swot.20250922232551.1" descendentVnodeUnknownAttributes="7d7100580b000000302e322e302e312e302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3237710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>测试高可用性</vh>
<v t="swot.20250923003436.1"><vh>httpie 测试</vh></v>
<v t="swot.20250923003556.1"><vh>停止一个 eureka 服务再测试</vh></v>
<v t="swot.20250923003649.1" descendentVnodeUnknownAttributes="7d71005809000000302e302e312e302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3237710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>创建新订单再测试</vh>
<v t="swot.20250923002644.1" descendentVnodeUnknownAttributes="7d71005807000000302e312e302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3237710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/OrderService.java</vh>
<v t="swot.20250923002644.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250923002644.3" descendentVnodeUnknownAttributes="7d71005805000000302e302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3237710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>class OrderService</vh>
<v t="swot.20250923002644.4" descendentVnodeUnknownAttributes="7d71005803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3237710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>ORDER_DATA 模拟数据</vh>
<v t="swot.20250923002644.5"><vh>第一个订单 order</vh></v>
<v t="swot.20250923002644.6" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3237710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>第二个订单 order2</vh></v>
</v>
<v t="swot.20250923002644.7"><vh>queryOrderById</vh></v>
</v>
</v>
</v>
<v t="swot.20250923003731.1"><vh>重启 service-order 后，httpie 测试:</vh></v>
</v>
</v>
</v>
<v t="swot.20250929114654.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3330710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3330710e75735805000000302e312e30710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3231711575735809000000302e312e302e302e3071167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d30392d3230711c75735809000000302e312e302e302e31711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d30392d323071237573580b000000302e312e302e302e322e3071247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d30392d3134712a7573580b000000302e312e302e302e322e31712b7d712c5808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4d0f27580a000000707269736574646174657130580a000000323032352d30392d313471317573580b000000302e312e302e302e322e3271327d71335808000000616e6e6f7461746571347d71352858080000007072696f7269747971364d0f27580a000000707269736574646174657137580a000000323032352d30392d313871387573580b000000302e312e302e302e322e3371397d713a285808000000616e6e6f74617465713b7d713c2858080000007072696f72697479713d4b01580a00000070726973657464617465713e580a000000323032352d30392d3330713f75580500000069636f6e7371405d71417d7142285804000000747970657143580400000066696c657144684458320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677145580700000072656c506174687146580d000000636c656f2f707269312e706e677147580500000077686572657148580e0000006265666f7265486561646c696e6571495807000000796f6666736574714a4b005807000000786f6666736574714b4b02580400000078706164714c4b0158020000006f6e714d5805000000766e6f6465714e5808000000636c656f49636f6e714f58010000003171507561755805000000302e312e3171517d71525808000000616e6e6f7461746571537d71542858080000007072696f7269747971554d0f27580a000000707269736574646174657156580a000000323032352d30392d3231715775735807000000302e312e312e3171587d71595808000000616e6e6f74617465715a7d715b2858080000007072696f72697479715c4d0f27580a00000070726973657464617465715d580a000000323032352d30392d3231715e75735807000000302e312e312e32715f7d71605808000000616e6e6f7461746571617d71622858080000007072696f7269747971634d0f27580a000000707269736574646174657164580a000000323032352d30392d3232716575735807000000302e312e312e3371667d7167285808000000616e6e6f7461746571687d71692858080000007072696f72697479716a4b04580a00000070726973657464617465716b580a000000323032352d31302d3031716c75580500000069636f6e73716d5d716e7d716f2868436844684458320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e6771706846580d000000636c656f2f707269342e706e67717168486849684a4b00684b4b02684c4b01684d684e684f6850756175580b000000302e312e322e312e302e3171727d71735808000000616e6e6f7461746571747d71752858080000007072696f7269747971764d0f27580a000000707269736574646174657177580a000000323032352d30392d3237717875735809000000302e312e322e312e3171797d717a285808000000616e6e6f74617465717b7d717c2858080000007072696f72697479717d4b03580a00000070726973657464617465717e580a000000323032352d31302d3031717f75580500000069636f6e7371805d71817d71822868436844684458320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e6771836846580d000000636c656f2f707269332e706e67718468486849684a4b00684b4b02684c4b01684d684e684f68507561755809000000302e312e322e312e3271857d7186285808000000616e6e6f7461746571877d71882858080000007072696f7269747971894b04580a00000070726973657464617465718a580a000000323032352d31302d3031718b75580500000069636f6e73718c5d718d7d718e2868436844684468706846580d000000636c656f2f707269342e706e67718f68486849684a4b00684b4b02684c4b01684d684e684f68507561755809000000302e312e322e312e3371907d7191285808000000616e6e6f7461746571927d71932858080000007072696f7269747971944b05580a000000707269736574646174657195580a000000323032352d31302d3031719675580500000069636f6e7371975d71987d71992868436844684458320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67719a6846580d000000636c656f2f707269352e706e67719b68486849684a4b00684b4b02684c4b01684d684e684f6850756175752e"><vh>8. 容错保护：Resilience4j</vh>
<v t="swot.20250929155909.1"><vh>雪崩效应</vh></v>
<v t="swot.20250929172607.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3330710775735803000000302e3071087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735807000000302e302e302e30710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3230711575735807000000302e302e302e3171167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d30392d3230711c75735809000000302e302e302e322e30711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d30392d3134712375735809000000302e302e302e322e3171247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d30392d3134712a75735809000000302e302e302e322e32712b7d712c5808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4d0f27580a000000707269736574646174657130580a000000323032352d30392d3138713175735809000000302e302e302e322e3371327d7133285808000000616e6e6f7461746571347d71352858080000007072696f7269747971364b01580a000000707269736574646174657137580a000000323032352d30392d3330713875580500000069636f6e7371395d713a7d713b28580400000074797065713c580400000066696c65713d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67713e580700000072656c50617468713f580d000000636c656f2f707269312e706e677140580500000077686572657141580e0000006265666f7265486561646c696e6571425807000000796f666673657471434b005807000000786f666673657471444b0258040000007870616471454b0158020000006f6e71465805000000766e6f646571475808000000636c656f49636f6e714858010000003171497561755803000000302e31714a7d714b5808000000616e6e6f74617465714c7d714d2858080000007072696f72697479714e4d0f27580a00000070726973657464617465714f580a000000323032352d30392d3231715075735805000000302e312e3171517d71525808000000616e6e6f7461746571537d71542858080000007072696f7269747971554d0f27580a000000707269736574646174657156580a000000323032352d30392d3231715775735805000000302e312e3271587d71595808000000616e6e6f74617465715a7d715b2858080000007072696f72697479715c4d0f27580a00000070726973657464617465715d580a000000323032352d30392d3232715e75735805000000302e312e33715f7d7160285808000000616e6e6f7461746571617d71622858080000007072696f7269747971634b04580a000000707269736574646174657164580a000000323032352d31302d3031716575580500000069636f6e7371665d71677d716828683c683d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677169683f580d000000636c656f2f707269342e706e67716a6841684268434b0068444b0268454b0168466847684868497561755809000000302e322e312e302e31716b7d716c5808000000616e6e6f74617465716d7d716e2858080000007072696f72697479716f4d0f27580a000000707269736574646174657170580a000000323032352d30392d3237717175735807000000302e322e312e3171727d7173285808000000616e6e6f7461746571747d71752858080000007072696f7269747971764b03580a000000707269736574646174657177580a000000323032352d31302d3031717875580500000069636f6e7371795d717a7d717b28683c683d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67717c683f580d000000636c656f2f707269332e706e67717d6841684268434b0068444b0268454b0168466847684868497561755807000000302e322e312e32717e7d717f285808000000616e6e6f7461746571807d71812858080000007072696f7269747971824b04580a000000707269736574646174657183580a000000323032352d31302d3031718475580500000069636f6e7371855d71867d718728683c683d683d6869683f580d000000636c656f2f707269342e706e6771886841684268434b0068444b0268454b0168466847684868497561755807000000302e322e312e3371897d718a285808000000616e6e6f74617465718b7d718c2858080000007072696f72697479718d4b05580a00000070726973657464617465718e580a000000323032352d31302d3031718f75580500000069636f6e7371905d71917d719228683c683d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677193683f580d000000636c656f2f707269352e706e6771946841684268434b0068444b0268454b016846684768486849756175752e"><vh>Resilience4j 快速入门</vh>
<v t="swot.20250930135203.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735805000000302e302e3071087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3230710e75735805000000302e302e31710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3230711575735807000000302e302e322e3071167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d30392d3134711c75735807000000302e302e322e31711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d30392d3134712375735807000000302e302e322e3271247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d30392d3138712a75735807000000302e302e322e33712b7d712c285808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4b01580a000000707269736574646174657130580a000000323032352d30392d3330713175580500000069636f6e7371325d71337d7134285804000000747970657135580400000066696c657136683658320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677137580700000072656c506174687138580d000000636c656f2f707269312e706e67713958050000007768657265713a580e0000006265666f7265486561646c696e65713b5807000000796f6666736574713c4b005807000000786f6666736574713d4b02580400000078706164713e4b0158020000006f6e713f5805000000766e6f646571405808000000636c656f49636f6e71415801000000317142756175752e"><vh>file -&gt; service-order/pom.xml</vh>
<v t="swot.20250930135203.2" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3230710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3230710e75735805000000302e322e30710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3134711575735805000000302e322e3171167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d30392d3134711c75735805000000302e322e32711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d30392d3138712375735805000000302e322e3371247d7125285808000000616e6e6f7461746571267d71272858080000007072696f7269747971284b01580a000000707269736574646174657129580a000000323032352d30392d3330712a75580500000069636f6e73712b5d712c7d712d28580400000074797065712e580400000066696c65712f682f58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677130580700000072656c506174687131580d000000636c656f2f707269312e706e677132580500000077686572657133580e0000006265666f7265486561646c696e6571345807000000796f666673657471354b005807000000786f666673657471364b0258040000007870616471374b0158020000006f6e71385805000000766e6f646571395808000000636c656f49636f6e713a580100000031713b756175752e"><vh>@ignore-node project</vh>
<v t="swot.20250930135203.3" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323071077573732e"><vh>@ignore-node properties version</vh></v>
<v t="swot.20250930135203.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323071077573732e"><vh>@ignore-node Add cloud dependency</vh></v>
<v t="swot.20250930135203.5" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3134710e75735803000000302e32710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3138711575735803000000302e3371167d7117285808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4b01580a00000070726973657464617465711b580a000000323032352d30392d3330711c75580500000069636f6e73711d5d711e7d711f285804000000747970657120580400000066696c657121682158320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677122580700000072656c506174687123580d000000636c656f2f707269312e706e677124580500000077686572657125580e0000006265666f7265486561646c696e6571265807000000796f666673657471274b005807000000786f666673657471284b0258040000007870616471294b0158020000006f6e712a5805000000766e6f6465712b5808000000636c656f49636f6e712c580100000031712d756175752e"><vh>@ignore-node dependencies</vh>
<v t="swot.20250930135203.6" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node OkHttp 依赖</vh></v>
<v t="swot.20250930135203.7" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node WebClient 依赖</vh></v>
<v t="swot.20250930135203.8" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313871077573732e"><vh>@ignore-node eureka-client 依赖</vh></v>
<v t="swot.20250930135119.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3330710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>resilience4j 依赖</vh></v>
</v>
</v>
</v>
<v t="swot.20251001084921.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735803000000302e32710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3232711575735803000000302e3371167d7117285808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4b04580a00000070726973657464617465711b580a000000323032352d31302d3031711c75580500000069636f6e73711d5d711e7d711f285804000000747970657120580400000066696c657121682158320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677122580700000072656c506174687123580d000000636c656f2f707269342e706e677124580500000077686572657125580e0000006265666f7265486561646c696e6571265807000000796f666673657471274b005807000000786f666673657471284b0258040000007870616471294b0158020000006f6e712a5805000000766e6f6465712b5808000000636c656f49636f6e712c580100000031712d756175752e"><vh>file -&gt; service-order/src/main/resources/application.yml</vh>
<v t="swot.20251001084921.2"><vh>port</vh></v>
<v t="swot.20251001084921.3" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323171077573732e"><vh>name</vh></v>
<v t="swot.20251001084921.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323271077573732e"><vh>eureka</vh></v>
<v t="swot.20251001085142.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b04580a000000707269736574646174657106580a000000323032352d31302d3031710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67710d580700000072656c50617468710e580d000000636c656f2f707269342e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>resilience4j</vh></v>
</v>
<v t="swot.20251001110527.1" descendentVnodeUnknownAttributes="7d7100285807000000302e312e302e3171017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3237710775735805000000302e312e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b03580a00000070726973657464617465710d580a000000323032352d31302d3031710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677114580700000072656c506174687115580d000000636c656f2f707269332e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755805000000302e312e3271207d7121285808000000616e6e6f7461746571227d71232858080000007072696f7269747971244b04580a000000707269736574646174657125580a000000323032352d31302d3031712675580500000069636f6e7371275d71287d71292868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67712a6815580d000000636c656f2f707269342e706e67712b6817681868194b00681a4b02681b4b01681c681d681e681f7561755805000000302e312e33712c7d712d285808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304b05580a000000707269736574646174657131580a000000323032352d31302d3031713275580500000069636f6e7371335d71347d71352868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e6771366815580d000000636c656f2f707269352e706e6771376817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/OrderService.java</vh>
<v t="swot.20251001110527.2"><vh>@ignore-node import</vh></v>
<v t="swot.20251001110527.3" descendentVnodeUnknownAttributes="7d7100285805000000302e302e3171017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3237710775735803000000302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b03580a00000070726973657464617465710d580a000000323032352d31302d3031710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677114580700000072656c506174687115580d000000636c656f2f707269332e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755803000000302e3271207d7121285808000000616e6e6f7461746571227d71232858080000007072696f7269747971244b04580a000000707269736574646174657125580a000000323032352d31302d3031712675580500000069636f6e7371275d71287d71292868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67712a6815580d000000636c656f2f707269342e706e67712b6817681868194b00681a4b02681b4b01681c681d681e681f7561755803000000302e33712c7d712d285808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304b05580a000000707269736574646174657131580a000000323032352d31302d3031713275580500000069636f6e7371335d71347d71352868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e6771366815580d000000636c656f2f707269352e706e6771376817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>class OrderService</vh>
<v t="swot.20251001110527.4" descendentVnodeUnknownAttributes="7d71005803000000302e3171017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323771077573732e"><vh>@ignore-tree ORDER_DATA 模拟数据</vh>
<v t="swot.20251001110527.5"><vh>第一个订单 order</vh></v>
<v t="swot.20251001110527.6" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323771077573732e"><vh>第二个订单 order2</vh></v>
</v>
<v t="swot.20251001115941.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d31302d3031710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>Item queryItemByIdWithCircuitBreaker</vh></v>
<v t="swot.20251001083156.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b04580a000000707269736574646174657106580a000000323032352d31302d3031710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67710d580700000072656c50617468710e580d000000636c656f2f707269342e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>Item queryItemByIdFallback 断路器降级方法</vh></v>
<v t="swot.20251001110527.7" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b05580a000000707269736574646174657106580a000000323032352d31302d3031710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67710d580700000072656c50617468710e580d000000636c656f2f707269352e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>queryOrderById</vh></v>
</v>
</v>
<v t="swot.20251001091156.1"><vh>测试 Resilience4j</vh></v>
</v>
</v>
<v t="swot.20251001212305.1" descendentVnodeUnknownAttributes=""><vh>9. Feign 客户端（声明式 REST 调用）</vh>
<v t="swot.20251002084839.1"><vh>Feign 与其它客户端差异与关系</vh></v>
<v t="swot.20251002084926.1"><vh>Feign 与其它客户端在微服务架构中的使用场景</vh></v>
<v t="swot.20251002085120.1"><vh>Feign 与其它客户端代码示例对比</vh>
<v t="swot.20251003055927.1"><vh>项目中使用的 RestTemplate 方式</vh></v>
<v t="swot.20251003060826.1"><vh>项目中使用的 WebClient 方式</vh></v>
<v t="swot.20251003061811.1"><vh>项目中使用的 Feign 方式</vh></v>
</v>
<v t="swot.20251002124215.1"><vh>各自优势和适用场景总结</vh></v>
<v t="swot.20251002085138.1" descendentVnodeUnknownAttributes=""><vh>Feign 客户端入门</vh>
<v t="swot.20251005115730.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735807000000302e302e302e3071087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3230710e75735807000000302e302e302e31710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3230711575735809000000302e302e302e322e3071167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d30392d3134711c75735809000000302e302e302e322e31711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d30392d3134712375735809000000302e302e302e322e3271247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d30392d3138712a75735809000000302e302e302e322e33712b7d712c5808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4d0f27580a000000707269736574646174657130580a000000323032352d30392d3330713175735809000000302e302e302e322e3471327d7133285808000000616e6e6f7461746571347d71352858080000007072696f7269747971364b01580a000000707269736574646174657137580a000000323032352d31302d3032713875580500000069636f6e7371395d713a7d713b28580400000074797065713c580400000066696c65713d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67713e580700000072656c50617468713f580d000000636c656f2f707269312e706e677140580500000077686572657141580e0000006265666f7265486561646c696e6571425807000000796f666673657471434b005807000000786f666673657471444b0258040000007870616471454b0158020000006f6e71465805000000766e6f646571475808000000636c656f49636f6e714858010000003171497561755803000000302e31714a7d714b5808000000616e6e6f74617465714c7d714d2858080000007072696f72697479714e4d0f27580a00000070726973657464617465714f580a000000323032352d30392d3231715075735805000000302e312e3171517d7152285808000000616e6e6f7461746571537d71542858080000007072696f7269747971554b02580a000000707269736574646174657156580a000000323032352d31302d3033715775580500000069636f6e7371585d71597d715a28683c683d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67715b683f580d000000636c656f2f707269322e706e67715c6841684268434b0068444b0268454b0168466847684868497561755807000000302e312e312e30715d7d715e5808000000616e6e6f74617465715f7d71602858080000007072696f7269747971614d0f27580a000000707269736574646174657162580a000000323032352d30392d3231716375735807000000302e312e312e3171647d71655808000000616e6e6f7461746571667d71672858080000007072696f7269747971684d0f27580a000000707269736574646174657169580a000000323032352d30392d3231716a75735807000000302e312e312e32716b7d716c5808000000616e6e6f74617465716d7d716e2858080000007072696f72697479716f4d0f27580a000000707269736574646174657170580a000000323032352d30392d3139717175735803000000302e3271727d7173285808000000616e6e6f7461746571747d71752858080000007072696f7269747971764b03580a000000707269736574646174657177580a000000323032352d31302d3033717875580500000069636f6e7371795d717a7d717b28683c683d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67717c683f580d000000636c656f2f707269332e706e67717d6841684268434b0068444b0268454b0168466847684868497561755805000000302e332e31717e7d717f285808000000616e6e6f7461746571807d71812858080000007072696f7269747971824b04580a000000707269736574646174657183580a000000323032352d31302d3035718475580500000069636f6e7371855d71867d718728683c683d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677188683f580d000000636c656f2f707269342e706e6771896841684268434b0068444b0268454b0168466847684868497561755809000000302e332e312e302e31718a7d718b5808000000616e6e6f74617465718c7d718d2858080000007072696f72697479718e4d0f27580a00000070726973657464617465718f580a000000323032352d30392d3237719075735809000000302e332e312e302e3271917d7192285808000000616e6e6f7461746571937d71942858080000007072696f7269747971954b05580a000000707269736574646174657196580a000000323032352d31302d3035719775580500000069636f6e7371985d71997d719a28683c683d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67719b683f580d000000636c656f2f707269352e706e67719c6841684268434b0068444b0268454b0168466847684868497561755807000000302e332e312e31719d7d719e285808000000616e6e6f74617465719f7d71a02858080000007072696f7269747971a14b06580a0000007072697365746461746571a2580a000000323032352d31302d303571a375580500000069636f6e7371a45d71a57d71a628683c683d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e6771a7683f580d000000636c656f2f707269362e706e6771a86841684268434b0068444b0268454b0168466847684868497561755807000000302e332e312e3271a97d71aa285808000000616e6e6f7461746571ab7d71ac2858080000007072696f7269747971ad4b07580a0000007072697365746461746571ae580a000000323032352d31302d303571af75580500000069636f6e7371b05d71b17d71b228683c683d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269372e706e6771b3683f580d000000636c656f2f707269372e706e6771b46841684268434b0068444b0268454b0168466847684868497561755807000000302e332e312e3371b57d71b6285808000000616e6e6f7461746571b77d71b82858080000007072696f7269747971b94b08580a0000007072697365746461746571ba580a000000323032352d31302d303571bb75580500000069636f6e7371bc5d71bd7d71be28683c683d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269382e706e6771bf683f580d000000636c656f2f707269382e706e6771c06841684268434b0068444b0268454b0168466847684868497561755805000000302e342e3171c17d71c2285808000000616e6e6f7461746571c37d71c42858080000007072696f7269747971c54b09580a0000007072697365746461746571c6580a000000323032352d31302d303571c775580500000069636f6e7371c85d71c97d71ca28683c683d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269392e706e6771cb683f580d000000636c656f2f707269392e706e6771cc6841684268434b0068444b0268454b016846684768486849756175752e"><vh>1) 直接使用断路器 Resilience4j（纯手工）</vh>
<v t="swot.20251002073143.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735805000000302e302e3071087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3230710e75735805000000302e302e31710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3230711575735807000000302e302e322e3071167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d30392d3134711c75735807000000302e302e322e31711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d30392d3134712375735807000000302e302e322e3271247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d30392d3138712a75735807000000302e302e322e33712b7d712c5808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4d0f27580a000000707269736574646174657130580a000000323032352d30392d3330713175735807000000302e302e322e3471327d7133285808000000616e6e6f7461746571347d71352858080000007072696f7269747971364b01580a000000707269736574646174657137580a000000323032352d31302d3032713875580500000069636f6e7371395d713a7d713b28580400000074797065713c580400000066696c65713d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67713e580700000072656c50617468713f580d000000636c656f2f707269312e706e677140580500000077686572657141580e0000006265666f7265486561646c696e6571425807000000796f666673657471434b005807000000786f666673657471444b0258040000007870616471454b0158020000006f6e71465805000000766e6f646571475808000000636c656f49636f6e71485801000000317149756175752e"><vh>file -&gt; service-order/pom.xml</vh>
<v t="swot.20251002073143.2" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3230710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3230710e75735805000000302e322e30710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3134711575735805000000302e322e3171167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d30392d3134711c75735805000000302e322e32711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d30392d3138712375735805000000302e322e3371247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d30392d3330712a75735805000000302e322e34712b7d712c285808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4b01580a000000707269736574646174657130580a000000323032352d31302d3032713175580500000069636f6e7371325d71337d7134285804000000747970657135580400000066696c657136683658320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677137580700000072656c506174687138580d000000636c656f2f707269312e706e67713958050000007768657265713a580e0000006265666f7265486561646c696e65713b5807000000796f6666736574713c4b005807000000786f6666736574713d4b02580400000078706164713e4b0158020000006f6e713f5805000000766e6f646571405808000000636c656f49636f6e71415801000000317142756175752e"><vh>@ignore-node project</vh>
<v t="swot.20251002073143.3" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323071077573732e"><vh>@ignore-node properties version</vh></v>
<v t="swot.20251002073143.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323071077573732e"><vh>@ignore-node Add cloud dependency</vh></v>
<v t="swot.20251002073143.5" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3134710e75735803000000302e32710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3138711575735803000000302e3371167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d30392d3330711c75735803000000302e34711d7d711e285808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214b01580a000000707269736574646174657122580a000000323032352d31302d3032712375580500000069636f6e7371245d71257d7126285804000000747970657127580400000066696c657128682858320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677129580700000072656c50617468712a580d000000636c656f2f707269312e706e67712b58050000007768657265712c580e0000006265666f7265486561646c696e65712d5807000000796f6666736574712e4b005807000000786f6666736574712f4b0258040000007870616471304b0158020000006f6e71315805000000766e6f646571325808000000636c656f49636f6e71335801000000317134756175752e"><vh>@ignore-node dependencies</vh>
<v t="swot.20251002073143.6" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node OkHttp</vh></v>
<v t="swot.20251002073143.7" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node WebClient</vh></v>
<v t="swot.20251002073143.8" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313871077573732e"><vh>@ignore-node eureka-client</vh></v>
<v t="swot.20251002073143.9" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d333071077573732e"><vh>@ignore-node resilience4j</vh></v>
<v t="swot.20251002073248.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d31302d3032710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>openfeign</vh></v>
</v>
</v>
</v>
<v t="swot.20251003062357.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b02580a00000070726973657464617465710d580a000000323032352d31302d3033710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677114580700000072656c506174687115580d000000636c656f2f707269322e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755805000000302e312e3071207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3231712675735805000000302e312e3171277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3231712d75735805000000302e312e32712e7d712f5808000000616e6e6f7461746571307d71312858080000007072696f7269747971324d0f27580a000000707269736574646174657133580a000000323032352d30392d313971347573752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh>
<v t="swot.20251003062357.2"><vh>@ignore-node import</vh></v>
<v t="swot.20251003062357.3" descendentVnodeUnknownAttributes="7d71002858010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d31302d3033710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3071197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3231711f75735803000000302e3171207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3231712675735803000000302e3271277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3139712d7573752e"><vh>class ServiceOrderApplication -&gt; @EnableFeignClients</vh>
<v t="swot.20251003062357.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323171077573732e"><vh>@ignore-node RestTemplate</vh></v>
<v t="swot.20251003062357.5" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323171077573732e"><vh>@ignore-node OkHttpClient 不支持 @LoadBalanced</vh></v>
<v t="swot.20251003062357.6" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313971077573732e"><vh>@ignore-node WebClient</vh></v>
</v>
</v>
<v t="swot.20251003062053.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d31302d3033710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/client/ItemFeignClient.java</vh></v>
<v t="swot.20251003073646.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b04580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67710d580700000072656c50617468710e580d000000636c656f2f707269342e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755807000000302e312e302e3171197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3237711f75735807000000302e312e302e3271207d7121285808000000616e6e6f7461746571227d71232858080000007072696f7269747971244b05580a000000707269736574646174657125580a000000323032352d31302d3035712675580500000069636f6e7371275d71287d712928680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67712a680e580d000000636c656f2f707269352e706e67712b6810681168124b0068134b0268144b0168156816681768187561755805000000302e312e31712c7d712d285808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304b06580a000000707269736574646174657131580a000000323032352d31302d3035713275580500000069636f6e7371335d71347d713528680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e677136680e580d000000636c656f2f707269362e706e6771376810681168124b0068134b0268144b0168156816681768187561755805000000302e312e3271387d7139285808000000616e6e6f74617465713a7d713b2858080000007072696f72697479713c4b07580a00000070726973657464617465713d580a000000323032352d31302d3035713e75580500000069636f6e73713f5d71407d714128680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269372e706e677142680e580d000000636c656f2f707269372e706e6771436810681168124b0068134b0268144b0168156816681768187561755805000000302e312e3371447d7145285808000000616e6e6f7461746571467d71472858080000007072696f7269747971484b08580a000000707269736574646174657149580a000000323032352d31302d3035714a75580500000069636f6e73714b5d714c7d714d28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269382e706e67714e680e580d000000636c656f2f707269382e706e67714f6810681168124b0068134b0268144b016815681668176818756175752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/OrderService.java</vh>
<v t="swot.20251003073646.2"><vh>@ignore-node import</vh></v>
<v t="swot.20251003073646.3" descendentVnodeUnknownAttributes="7d71002858010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b04580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67710d580700000072656c50617468710e580d000000636c656f2f707269342e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755805000000302e302e3171197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3237711f75735805000000302e302e3271207d7121285808000000616e6e6f7461746571227d71232858080000007072696f7269747971244b05580a000000707269736574646174657125580a000000323032352d31302d3035712675580500000069636f6e7371275d71287d712928680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67712a680e580d000000636c656f2f707269352e706e67712b6810681168124b0068134b0268144b0168156816681768187561755803000000302e31712c7d712d285808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304b06580a000000707269736574646174657131580a000000323032352d31302d3035713275580500000069636f6e7371335d71347d713528680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e677136680e580d000000636c656f2f707269362e706e6771376810681168124b0068134b0268144b0168156816681768187561755803000000302e3271387d7139285808000000616e6e6f74617465713a7d713b2858080000007072696f72697479713c4b07580a00000070726973657464617465713d580a000000323032352d31302d3035713e75580500000069636f6e73713f5d71407d714128680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269372e706e677142680e580d000000636c656f2f707269372e706e6771436810681168124b0068134b0268144b0168156816681768187561755803000000302e3371447d7145285808000000616e6e6f7461746571467d71472858080000007072696f7269747971484b08580a000000707269736574646174657149580a000000323032352d31302d3035714a75580500000069636f6e73714b5d714c7d714d28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269382e706e67714e680e580d000000636c656f2f707269382e706e67714f6810681168124b0068134b0268144b016815681668176818756175752e"><vh>class OrderService</vh>
<v t="swot.20251003073646.4" descendentVnodeUnknownAttributes="7d7100285803000000302e3171017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3237710775735803000000302e3271087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b05580a00000070726973657464617465710d580a000000323032352d31302d3035710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677114580700000072656c506174687115580d000000636c656f2f707269352e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>@ignore-node  ORDER_DATA 模拟数据</vh>
<v t="swot.20251003073646.5"><vh>@ignore-node 第一个订单 order</vh></v>
<v t="swot.20251003073646.6" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323771077573732e"><vh>@ignore-node 第二个订单 order2</vh></v>
<v t="swot.20251005120000.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b05580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67710d580700000072656c50617468710e580d000000636c656f2f707269352e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>第三个订单 order3 -- item5.setId(-1L) 设为 -1 ItemController.java 会抛出异常</vh></v>
</v>
<v t="swot.20251003073646.7" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b06580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e67710d580700000072656c50617468710e580d000000636c656f2f707269362e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>Item queryItemByIdWithCircuitBreaker</vh></v>
<v t="swot.20251003073646.8" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b07580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269372e706e67710d580700000072656c50617468710e580d000000636c656f2f707269372e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>Item queryItemByIdFallback 断路器降级方法</vh></v>
<v t="swot.20251003073646.9" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b08580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269382e706e67710d580700000072656c50617468710e580d000000636c656f2f707269382e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>Order queryOrderById</vh></v>
</v>
</v>
<v t="swot.20251005112102.1" descendentVnodeUnknownAttributes="7d71005803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b09580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269392e706e67710d580700000072656c50617468710e580d000000636c656f2f707269392e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-item/src/main/java/com/tjise/serviceitem/controller/ItemController.java</vh>
<v t="swot.20251005112253.1"><vh>@ignore-node import</vh></v>
<v t="swot.20251005112340.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b09580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269392e706e67710d580700000072656c50617468710e580d000000636c656f2f707269392e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>public class ItemController -- New Added 当 ID 为 -1 时抛出异常</vh></v>
</v>
</v>
<v t="swot.20251005124609.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735807000000302e302e302e3071087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3230710e75735807000000302e302e302e31710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3230711575735809000000302e302e302e322e3071167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d30392d3134711c75735809000000302e302e302e322e31711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d30392d3134712375735809000000302e302e302e322e3271247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d30392d3138712a75735809000000302e302e302e322e33712b7d712c5808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4d0f27580a000000707269736574646174657130580a000000323032352d31302d3032713175735809000000302e302e302e322e3471327d71335808000000616e6e6f7461746571347d71352858080000007072696f7269747971364d0f27580a000000707269736574646174657137580a000000323032352d30392d3330713875735809000000302e302e302e322e3571397d713a285808000000616e6e6f74617465713b7d713c2858080000007072696f72697479713d4b01580a00000070726973657464617465713e580a000000323032352d31302d3035713f75580500000069636f6e7371405d71417d7142285804000000747970657143580400000066696c657144684458320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677145580700000072656c506174687146580d000000636c656f2f707269312e706e677147580500000077686572657148580e0000006265666f7265486561646c696e6571495807000000796f6666736574714a4b005807000000786f6666736574714b4b02580400000078706164714c4b0158020000006f6e714d5805000000766e6f6465714e5808000000636c656f49636f6e714f58010000003171507561755805000000302e312e3171517d7152285808000000616e6e6f7461746571537d71542858080000007072696f7269747971554b02580a000000707269736574646174657156580a000000323032352d31302d3035715775580500000069636f6e7371585d71597d715a2868436844684458320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67715b6846580d000000636c656f2f707269322e706e67715c68486849684a4b00684b4b02684c4b01684d684e684f68507561755809000000302e312e312e302e31715d7d715e5808000000616e6e6f74617465715f7d71602858080000007072696f7269747971614d0f27580a000000707269736574646174657162580a000000323032352d30392d3237716375735809000000302e312e312e302e3271647d7165285808000000616e6e6f7461746571667d71672858080000007072696f7269747971684b05580a000000707269736574646174657169580a000000323032352d31302d3035716a75580500000069636f6e73716b5d716c7d716d2868436844684458320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67716e6846580d000000636c656f2f707269352e706e67716f68486849684a4b00684b4b02684c4b01684d684e684f68507561755807000000302e312e312e3171707d7171285808000000616e6e6f7461746571727d71732858080000007072696f7269747971744b03580a000000707269736574646174657175580a000000323032352d31302d3035717675580500000069636f6e7371775d71787d71792868436844684458320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67717a6846580d000000636c656f2f707269332e706e67717b68486849684a4b00684b4b02684c4b01684d684e684f68507561755807000000302e312e312e32717c7d717d5808000000616e6e6f74617465717e7d717f2858080000007072696f7269747971804d0f27580a000000707269736574646174657181580a000000323032352d31302d3035718275735807000000302e312e312e3371837d71845808000000616e6e6f7461746571857d71862858080000007072696f7269747971874d0f27580a000000707269736574646174657188580a000000323032352d31302d303571897573752e"><vh>2) 使用自带断路器 Resilience4j（SpringCloud 自带，在服务层更细粒度控制）</vh>
<v t="swot.20251005124609.2" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735805000000302e302e3071087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3230710e75735805000000302e302e31710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3230711575735807000000302e302e322e3071167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d30392d3134711c75735807000000302e302e322e31711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d30392d3134712375735807000000302e302e322e3271247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d30392d3138712a75735807000000302e302e322e33712b7d712c5808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4d0f27580a000000707269736574646174657130580a000000323032352d31302d3032713175735807000000302e302e322e3471327d71335808000000616e6e6f7461746571347d71352858080000007072696f7269747971364d0f27580a000000707269736574646174657137580a000000323032352d30392d3330713875735807000000302e302e322e3571397d713a285808000000616e6e6f74617465713b7d713c2858080000007072696f72697479713d4b01580a00000070726973657464617465713e580a000000323032352d31302d3035713f75580500000069636f6e7371405d71417d7142285804000000747970657143580400000066696c657144684458320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677145580700000072656c506174687146580d000000636c656f2f707269312e706e677147580500000077686572657148580e0000006265666f7265486561646c696e6571495807000000796f6666736574714a4b005807000000786f6666736574714b4b02580400000078706164714c4b0158020000006f6e714d5805000000766e6f6465714e5808000000636c656f49636f6e714f5801000000317150756175752e"><vh>file -&gt; service-order/pom.xml</vh>
<v t="swot.20251005124609.3" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3230710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3230710e75735805000000302e322e30710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3134711575735805000000302e322e3171167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d30392d3134711c75735805000000302e322e32711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d30392d3138712375735805000000302e322e3371247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d31302d3032712a75735805000000302e322e34712b7d712c5808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4d0f27580a000000707269736574646174657130580a000000323032352d30392d3330713175735805000000302e322e3571327d7133285808000000616e6e6f7461746571347d71352858080000007072696f7269747971364b01580a000000707269736574646174657137580a000000323032352d31302d3035713875580500000069636f6e7371395d713a7d713b28580400000074797065713c580400000066696c65713d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67713e580700000072656c50617468713f580d000000636c656f2f707269312e706e677140580500000077686572657141580e0000006265666f7265486561646c696e6571425807000000796f666673657471434b005807000000786f666673657471444b0258040000007870616471454b0158020000006f6e71465805000000766e6f646571475808000000636c656f49636f6e71485801000000317149756175752e"><vh>@ignore-node project</vh>
<v t="swot.20251005124609.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323071077573732e"><vh>@ignore-node properties version</vh></v>
<v t="swot.20251005124609.5" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323071077573732e"><vh>@ignore-node Add cloud dependency</vh></v>
<v t="swot.20251005124609.6" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3134710e75735803000000302e32710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3138711575735803000000302e3371167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d31302d3032711c75735803000000302e34711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d30392d3330712375735803000000302e3571247d7125285808000000616e6e6f7461746571267d71272858080000007072696f7269747971284b01580a000000707269736574646174657129580a000000323032352d31302d3035712a75580500000069636f6e73712b5d712c7d712d28580400000074797065712e580400000066696c65712f682f58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677130580700000072656c506174687131580d000000636c656f2f707269312e706e677132580500000077686572657133580e0000006265666f7265486561646c696e6571345807000000796f666673657471354b005807000000786f666673657471364b0258040000007870616471374b0158020000006f6e71385805000000766e6f646571395808000000636c656f49636f6e713a580100000031713b756175752e"><vh>@ignore-node dependencies</vh>
<v t="swot.20251005124609.7" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node OkHttp</vh></v>
<v t="swot.20251005124609.8" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node WebClient</vh></v>
<v t="swot.20251005124609.9" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313871077573732e"><vh>@ignore-node eureka-client</vh></v>
<v t="swot.20251005124609.11" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d303271077573732e"><vh>@ignore-node openfeign</vh></v>
<v t="swot.20251005124609.10" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d333071077573732e"><vh>resilience4j 注释掉不用</vh></v>
<v t="swot.20251005125852.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>spring-cloud-...resilience4j</vh></v>
</v>
</v>
</v>
<v t="swot.20251005124609.19" descendentVnodeUnknownAttributes="7d7100285803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755807000000302e312e302e3171197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3237711f75735807000000302e312e302e3271207d7121285808000000616e6e6f7461746571227d71232858080000007072696f7269747971244b05580a000000707269736574646174657125580a000000323032352d31302d3035712675580500000069636f6e7371275d71287d712928680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67712a680e580d000000636c656f2f707269352e706e67712b6810681168124b0068134b0268144b0168156816681768187561755805000000302e312e31712c7d712d285808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304b03580a000000707269736574646174657131580a000000323032352d31302d3035713275580500000069636f6e7371335d71347d713528680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677136680e580d000000636c656f2f707269332e706e6771376810681168124b0068134b0268144b0168156816681768187561755805000000302e312e3271387d71395808000000616e6e6f74617465713a7d713b2858080000007072696f72697479713c4d0f27580a00000070726973657464617465713d580a000000323032352d31302d3035713e75735805000000302e312e33713f7d71405808000000616e6e6f7461746571417d71422858080000007072696f7269747971434d0f27580a000000707269736574646174657144580a000000323032352d31302d303571457573752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/OrderService.java</vh>
<v t="swot.20251005124609.20"><vh>@ignore-node import</vh></v>
<v t="swot.20251005124609.21" descendentVnodeUnknownAttributes="7d71002858010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755805000000302e302e3171197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3237711f75735805000000302e302e3271207d7121285808000000616e6e6f7461746571227d71232858080000007072696f7269747971244b05580a000000707269736574646174657125580a000000323032352d31302d3035712675580500000069636f6e7371275d71287d712928680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67712a680e580d000000636c656f2f707269352e706e67712b6810681168124b0068134b0268144b0168156816681768187561755803000000302e31712c7d712d285808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304b03580a000000707269736574646174657131580a000000323032352d31302d3035713275580500000069636f6e7371335d71347d713528680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677136680e580d000000636c656f2f707269332e706e6771376810681168124b0068134b0268144b0168156816681768187561755803000000302e3271387d71395808000000616e6e6f74617465713a7d713b2858080000007072696f72697479713c4d0f27580a00000070726973657464617465713d580a000000323032352d31302d3035713e75735803000000302e33713f7d71405808000000616e6e6f7461746571417d71422858080000007072696f7269747971434d0f27580a000000707269736574646174657144580a000000323032352d31302d303571457573752e"><vh>class OrderService</vh>
<v t="swot.20251005124609.22" descendentVnodeUnknownAttributes="7d7100285803000000302e3171017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3237710775735803000000302e3271087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b05580a00000070726973657464617465710d580a000000323032352d31302d3035710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677114580700000072656c506174687115580d000000636c656f2f707269352e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>@ignore-node  ORDER_DATA 模拟数据</vh>
<v t="swot.20251005124609.23"><vh>@ignore-node 第一个订单 order</vh></v>
<v t="swot.20251005124609.24" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323771077573732e"><vh>@ignore-node 第二个订单 order2</vh></v>
<v t="swot.20251005124609.25" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b05580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67710d580700000072656c50617468710e580d000000636c656f2f707269352e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>第三个订单 order3 -- item5.setId(-1L) 设为 -1 ItemController.java 会抛出异常</vh></v>
</v>
<v t="swot.20251005124609.26" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>Item queryItemByIdWithCircuitBreaker -- 主要更改的代码</vh></v>
<v t="swot.20251005124609.27" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d303571077573732e"><vh>Item queryItemByIdFallback 断路器降级方法</vh></v>
<v t="swot.20251005124609.28" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d303571077573732e"><vh>Order queryOrderById</vh></v>
</v>
</v>
</v>
<v t="swot.20251005171445.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735807000000302e302e302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735807000000302e302e302e32710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3232711575735805000000302e302e3171167d7117285808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4b01580a00000070726973657464617465711b580a000000323032352d31302d3035711c75580500000069636f6e73711d5d711e7d711f285804000000747970657120580400000066696c657121682158320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677122580700000072656c506174687123580d000000636c656f2f707269312e706e677124580500000077686572657125580e0000006265666f7265486561646c696e6571265807000000796f666673657471274b005807000000786f666673657471284b0258040000007870616471294b0158020000006f6e712a5805000000766e6f6465712b5808000000636c656f49636f6e712c580100000031712d7561755805000000302e302e32712e7d712f285808000000616e6e6f7461746571307d71312858080000007072696f7269747971324b02580a000000707269736574646174657133580a000000323032352d31302d3035713475580500000069636f6e7371355d71367d71372868206821682158320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e6771386823580d000000636c656f2f707269322e706e6771396825682668274b0068284b0268294b01682a682b682c682d7561755803000000302e31713a7d713b285808000000616e6e6f74617465713c7d713d2858080000007072696f72697479713e4b03580a00000070726973657464617465713f580a000000323032352d31302d3033714075580500000069636f6e7371415d71427d71432868206821682158320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e6771446823580d000000636c656f2f707269332e706e6771456825682668274b0068284b0268294b01682a682b682c682d7561755803000000302e3271467d7147285808000000616e6e6f7461746571487d71492858080000007072696f72697479714a4b04580a00000070726973657464617465714b580a000000323032352d31302d3035714c75580500000069636f6e73714d5d714e7d714f2868206821682158320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e6771506823580d000000636c656f2f707269342e706e6771516825682668274b0068284b0268294b01682a682b682c682d7561755805000000302e332e3171527d71535808000000616e6e6f7461746571547d71552858080000007072696f7269747971564d0f27580a000000707269736574646174657157580a000000323032352d31302d3035715875735809000000302e332e312e302e3171597d715a5808000000616e6e6f74617465715b7d715c2858080000007072696f72697479715d4d0f27580a00000070726973657464617465715e580a000000323032352d30392d3237715f75735809000000302e332e312e302e3271607d7161285808000000616e6e6f7461746571627d71632858080000007072696f7269747971644b05580a000000707269736574646174657165580a000000323032352d31302d3035716675580500000069636f6e7371675d71687d71692868206821682158320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67716a6823580d000000636c656f2f707269352e706e67716b6825682668274b0068284b0268294b01682a682b682c682d7561755807000000302e332e312e31716c7d716d285808000000616e6e6f74617465716e7d716f2858080000007072696f7269747971704b06580a000000707269736574646174657171580a000000323032352d31302d3035717275580500000069636f6e7371735d71747d71752868206821682158320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e6771766823580d000000636c656f2f707269362e706e6771776825682668274b0068284b0268294b01682a682b682c682d7561755807000000302e332e312e3271787d7179285808000000616e6e6f74617465717a7d717b2858080000007072696f72697479717c4b15580a00000070726973657464617465717d580a000000323032352d31302d3035717e75580500000069636f6e73717f5d71807d71812868206821682158240000002f55736572732f73776f742f2e6c656f2f49636f6e732f636c656f2f78626c6b2e706e6771826823580d000000636c656f2f78626c6b2e706e6771836825682668274b0068284b0268294b01682a682b682c682d7561755807000000302e332e312e3371847d71855808000000616e6e6f7461746571867d71872858080000007072696f7269747971884d0f27580a000000707269736574646174657189580a000000323032352d31302d3035718a7573752e"><vh>3) 使用自带断路器 Feign（Feign 集成 SpringCloud 自带的断路器 Resilience4j，不需要在服务层手动管理断路器）</vh>
<v t="swot.20251005172726.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735805000000302e302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735805000000302e302e32710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3232711575735803000000302e3171167d7117285808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4b01580a00000070726973657464617465711b580a000000323032352d31302d3035711c75580500000069636f6e73711d5d711e7d711f285804000000747970657120580400000066696c657121682158320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677122580700000072656c506174687123580d000000636c656f2f707269312e706e677124580500000077686572657125580e0000006265666f7265486561646c696e6571265807000000796f666673657471274b005807000000786f666673657471284b0258040000007870616471294b0158020000006f6e712a5805000000766e6f6465712b5808000000636c656f49636f6e712c580100000031712d7561755803000000302e32712e7d712f285808000000616e6e6f7461746571307d71312858080000007072696f7269747971324b02580a000000707269736574646174657133580a000000323032352d31302d3035713475580500000069636f6e7371355d71367d71372868206821682158320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e6771386823580d000000636c656f2f707269322e706e6771396825682668274b0068284b0268294b01682a682b682c682d756175752e"><vh>file -&gt; service-order/src/main/resources/application.yml</vh>
<v t="swot.20251005172837.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3171017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3271087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3232710e7573752e"><vh>@ignore-tree </vh>
<v t="swot.20251005172726.2"><vh>port</vh></v>
<v t="swot.20251005172726.3" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323171077573732e"><vh>spring</vh></v>
<v t="swot.20251005172726.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323271077573732e"><vh>eureka</vh></v>
</v>
<v t="swot.20251005172845.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>feign 开启断路器</vh></v>
<v t="swot.20251005172726.5" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>resilience4j 要改 OrderService -&gt; app-item</vh></v>
</v>
<v t="swot.20251005174444.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d31302d3033710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/client/ItemFeignClient.java</vh></v>
<v t="swot.20251005174728.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b04580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67710d580700000072656c50617468710e580d000000636c656f2f707269342e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/client/ItemFallback.java</vh></v>
<v t="swot.20251005174948.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3171017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d3035710775735807000000302e312e302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3237710e75735807000000302e312e302e32710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b05580a000000707269736574646174657114580a000000323032352d31302d3035711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67711b580700000072656c50617468711c580d000000636c656f2f707269352e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e712558010000003171267561755805000000302e312e3171277d7128285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4b06580a00000070726973657464617465712c580a000000323032352d31302d3035712d75580500000069636f6e73712e5d712f7d7130286819681a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e677131681c580d000000636c656f2f707269362e706e677132681e681f68204b0068214b0268224b0168236824682568267561755805000000302e312e3271337d7134285808000000616e6e6f7461746571357d71362858080000007072696f7269747971374b15580a000000707269736574646174657138580a000000323032352d31302d3035713975580500000069636f6e73713a5d713b7d713c286819681a681a58240000002f55736572732f73776f742f2e6c656f2f49636f6e732f636c656f2f78626c6b2e706e67713d681c580d000000636c656f2f78626c6b2e706e67713e681e681f68204b0068214b0268224b0168236824682568267561755805000000302e312e33713f7d71405808000000616e6e6f7461746571417d71422858080000007072696f7269747971434d0f27580a000000707269736574646174657144580a000000323032352d31302d303571457573752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/OrderService.java</vh>
<v t="swot.20251005174948.2"><vh>@ignore-node import</vh></v>
<v t="swot.20251005174948.3" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d3035710775735805000000302e302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3237710e75735805000000302e302e32710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b05580a000000707269736574646174657114580a000000323032352d31302d3035711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67711b580700000072656c50617468711c580d000000636c656f2f707269352e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e712558010000003171267561755803000000302e3171277d7128285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4b06580a00000070726973657464617465712c580a000000323032352d31302d3035712d75580500000069636f6e73712e5d712f7d7130286819681a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e677131681c580d000000636c656f2f707269362e706e677132681e681f68204b0068214b0268224b0168236824682568267561755803000000302e3271337d7134285808000000616e6e6f7461746571357d71362858080000007072696f7269747971374b15580a000000707269736574646174657138580a000000323032352d31302d3035713975580500000069636f6e73713a5d713b7d713c286819681a681a58240000002f55736572732f73776f742f2e6c656f2f49636f6e732f636c656f2f78626c6b2e706e67713d681c580d000000636c656f2f78626c6b2e706e67713e681e681f68204b0068214b0268224b0168236824682568267561755803000000302e33713f7d71405808000000616e6e6f7461746571417d71422858080000007072696f7269747971434d0f27580a000000707269736574646174657144580a000000323032352d31302d303571457573752e"><vh>class OrderService</vh>
<v t="swot.20251005174948.4" descendentVnodeUnknownAttributes="7d7100285803000000302e3171017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3237710775735803000000302e3271087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b05580a00000070726973657464617465710d580a000000323032352d31302d3035710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677114580700000072656c506174687115580d000000636c656f2f707269352e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>@ignore-node  ORDER_DATA 模拟数据</vh>
<v t="swot.20251005174948.5"><vh>@ignore-node 第一个订单 order</vh></v>
<v t="swot.20251005174948.6" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323771077573732e"><vh>@ignore-node 第二个订单 order2</vh></v>
<v t="swot.20251005174948.7" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b05580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67710d580700000072656c50617468710e580d000000636c656f2f707269352e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>第三个订单 order3 -- item3.setId(-1L) 设为 -1 ItemController.java 会抛出异常</vh></v>
</v>
<v t="swot.20251005174948.8" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b06580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e67710d580700000072656c50617468710e580d000000636c656f2f707269362e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>Item queryItemByIdWithCircuitBreaker -- 主要更改的代码</vh></v>
<v t="swot.20251005174948.9" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b15580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58240000002f55736572732f73776f742f2e6c656f2f49636f6e732f636c656f2f78626c6b2e706e67710d580700000072656c50617468710e580d000000636c656f2f78626c6b2e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>Item queryItemByIdFallback 断路器降级方法 -- 没用了，可以删除了</vh></v>
<v t="swot.20251005174948.10" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d303571077573732e"><vh>Order queryOrderById</vh></v>
</v>
</v>
</v>
<v t="swot.20251005182851.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735807000000302e302e302e3071087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3230710e75735807000000302e302e302e31710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3230711575735809000000302e302e302e322e3071167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d30392d3134711c75735809000000302e302e302e322e31711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d30392d3134712375735809000000302e302e302e322e3271247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d30392d3138712a75735809000000302e302e302e322e33712b7d712c5808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4d0f27580a000000707269736574646174657130580a000000323032352d31302d3032713175735809000000302e302e302e322e3471327d71335808000000616e6e6f7461746571347d71352858080000007072696f7269747971364d0f27580a000000707269736574646174657137580a000000323032352d30392d3330713875735809000000302e302e302e322e3571397d713a5808000000616e6e6f74617465713b7d713c2858080000007072696f72697479713d4d0f27580a00000070726973657464617465713e580a000000323032352d31302d3035713f75735809000000302e302e302e322e3671407d7141285808000000616e6e6f7461746571427d71432858080000007072696f7269747971444b01580a000000707269736574646174657145580a000000323032352d31302d3035714675580500000069636f6e7371475d71487d714928580400000074797065714a580400000066696c65714b684b58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67714c580700000072656c50617468714d580d000000636c656f2f707269312e706e67714e58050000007768657265714f580e0000006265666f7265486561646c696e6571505807000000796f666673657471514b005807000000786f666673657471524b0258040000007870616471534b0158020000006f6e71545805000000766e6f646571555808000000636c656f49636f6e715658010000003171577561755803000000302e3171587d71595808000000616e6e6f74617465715a7d715b2858080000007072696f72697479715c4d0f27580a00000070726973657464617465715d580a000000323032352d30392d3231715e75735807000000302e312e302e31715f7d71605808000000616e6e6f7461746571617d71622858080000007072696f7269747971634d0f27580a000000707269736574646174657164580a000000323032352d30392d3231716575735807000000302e312e302e3271667d71675808000000616e6e6f7461746571687d71692858080000007072696f72697479716a4d0f27580a00000070726973657464617465716b580a000000323032352d30392d3232716c75735807000000302e312e302e33716d7d716e5808000000616e6e6f74617465716f7d71702858080000007072696f7269747971714d0f27580a000000707269736574646174657172580a000000323032352d31302d3035717375735807000000302e312e302e3471747d7175285808000000616e6e6f7461746571767d71772858080000007072696f7269747971784b02580a000000707269736574646174657179580a000000323032352d31302d3035717a75580500000069636f6e73717b5d717c7d717d28684a684b684b58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67717e684d580d000000636c656f2f707269322e706e67717f684f685068514b0068524b0268534b0168546855685668577561755805000000302e312e3171807d7181285808000000616e6e6f7461746571827d71832858080000007072696f7269747971844b03580a000000707269736574646174657185580a000000323032352d31302d3035718675580500000069636f6e7371875d71887d718928684a684b684b58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67718a684d580d000000636c656f2f707269332e706e67718b684f685068514b0068524b0268534b0168546855685668577561755805000000302e322e31718c7d718d5808000000616e6e6f74617465718e7d718f2858080000007072696f7269747971904d0f27580a000000707269736574646174657191580a000000323032352d31302d3035719275735809000000302e322e312e302e3171937d71945808000000616e6e6f7461746571957d71962858080000007072696f7269747971974d0f27580a000000707269736574646174657198580a000000323032352d30392d3237719975735809000000302e322e312e302e32719a7d719b5808000000616e6e6f74617465719c7d719d2858080000007072696f72697479719e4d0f27580a00000070726973657464617465719f580a000000323032352d31302d303571a075735809000000302e322e312e302e3371a17d71a2285808000000616e6e6f7461746571a37d71a42858080000007072696f7269747971a54b04580a0000007072697365746461746571a6580a000000323032352d31302d303571a775580500000069636f6e7371a85d71a97d71aa28684a684b684b58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e6771ab684d580d000000636c656f2f707269342e706e6771ac684f685068514b0068524b0268534b0168546855685668577561755807000000302e322e312e3171ad7d71ae5808000000616e6e6f7461746571af7d71b02858080000007072696f7269747971b14d0f27580a0000007072697365746461746571b2580a000000323032352d31302d303571b375735807000000302e322e312e3271b47d71b55808000000616e6e6f7461746571b67d71b72858080000007072696f7269747971b84d0f27580a0000007072697365746461746571b9580a000000323032352d31302d303571ba7573752e"><vh>开启 Spring Boot Actuator 查看断路器状态</vh>
<v t="swot.20251005191938.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735805000000302e302e3071087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3230710e75735805000000302e302e31710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3230711575735807000000302e302e322e3071167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d30392d3134711c75735807000000302e302e322e31711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d30392d3134712375735807000000302e302e322e3271247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d30392d3138712a75735807000000302e302e322e33712b7d712c5808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4d0f27580a000000707269736574646174657130580a000000323032352d31302d3032713175735807000000302e302e322e3471327d71335808000000616e6e6f7461746571347d71352858080000007072696f7269747971364d0f27580a000000707269736574646174657137580a000000323032352d30392d3330713875735807000000302e302e322e3571397d713a5808000000616e6e6f74617465713b7d713c2858080000007072696f72697479713d4d0f27580a00000070726973657464617465713e580a000000323032352d31302d3035713f75735807000000302e302e322e3671407d7141285808000000616e6e6f7461746571427d71432858080000007072696f7269747971444b01580a000000707269736574646174657145580a000000323032352d31302d3035714675580500000069636f6e7371475d71487d714928580400000074797065714a580400000066696c65714b684b58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67714c580700000072656c50617468714d580d000000636c656f2f707269312e706e67714e58050000007768657265714f580e0000006265666f7265486561646c696e6571505807000000796f666673657471514b005807000000786f666673657471524b0258040000007870616471534b0158020000006f6e71545805000000766e6f646571555808000000636c656f49636f6e71565801000000317157756175752e"><vh>file -&gt; service-order/pom.xml</vh>
<v t="swot.20251005191938.2" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3230710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3230710e75735805000000302e322e30710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3134711575735805000000302e322e3171167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d30392d3134711c75735805000000302e322e32711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d30392d3138712375735805000000302e322e3371247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d31302d3032712a75735805000000302e322e34712b7d712c5808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4d0f27580a000000707269736574646174657130580a000000323032352d30392d3330713175735805000000302e322e3571327d71335808000000616e6e6f7461746571347d71352858080000007072696f7269747971364d0f27580a000000707269736574646174657137580a000000323032352d31302d3035713875735805000000302e322e3671397d713a285808000000616e6e6f74617465713b7d713c2858080000007072696f72697479713d4b01580a00000070726973657464617465713e580a000000323032352d31302d3035713f75580500000069636f6e7371405d71417d7142285804000000747970657143580400000066696c657144684458320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677145580700000072656c506174687146580d000000636c656f2f707269312e706e677147580500000077686572657148580e0000006265666f7265486561646c696e6571495807000000796f6666736574714a4b005807000000786f6666736574714b4b02580400000078706164714c4b0158020000006f6e714d5805000000766e6f6465714e5808000000636c656f49636f6e714f5801000000317150756175752e"><vh>@ignore-node project</vh>
<v t="swot.20251005191938.3" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323071077573732e"><vh>@ignore-node properties version</vh></v>
<v t="swot.20251005191938.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323071077573732e"><vh>@ignore-node Add cloud dependency</vh></v>
<v t="swot.20251005191938.5" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3134710e75735803000000302e32710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3138711575735803000000302e3371167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d31302d3032711c75735803000000302e34711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d30392d3330712375735803000000302e3571247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d31302d3035712a75735803000000302e36712b7d712c285808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4b01580a000000707269736574646174657130580a000000323032352d31302d3035713175580500000069636f6e7371325d71337d7134285804000000747970657135580400000066696c657136683658320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677137580700000072656c506174687138580d000000636c656f2f707269312e706e67713958050000007768657265713a580e0000006265666f7265486561646c696e65713b5807000000796f6666736574713c4b005807000000786f6666736574713d4b02580400000078706164713e4b0158020000006f6e713f5805000000766e6f646571405808000000636c656f49636f6e71415801000000317142756175752e"><vh>@ignore-node dependencies</vh>
<v t="swot.20251005191938.6" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node OkHttp</vh></v>
<v t="swot.20251005191938.7" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node WebClient</vh></v>
<v t="swot.20251005191938.8" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313871077573732e"><vh>@ignore-node eureka-client</vh></v>
<v t="swot.20251005191938.9" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d303271077573732e"><vh>@ignore-node openfeign</vh></v>
<v t="swot.20251005191938.10" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d333071077573732e"><vh>@ignore-node resilience4j 注释掉不用</vh></v>
<v t="swot.20251005191938.11" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d303571077573732e"><vh>@ignore-node spring-cloud-...resilience4j</vh></v>
<v t="swot.20251005192140.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>actuator</vh></v>
</v>
</v>
</v>
<v t="swot.20251005190244.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735805000000302e302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735805000000302e302e32710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3232711575735805000000302e302e3371167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d31302d3035711c75735805000000302e302e34711d7d711e285808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214b02580a000000707269736574646174657122580a000000323032352d31302d3035712375580500000069636f6e7371245d71257d7126285804000000747970657127580400000066696c657128682858320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677129580700000072656c50617468712a580d000000636c656f2f707269322e706e67712b58050000007768657265712c580e0000006265666f7265486561646c696e65712d5807000000796f6666736574712e4b005807000000786f6666736574712f4b0258040000007870616471304b0158020000006f6e71315805000000766e6f646571325808000000636c656f49636f6e713358010000003171347561755803000000302e3171357d7136285808000000616e6e6f7461746571377d71382858080000007072696f7269747971394b03580a00000070726973657464617465713a580a000000323032352d31302d3035713b75580500000069636f6e73713c5d713d7d713e2868276828682858320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67713f682a580d000000636c656f2f707269332e706e677140682c682d682e4b00682f4b0268304b016831683268336834756175752e"><vh>file -&gt; service-order/src/main/resources/application.yml</vh>
<v t="swot.20251005190244.2" descendentVnodeUnknownAttributes="7d7100285803000000302e3171017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3271087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3232710e75735803000000302e33710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d31302d3035711575735803000000302e3471167d7117285808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4b02580a00000070726973657464617465711b580a000000323032352d31302d3035711c75580500000069636f6e73711d5d711e7d711f285804000000747970657120580400000066696c657121682158320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677122580700000072656c506174687123580d000000636c656f2f707269322e706e677124580500000077686572657125580e0000006265666f7265486561646c696e6571265807000000796f666673657471274b005807000000786f666673657471284b0258040000007870616471294b0158020000006f6e712a5805000000766e6f6465712b5808000000636c656f49636f6e712c580100000031712d756175752e"><vh>@ignore-tree </vh>
<v t="swot.20251005190244.3"><vh>port</vh></v>
<v t="swot.20251005190244.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323171077573732e"><vh>spring</vh></v>
<v t="swot.20251005190244.5" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323271077573732e"><vh>eureka</vh></v>
<v t="swot.20251005190244.6" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d303571077573732e"><vh>feign 开启断路器</vh></v>
<v t="swot.20251005190244.7" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>resilience4j -- 修改成 configs: default</vh></v>
</v>
<v t="swot.20251005192527.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>management</vh></v>
</v>
<v t="swot.20251005215932.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3171017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d3035710775735807000000302e312e302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3237710e75735807000000302e312e302e32710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d31302d3035711575735807000000302e312e302e3371167d7117285808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4b04580a00000070726973657464617465711b580a000000323032352d31302d3035711c75580500000069636f6e73711d5d711e7d711f285804000000747970657120580400000066696c657121682158320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677122580700000072656c506174687123580d000000636c656f2f707269342e706e677124580500000077686572657125580e0000006265666f7265486561646c696e6571265807000000796f666673657471274b005807000000786f666673657471284b0258040000007870616471294b0158020000006f6e712a5805000000766e6f6465712b5808000000636c656f49636f6e712c580100000031712d7561755805000000302e312e31712e7d712f5808000000616e6e6f7461746571307d71312858080000007072696f7269747971324d0f27580a000000707269736574646174657133580a000000323032352d31302d3035713475735805000000302e312e3271357d71365808000000616e6e6f7461746571377d71382858080000007072696f7269747971394d0f27580a00000070726973657464617465713a580a000000323032352d31302d3035713b7573752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/OrderService.java</vh>
<v t="swot.20251005215932.2"><vh>@ignore-node import</vh></v>
<v t="swot.20251005215932.3" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d3035710775735805000000302e302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3237710e75735805000000302e302e32710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d31302d3035711575735805000000302e302e3371167d7117285808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4b04580a00000070726973657464617465711b580a000000323032352d31302d3035711c75580500000069636f6e73711d5d711e7d711f285804000000747970657120580400000066696c657121682158320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677122580700000072656c506174687123580d000000636c656f2f707269342e706e677124580500000077686572657125580e0000006265666f7265486561646c696e6571265807000000796f666673657471274b005807000000786f666673657471284b0258040000007870616471294b0158020000006f6e712a5805000000766e6f6465712b5808000000636c656f49636f6e712c580100000031712d7561755803000000302e31712e7d712f5808000000616e6e6f7461746571307d71312858080000007072696f7269747971324d0f27580a000000707269736574646174657133580a000000323032352d31302d3035713475735803000000302e3271357d71365808000000616e6e6f7461746571377d71382858080000007072696f7269747971394d0f27580a00000070726973657464617465713a580a000000323032352d31302d3035713b7573752e"><vh>class OrderService</vh>
<v t="swot.20251005215932.4" descendentVnodeUnknownAttributes="7d7100285803000000302e3171017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3237710775735803000000302e3271087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d31302d3035710e75735803000000302e33710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b04580a000000707269736574646174657114580a000000323032352d31302d3035711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67711b580700000072656c50617468711c580d000000636c656f2f707269342e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e71255801000000317126756175752e"><vh>@ignore-node  ORDER_DATA 模拟数据</vh>
<v t="swot.20251005215932.5"><vh>@ignore-node 第一个订单 order</vh></v>
<v t="swot.20251005215932.6" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323771077573732e"><vh>@ignore-node 第二个订单 order2</vh></v>
<v t="swot.20251005215932.7" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d303571077573732e"><vh>@ignore-node 第三个订单 order3 -- item3.setId(-1L) 设为 -1 ItemController.java 会抛出异常</vh></v>
<v t="swot.20251005220026.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b04580a000000707269736574646174657106580a000000323032352d31302d3035710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67710d580700000072656c50617468710e580d000000636c656f2f707269342e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>第四个订单 order4 -- item4.setId(-1L) 设为 -1 ItemController.java 会抛出异常</vh></v>
</v>
<v t="swot.20251005215932.8" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d303571077573732e"><vh>@ignore-node Item queryItemByIdWithCircuitBreaker</vh></v>
<v t="swot.20251005215932.10" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d303571077573732e"><vh>@ignore-node Order queryOrderById</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20251006093428.1" descendentVnodeUnknownAttributes="7d7100285805000000302e312e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d3033710775735805000000302e332e3071087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735809000000302e332e302e302e31710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3231711575735809000000302e332e302e302e3271167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d30392d3232711c75735809000000302e332e302e302e33711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d31302d3035712375735809000000302e332e302e302e3471247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d31302d3035712a75735809000000302e332e302e302e35712b7d712c5808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4d0f27580a000000707269736574646174657130580a000000323032352d31302d303571317573580b000000302e342e302e302e312e3171327d7133285808000000616e6e6f7461746571347d71352858080000007072696f7269747971364b01580a000000707269736574646174657137580a000000323032352d31302d3037713875580500000069636f6e7371395d713a7d713b28580400000074797065713c580400000066696c65713d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67713e580700000072656c50617468713f580d000000636c656f2f707269312e706e677140580500000077686572657141580e0000006265666f7265486561646c696e6571425807000000796f666673657471434b005807000000786f666673657471444b0258040000007870616471454b0158020000006f6e71465805000000766e6f646571475808000000636c656f49636f6e714858010000003171497561755807000000302e342e302e31714a7d714b5808000000616e6e6f74617465714c7d714d2858080000007072696f72697479714e4d0f27580a00000070726973657464617465714f580a000000323032352d30392d323171507573580b000000302e342e302e312e302e3171517d7152684c7d71532858080000007072696f7269747971544d0f27580a000000707269736574646174657155580a000000323032352d30392d323171567573580b000000302e342e302e312e302e3271577d7158684c7d71592858080000007072696f72697479715a4d0f27580a00000070726973657464617465715b580a000000323032352d30392d3232715c7573580b000000302e342e302e312e302e33715d7d715e684c7d715f2858080000007072696f7269747971604d0f27580a000000707269736574646174657161580a000000323032352d31302d3035716275735809000000302e342e302e312e3171637d716428684c7d71652858080000007072696f7269747971664b02580a000000707269736574646174657167580a000000323032352d31302d303771687568395d71697d716a28683c683d683d58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67716b683f580d000000636c656f2f707269322e706e67716c6841684268434b0068444b0268454b016846684768486849756175752e"><vh>Feign 知识点</vh>
<v t="swot.20251006132325.1"><vh>发送请求基本使用步骤（总结未使用断路器 Resilience4j 的步骤）</vh></v>
<v t="swot.20251006093504.1" descendentVnodeUnknownAttributes="7d71005803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d303371077573732e"><vh>调用第三方API</vh>
<v t="swot.20251006224019.1" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d303371077573732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/client/WeatherFeignClient.java</vh></v>
<v t="swot.20251006230036.1"><vh>file -&gt; service-order/src/test/java/com/tjise/serviceorder/WeatherTest.java</vh></v>
</v>
<v t="swot.20251006234047.1"><vh>面试题: 客户端负载均衡与服务端负载均衡的区别是什么？</vh></v>
<v t="swot.20251006093535.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735807000000302e302e302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735807000000302e302e302e32710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3232711575735807000000302e302e302e3371167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d31302d3035711c75735807000000302e302e302e34711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d31302d3035712375735807000000302e302e302e3571247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d31302d3035712a7573752e"><vh>日志功能</vh>
<v t="swot.20251007085454.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735805000000302e302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3231710e75735805000000302e302e32710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d30392d3232711575735805000000302e302e3371167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d31302d3035711c75735805000000302e302e34711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d31302d3035712375735805000000302e302e3571247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d31302d3035712a7573752e"><vh>file -&gt; service-order/src/main/resources/application.yml</vh>
<v t="swot.20251007085454.2" descendentVnodeUnknownAttributes="7d7100285803000000302e3171017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3271087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3232710e75735803000000302e33710f7d71105808000000616e6e6f7461746571117d71122858080000007072696f7269747971134d0f27580a000000707269736574646174657114580a000000323032352d31302d3035711575735803000000302e3471167d71175808000000616e6e6f7461746571187d71192858080000007072696f72697479711a4d0f27580a00000070726973657464617465711b580a000000323032352d31302d3035711c75735803000000302e35711d7d711e5808000000616e6e6f74617465711f7d71202858080000007072696f7269747971214d0f27580a000000707269736574646174657122580a000000323032352d31302d303571237573752e"><vh>@ignore-tree </vh>
<v t="swot.20251007085454.3"><vh>port</vh></v>
<v t="swot.20251007085454.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323171077573732e"><vh>spring</vh></v>
<v t="swot.20251007085454.5" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323271077573732e"><vh>eureka</vh></v>
<v t="swot.20251007085454.6" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d303571077573732e"><vh>feign 开启断路器</vh></v>
<v t="swot.20251007085454.7" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d303571077573732e"><vh>resilience4j -- 修改成 configs: default</vh></v>
<v t="swot.20251007085454.8" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d303571077573732e"><vh>management</vh></v>
</v>
<v t="swot.20251007085454.9"><vh>logging</vh></v>
</v>
<v t="swot.20251007091447.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/config/FeignConfig.java</vh></v>
</v>
<v t="swot.20251006093547.1" descendentVnodeUnknownAttributes="7d7100285809000000302e302e302e312e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d31302d3037710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755805000000302e302e3171197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3231711f75735809000000302e302e312e302e3171207d7121681b7d71222858080000007072696f7269747971234d0f27580a000000707269736574646174657124580a000000323032352d30392d3231712575735809000000302e302e312e302e3271267d7127681b7d71282858080000007072696f7269747971294d0f27580a00000070726973657464617465712a580a000000323032352d30392d3232712b75735809000000302e302e312e302e33712c7d712d681b7d712e2858080000007072696f72697479712f4d0f27580a000000707269736574646174657130580a000000323032352d31302d3035713175735807000000302e302e312e3171327d713328681b7d71342858080000007072696f7269747971354b02580a000000707269736574646174657136580a000000323032352d31302d303771377568085d71387d713928680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67713a680e580d000000636c656f2f707269322e706e67713b6810681168124b0068134b0268144b016815681668176818756175752e"><vh>超时控制</vh>
<v t="swot.20251007152600.1" descendentVnodeUnknownAttributes="7d7100285807000000302e302e312e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d31302d3037710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3171197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3231711f75735807000000302e312e302e3171207d7121681b7d71222858080000007072696f7269747971234d0f27580a000000707269736574646174657124580a000000323032352d30392d3231712575735807000000302e312e302e3271267d7127681b7d71282858080000007072696f7269747971294d0f27580a00000070726973657464617465712a580a000000323032352d30392d3232712b75735807000000302e312e302e33712c7d712d681b7d712e2858080000007072696f72697479712f4d0f27580a000000707269736574646174657130580a000000323032352d31302d3035713175735805000000302e312e3171327d713328681b7d71342858080000007072696f7269747971354b02580a000000707269736574646174657136580a000000323032352d31302d303771377568085d71387d713928680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67713a680e580d000000636c656f2f707269322e706e67713b6810681168124b0068134b0268144b016815681668176818756175752e"><vh>测试默认 readTimeout 60s 超时（注意要关闭 feign 断路器功能）</vh>
<v t="swot.20251007151619.1" descendentVnodeUnknownAttributes="7d71005805000000302e312e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d31302d3037710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-item/src/main/java/com/tjise/serviceitem/service/ItemService.java</vh>
<v t="swot.20251007175915.1"><vh>@ignore-node import</vh></v>
<v t="swot.20251007180040.1" descendentVnodeUnknownAttributes="7d71005803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d31302d3037710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@ignore-node class ItemService</vh>
<v t="swot.20251007180157.1"><vh>@ignore-node ITEM_MAP</vh></v>
<v t="swot.20251007180253.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d31302d3037710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>Item queryItemById -&gt; 增加超时 100s 模拟</vh></v>
</v>
</v>
<v t="swot.20251007173755.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735805000000302e302e3171087d710968037d710a2858080000007072696f72697479710b4d0f27580a00000070726973657464617465710c580a000000323032352d30392d3231710d75735805000000302e302e32710e7d710f68037d71102858080000007072696f7269747971114d0f27580a000000707269736574646174657112580a000000323032352d30392d3232711375735805000000302e302e3371147d711568037d71162858080000007072696f7269747971174d0f27580a000000707269736574646174657118580a000000323032352d31302d3035711975735803000000302e31711a7d711b2868037d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d31302d3037711f75580500000069636f6e7371205d71217d7122285804000000747970657123580400000066696c657124682458320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677125580700000072656c506174687126580d000000636c656f2f707269322e706e677127580500000077686572657128580e0000006265666f7265486561646c696e6571295807000000796f6666736574712a4b005807000000786f6666736574712b4b02580400000078706164712c4b0158020000006f6e712d5805000000766e6f6465712e5808000000636c656f49636f6e712f5801000000317130756175752e"><vh>file -&gt; service-order/src/main/resources/application.yml</vh>
<v t="swot.20251007173755.2" descendentVnodeUnknownAttributes="7d7100285803000000302e3171017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3231710775735803000000302e3271087d710968037d710a2858080000007072696f72697479710b4d0f27580a00000070726973657464617465710c580a000000323032352d30392d3232710d75735803000000302e33710e7d710f68037d71102858080000007072696f7269747971114d0f27580a000000707269736574646174657112580a000000323032352d31302d303571137573752e"><vh>@ignore-tree </vh>
<v t="swot.20251007173755.3"><vh>port</vh></v>
<v t="swot.20251007173755.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323171077573732e"><vh>spring</vh></v>
<v t="swot.20251007173755.5" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d323271077573732e"><vh>eureka</vh></v>
<v t="swot.20251007173755.7" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d31302d303571077573732e"><vh>resilience4j 要改 OrderService -&gt; app-item</vh></v>
</v>
<v t="swot.20251007173755.6" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d31302d3037710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>feign 关闭断路器 -&gt; 如果开启，Spring Cloud 设置了 5s 默认的慢超时</vh></v>
</v>
</v>
<v t="swot.20251007203558.1"><vh>newHeadline</vh></v>
</v>
<v t="swot.20251006093556.1"><vh>重试机制</vh></v>
<v t="swot.20251006093619.1"><vh>拦截器</vh></v>
<v t="swot.20251006093630.1"><vh>fallback 兜底返回</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20251004152006.1"><vh>资源</vh></v>
</vnodes>
<tnodes>
<t tx="swot.20250909151313.2">@language asciidoc
:source-highlighter: pygments
:icons: font
:scripts: cjk
:stem: latexmath
:toc:
:toc: right
:toc-title: Table of Contents
:toclevels: 3</t>
<t tx="swot.20250909151323.1">@language asciidoc

image::img/create_empty_project.png[,800]

</t>
<t tx="swot.20250909151510.1">
++++
&lt;button id="toggleButton"&gt;Table of Contents&lt;/button&gt;
&lt;script&gt;
    // 获取按钮和 div 元素
    const toggleButton = document.getElementById('toggleButton');
    const contentDiv = document.getElementById('toc');
    contentDiv.style.display = 'block';

    // 添加点击事件监听器
    toggleButton.addEventListener('click', () =&gt; {
        // 切换 div 的显示状态
        // if (contentDiv.style.display === 'none' || contentDiv.style.display === '') {
        if (contentDiv.style.display === 'none') {
            contentDiv.style.display = 'block';
        } else {
            contentDiv.style.display = 'none';
        }
    });
&lt;/script&gt;
++++
</t>
<t tx="swot.20250909151547.1"></t>
<t tx="swot.20250909160528.1">@language asciidoc
1. 单体架构的困境
+
在传统单体架构（Monolithic Architecture）中，所有功能模块（如用户管理、订单管理、支付管理等）都被打包在一个大的应用程序中，并部署在一个应用服务器上。

* *优点*：开发、测试、部署简单。
* *缺点*：
  ** 复杂性高：代码庞大，耦合度高，维护困难。
  ** 技术栈僵化：难以引入新的技术或框架。
  ** 扩展性差：无法针对特定模块进行扩展，必须扩展整个应用。
  ** 部署不灵活：一个小修改就需要重新部署整个应用，风险高。
  ** 可靠性低：一个微小的问题可能导致整个应用崩溃。


2. 微服务架构的解决方案
+
微服务架构（Microservices Architecture）是一种将单个应用程序拆分为 #一组小而自治的服务# 的架构风格。

* *核心思想*：*拆分* 与 *解耦*。
* *每个服务*：
  ** 围绕 *业务能力* 构建。
  ** 拥有独立的 *数据库* 和 *数据模型*。
  ** 可以独立 *开发*、*部署*、*扩展* 和 *重启*。
  ** 通过轻量级的通信机制（如 HTTP/REST、gRPC）进行协作。

+
比喻：

* *单体应用* 像一个 *大商场* ：所有部门（服装、餐饮、超市）在一个大楼里，共享水电消防。一损俱损。
* *微服务* 像一个 *商业街* ：每个店铺（服务）独立经营，有自己的特色和库存，通过公共街道（网络）连接。一店装修，不影响其他店。

</t>
<t tx="swot.20250909160632.1">@language asciidoc
拆分成多个服务后，也引入了新的复杂性：

. 服务发现：服务实例动态变化，消费者如何找到提供者？
. 配置管理：如何统一管理所有服务的配置，并实现动态更新？
. 负载均衡：如何将请求合理地分发到多个服务实例上？
. 容错与熔断：如何防止一个服务故障导致整个系统雪崩？
. API网关：如何为外部客户端提供一个统一的入口，并处理跨切面问题（认证、限流、路由）？
. 分布式事务：如何保证跨多个服务的数据一致性？
. 监控与链路追踪：如何跟踪一个请求穿越多个服务的全过程，以便排查问题？

</t>
<t tx="swot.20250909160640.1">@language asciidoc
1. 定义
+
Spring Cloud 是一套基于 Spring Boot的 #微服务生态工具集#。它提供了一系列 #标准化的工具和组件#，用于快速解决微服务架构中的常见问题（如上述挑战），让我们能更专注于业务逻辑的开发。
+
*简单来说*：Spring Boot 让开发单个微服务变得简单，而 Spring Cloud 让 #管理和协调# 这些微服务变得简单。


2. 核心定位
+
Spring Cloud 通过封装 *Netflix*、*Alibaba* 等公司成熟的微服务解决方案，提供了 *开箱即用* 的分布式系统开发体验。

</t>
<t tx="swot.20250909160728.1">@language asciidoc
Spring Cloud是一个“全家桶”，包含众多组件，以下是其中最核心的几个：

[cols="1,3,2", options="header"]
|===
| 组件名称
| 功能
| 比喻

| *Eureka / Nacos*
| *服务发现与注册*：服务提供者启动后向注册中心注册自己的地址，消费者从注册中心拉取服务列表。
| *电话簿*：服务在这里注册和查找彼此的地址。

| *Ribbon / LoadBalancer*
| *客户端负载均衡*：从服务列表中选择一个实例，将请求分发过去。
| *导游*：在多个相同的服务实例中，选择一个带你去。

| *Feign / OpenFeign*
| *声明式HTTP客户端*：基于接口和注解的方式调用远程服务，像调用本地方法一样简单。
| *翻译官*：帮你自动完成HTTP请求的组装和发送。

| *Hystrix / Sentinel*
| *熔断器*：当服务调用失败率达到阈值时，快速失败（熔断），防止雪崩效应，并提供服务降级。
| *保险丝*：电流过大（故障太多）自动熔断，保护整个电路（系统）。

| *Zuul / Gateway*
| *API网关*：所有外部请求的统一入口，负责路由、过滤、认证、限流、监控等。
| *前台/门卫*：所有访客必须经过这里，由它决定谁可以进、去哪里。

| *Config / Nacos*
| *分布式配置中心*：集中管理所有环境的配置文件，支持动态刷新。
| *公告板*：所有服务从这里获取最新配置，无需重启即可生效。

| *Sleuth / Zipkin*
| *分布式链路追踪*：跟踪一个请求从开始到结束的完整路径，用于性能分析和故障排查。
| *快递追踪*：可以查看你的包裹（请求）经过了哪些中转站（服务）。
|===
</t>
<t tx="swot.20250909160750.1">@language asciidoc
目前主要有两大主流体系：

. *Netflix系*：Spring Cloud Netflix（如 Eureka, Hystrix, Zuul）是早期标准，目前已部分进入维护模式。

. *Alibaba系*：*Spring Cloud Alibaba* 是目前国内最主流的方案，它提供了一站式的微服务解决方案（如 Nacos, Sentinel, Seata），与 Spring Cloud 生态无缝集成，功能强大且活跃度高。

*建议*：新项目首选 *Spring Cloud Alibaba*。
</t>
<t tx="swot.20250909160832.1">@language asciidoc
* 微服务架构通过拆分和解耦，解决了单体应用的痛点，但也带来了分布式系统的复杂性。

* *Spring Cloud* 不是一门新技术，而是一个 *工具箱*，它提供了 *一整套标准化的解决方案* 来轻松应对这些复杂性。

* 使用 *Spring Boot + Spring Cloud*，可以快速构建和治理一套完整、健壮的分布式微服务系统。
</t>
<t tx="swot.20250911081358.1">@language asciidoc
写完下面的代码后，使用 httpie 测试一下

http :8081/item/1

</t>
<t tx="swot.20250912101224.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-item&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-item&lt;/name&gt;
    &lt;description&gt;service-item&lt;/description&gt;
    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        
        &lt;!-- Lombok --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;


&lt;/project&gt;
</t>
<t tx="swot.20250912104007.1">@language java
package com.tjise.serviceitem.pojo;

import lombok.Data;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Item {
    
    private Long id;
    
    private String title;
    
    private String pic;
    
    private String desc;
    
    private Long price;
}
</t>
<t tx="swot.20250912112243.1">@language java
package com.tjise.serviceitem.service;

import com.tjise.serviceitem.pojo.Item;
import org.springframework.stereotype.Service;
import java.util.HashMap;
import java.util.Map;

@Service
public class ItemService {

    private static final Map&lt;Long, Item&gt; ITEM_MAP = new HashMap&lt;Long, Item&gt;();

    static {// 准备一些静态数据，模拟数据库，只是为了简单而已
        ITEM_MAP.put(1L, new Item(1L, "商品1", "http://图片1", "商品描述1", 1000L));
        ITEM_MAP.put(2L, new Item(2L, "商品2", "http://图片2", "商品描述2", 2000L));
        ITEM_MAP.put(3L, new Item(3L, "商品3", "http://图片3", "商品描述3", 3000L));
        ITEM_MAP.put(4L, new Item(4L, "商品4", "http://图片4", "商品描述4", 4000L));
        ITEM_MAP.put(5L, new Item(5L, "商品5", "http://图片5", "商品描述5", 5000L));
        ITEM_MAP.put(6L, new Item(6L, "商品6", "http://图片6", "商品描述6", 6000L));
        ITEM_MAP.put(7L, new Item(7L, "商品7", "http://图片7", "商品描述7", 7000L));
        ITEM_MAP.put(8L, new Item(8L, "商品8", "http://图片8", "商品描述8", 8000L));
        ITEM_MAP.put(9L, new Item(9L, "商品9", "http://图片9", "商品描述9", 9000L));
        ITEM_MAP.put(10L, new Item(10L, "商品10", "http://图片10", "商品描述10", 10000L));
    }

    /**
     * 模拟实现商品查询
     *
     * @param id
     * @return
     */
    public Item queryItemById(Long id) {
        return ITEM_MAP.get(id);
    }

}
</t>
<t tx="swot.20250912113856.1">@language java
package com.tjise.serviceitem.controller;

import com.tjise.serviceitem.pojo.Item;
import com.tjise.serviceitem.service.ItemService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ItemController {

    @Autowired
    private ItemService itemService;

    /**
     * 对外提供接口服务，查询商品信息
     *
     * @param id
     * @return
     */
    @GetMapping(value = "item/{id}")
    public Item queryItemById(@PathVariable("id") Long id) {
        return this.itemService.queryItemById(id);
    }
}
</t>
<t tx="swot.20250912123428.1">@language python
server:
  port: 8081
</t>
<t tx="swot.20250912140740.1"></t>
<t tx="swot.20250912140845.1">@doc
.商品实体类 Item
[source,java]
----
@c
@language java
package com.tjise.serviceorder.pojo;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Item {
    private Long id;
    private String title;
    private String pic;
    private String desc;
    private Long price;
}
@doc
----
</t>
<t tx="swot.20250912140908.1">@doc
.订单实体类 Order
[source,java]
----
@c
@language java
package com.tjise.serviceorder.pojo;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.Date;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Order {
    private String orderId;
    private Long userId;
    private Date createDate;
    private Date updateDate;
    private List&lt;OrderDetail&gt; orderDetails;
}
@doc
----
</t>
<t tx="swot.20250912141126.1">@language java
package com.tjise.serviceorder.pojo;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class OrderDetail {
    private String orderId;
    private Item item;
}
</t>
<t tx="swot.20250913160821.1">@language java
@others
</t>
<t tx="swot.20250913164255.1">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceorder.controller;

import com.tjise.serviceorder.pojo.Order;
import com.tjise.serviceorder.service.OrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

/**
 * 订单控制器
 * 处理订单相关的HTTP请求
 */
@RestController
public class OrderController {
    
    // 注入订单服务
    @Autowired
    private OrderService orderService;

    /**
     * 根据订单ID查询订单信息
     * 
     * @param orderId 订单ID
     * @return Order 订单信息
     */
    @GetMapping(value = "order/{orderId}")
    public Order queryOrderById(@PathVariable("orderId") String orderId) {
        return orderService.queryOrderById(orderId);
    }
}
@language asciidoc
@doc
----

httpie 测试:
http :8091/order/201810300001
</t>
<t tx="swot.20250913164316.1">@language java
package com.tjise.serviceorder.service;

import com.tjise.serviceorder.pojo.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

/**
 * 商品服务类
 * 通过 REST 方式调用商品微服务获取商品信息
 */
@Service
public class ItemService {

    // Spring 框架对 RESTful 方式的 http 请求做了封装，来简化操作
    @Autowired
    private RestTemplate restTemplate;

    /**
     * 根据商品 ID 查询商品信息
     * 通过 REST 调用商品微服务获取商品详细数据
     * 
     * @param id 商品ID
     * @return Item 商品信息
     */
    public Item queryItemById(Long id) {
        return restTemplate.getForObject("http://127.0.0.1:8081/item/"
                + id, Item.class);
    }
}
</t>
<t tx="swot.20250913170215.1">@language java
package com.tjise.serviceorder;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.web.client.RestTemplate;

/**
 * 订单服务启动类
 * Spring Boot 应用程序入口点
 */
@SpringBootApplication
public class ServiceOrderApplication {
    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }

    /**
     * 创建RestTemplate实例
     * 用于调用其他微服务
     * 
     * @return RestTemplate
     */
    @Bean
    public RestTemplate restTemplate() {
        // 可以在这里添加拦截器来统一处理URL前缀
        return new RestTemplate();
    }
}
</t>
<t tx="swot.20250913170621.1" annotate="7d71002858080000007072696f7269747971014b05580a000000707269736574646174657102580a000000323032352d30392d31387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677104580700000072656c506174687105580d000000636c656f2f707269352e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceitem;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;

@SpringBootApplication
@EnableEurekaClient  // &lt;1&gt;
public class ServiceItemApplication {

    public static void main(String[] args) {
        SpringApplication.run(ServiceItemApplication.class, args);
    }
}
@doc
----

&lt;1&gt; 启用 uereka 客户端注解
</t>
<t tx="swot.20250913172427.1">@language python
server:
  port: 8091
</t>
<t tx="swot.20250914085607.1"></t>
<t tx="swot.20250914085621.1"></t>
<t tx="swot.20250914091119.1">@language asciidoc
OkHttp 的异步 API 在应用程序层面实现了与 Node.js 类似的高并发编程模型：通过非阻塞 I/O 和回调机制，最大化利用少量线程来处理海量网络连接，从而高效地处理高并发 HTTP 请求。
</t>
<t tx="swot.20250914092716.1">前面演示的是 方式一：字段注入（需要 @Autowired），
下面演示一下使用 方式二单个构造函数注入的例子。
</t>
<t tx="swot.20250914101602.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....</t>
<t tx="swot.20250914102420.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
@Bean
public OkHttpClient okHttpClient() {
    return new OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build();
}
@doc
----

</t>
<t tx="swot.20250914102436.1" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
@Bean
public WebClient webClient() {
    return WebClient.builder()
          .baseUrl("http://127.0.0.1:8081/item")
          .build();
}
@doc
----

</t>
<t tx="swot.20250914103506.1">@language asciidoc
RestClient 的主要价值在于它提供了一个现代化但又不失简单的 API，结合了 RestTemplate 的易用性和 WebClient 的功能强大，是未来 Spring 应用HTTP 客户端调用的推荐选择。
</t>
<t tx="swot.20250914105307.1">为了兼容老的 RestTemplate 代码，也可以在 RestTemplate 中配置 OkHttp。

</t>
<t tx="swot.20250914105516.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceorder.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.tjise.serviceorder.pojo.Item;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.springframework.stereotype.Service;

import java.io.IOException;

@Service
public class ItemService {
    // 下面这两种方式是等价的，看自己的使用方式而定
    // 方式一：字段注入（需要 @Autowired）
    // @Autowired
    // private OkHttpClient client;

    // 方式二 单个构造函数注入
    private final OkHttpClient client;  // 单个构造函数注入（不需要 @Autowired
    private final ObjectMapper objectMapper;  // 可支持 json 序列化
    public ItemService(OkHttpClient client, ObjectMapper objectMapper) {
        this.client = client;
        this.objectMapper = objectMapper;
        // 检查请求工厂类型
        System.out.println("Using OkHttpClient: " + client.getClass().getName());
        // 打印：Using OkHttpClient: okhttp3.OkHttpClient
    }

    public Item queryItemById(Long id) throws IOException {
        Request request = new Request.Builder()
                .url("http://127.0.0.1:8081/item/" + id)
                .build();
        try (Response response = client.newCall(request).execute()) {
            // 读取响应体
            String json = response.body().string();
            // 使用注入的 objectMapper 反序列化成 JSON 字符串
            return objectMapper.readValue(json, Item.class);
        }
    }
}
@doc
----
</t>
<t tx="swot.20250914141436.1">@language java
@others
</t>
<t tx="swot.20250914174528.1">package com.tjise.serviceorder.service;

import com.tjise.serviceorder.pojo.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
</t>
<t tx="swot.20250914174817.1">/**
 * 商品服务类
 * 通过 REST 方式调用商品微服务获取商品信息
 */
@Service
public class ItemService {
    @others
}
</t>
<t tx="swot.20250914175541.1">// Spring 框架对 RESTful 方式的 http 请求做了封装，来简化操作
// @Autowired
// private RestTemplate restTemplate;
</t>
<t tx="swot.20250914175616.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
private final RestTemplate restTemplate;
public ItemService(RestTemplate restTemplate) {
    this.restTemplate = restTemplate;
}
@doc
----

</t>
<t tx="swot.20250914175705.1">/**
 * 根据商品 ID 查询商品信息
 * 通过 REST 调用商品微服务获取商品详细数据
 * 
 * @param id 商品ID
 * @return Item 商品信息
 */
public Item queryItemById(Long id) {
    return restTemplate.getForObject(
        "http://127.0.0.1:8081/item/" + id,
        Item.class
    );
}
</t>
<t tx="swot.20250914180307.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
@others
</t>
<t tx="swot.20250914181023.1">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-order&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-order&lt;/name&gt;
    &lt;description&gt;service-order&lt;/description&gt;
    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;

        &lt;!-- Lombok --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
        @others
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</t>
<t tx="swot.20250914181123.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 使用 Spring Boot 管理的版本： --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;
    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250914182058.1">@language java
@others
</t>
<t tx="swot.20250914182242.1">package com.tjise.serviceorder;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;
</t>
<t tx="swot.20250914182310.1">/**
 * 订单服务启动类
 * Spring Boot 应用程序入口点
 */
@SpringBootApplication
public class ServiceOrderApplication {

    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }
    @others
}
</t>
<t tx="swot.20250914182350.1" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
/**
 * 创建RestTemplate实例
 * 用于调用其他微服务
 * 
 * @return RestTemplate
 */
@Bean
public RestTemplate restTemplate() {
    // 可以在这里添加拦截器来统一处理URL前缀
    // return new RestTemplate();  // 未使用 OkHttp
    return new RestTemplate(new OkHttp3ClientHttpRequestFactory());
}
@doc
----
</t>
<t tx="swot.20250914195444.1">@language java
@others
</t>
<t tx="swot.20250914195444.2">package com.tjise.serviceorder.service;

import com.tjise.serviceorder.pojo.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
</t>
<t tx="swot.20250914195444.3">/**
 * 商品服务类
 * 通过 REST 方式调用商品微服务获取商品信息
 */
@Service
public class ItemService {
    @others
}
</t>
<t tx="swot.20250914195444.4">// Spring 框架对 RESTful 方式的 http 请求做了封装，来简化操作
// @Autowired
// private RestTemplate restTemplate;
</t>
<t tx="swot.20250914195444.5" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
private final RestTemplate restTemplate;
public ItemService(RestTemplate restTemplate) {  // 单个构造函数
    this.restTemplate = restTemplate;
    // 检查请求工厂类型
    System.out.println("Request Factory: " + restTemplate.getRequestFactory().getClass().getName());
    // 成功使用 OkHttp 会打印
    // Request Factory: org.springframework.http.client.OkHttp3ClientHttpRequestFactory
}
@doc
----

</t>
<t tx="swot.20250914195444.6">/**
 * 根据商品 ID 查询商品信息
 * 通过 REST 调用商品微服务获取商品详细数据
 * 
 * @param id 商品ID
 * @return Item 商品信息
 */
public Item queryItemById(Long id) {
    return restTemplate.getForObject(
        "http://127.0.0.1:8081/item/" + id,
        Item.class
    );
}
</t>
<t tx="swot.20250914204525.1">@language java
@others
</t>
<t tx="swot.20250914204525.2">package com.tjise.serviceorder;

import okhttp3.OkHttpClient;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import java.util.concurrent.TimeUnit;
</t>
<t tx="swot.20250914204525.3">/**
 * 订单服务启动类
 * Spring Boot 应用程序入口点
 */
@SpringBootApplication
public class ServiceOrderApplication {

    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }
    @others
}
</t>
<t tx="swot.20250914204525.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
/**
 * 创建RestTemplate实例
 * 用于调用其他微服务
 * 
 * @return RestTemplate
 */
@Bean
public RestTemplate restTemplate() {
    // 可以在这里添加拦截器来统一处理URL前缀
    // return new RestTemplate();  // 未使用 OkHttp
    return new RestTemplate(new OkHttp3ClientHttpRequestFactory());
}
@doc
----
</t>
<t tx="swot.20250914212915.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
@others
</t>
<t tx="swot.20250914212915.2">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-order&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-order&lt;/name&gt;
    &lt;description&gt;service-order&lt;/description&gt;
    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;

        &lt;!-- Lombok --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
        @others
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</t>
<t tx="swot.20250914212915.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 使用 Spring Boot 管理的版本： --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;
    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250914213134.1">@language java
@others
</t>
<t tx="swot.20250914213134.2">package com.tjise.serviceorder;

import okhttp3.OkHttpClient;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import java.util.concurrent.TimeUnit;
</t>
<t tx="swot.20250914213134.3">/**
 * 订单服务启动类
 * Spring Boot 应用程序入口点
 */
@SpringBootApplication
public class ServiceOrderApplication {

    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }
    @others
}
</t>
<t tx="swot.20250914213134.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
/**
 * 创建RestTemplate实例
 * 用于调用其他微服务
 * 
 * @return RestTemplate
 */
@Bean
public RestTemplate restTemplate() {
    // 可以在这里添加拦截器来统一处理URL前缀
    // return new RestTemplate();  // 未使用 OkHttp
    return new RestTemplate(new OkHttp3ClientHttpRequestFactory());
}
@doc
----
</t>
<t tx="swot.20250914213134.5" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
@Bean
public OkHttpClient okHttpClient() {
    return new OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build();
}
@doc
----

</t>
<t tx="swot.20250914214630.1" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceorder.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.tjise.serviceorder.pojo.Item;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import java.io.IOException;

@Service
public class ItemService {
    // 下面这两种方式是等价的，看自己的使用方式而定
    // 方式一：字段注入（需要 @Autowired）
    // @Autowired
    // private WebClient webClient;

    // 方式二 单个构造函数注入
    private final WebClient webClient;
    public ItemService(WebClient webClient) {
        this.webClient = webClient;
    }

    public Item queryItemById(Long id) {
        return webClient.get()
            .uri("/{id}", id)
            .retrieve()
            .bodyToMono(Item.class)
            .block(); // 同步调用，如需要异步可去掉block()
    }
}
@doc
----
</t>
<t tx="swot.20250915094305.1">@language asciidoc
通过以上的测试发现，在订单系统中要调用商品微服务中的查询接口来获取数据，在订单微服务中将 url 硬编码到代码中，这样显然不好，因为，运行环境一旦发生变化这个 url 地址将不可用。

如何解决呢？

解决方案：将 url 地址写入到 yml 配置文件中。

</t>
<t tx="swot.20250915102329.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,python]
----
@c
@language python
server:
  port: 8091

# 新增 url 配置
myspcloud:
  item:
    url: http://127.0.0.1:8081/item/

@doc
----
</t>
<t tx="swot.20250915140414.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31357103752e">@language java
@others
</t>
<t tx="swot.20250915140414.2">package com.tjise.serviceorder;

import okhttp3.OkHttpClient;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import java.util.concurrent.TimeUnit;
</t>
<t tx="swot.20250915140414.3" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d31357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">/**
 * 订单服务启动类
 * Spring Boot 应用程序入口点
 */
@SpringBootApplication
public class ServiceOrderApplication {

    // 新增使用 @Value 注解获取配置的 url
    @Value("${myspcloud.item.url}")
    private String itemUrl;

    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }
    @others
}
</t>
<t tx="swot.20250915140414.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
/**
 * 创建RestTemplate实例
 * 用于调用其他微服务
 * 
 * @return RestTemplate
 */
@Bean
public RestTemplate restTemplate() {
    // 可以在这里添加拦截器来统一处理URL前缀
    // return new RestTemplate();  // 未使用 OkHttp
    return new RestTemplate(new OkHttp3ClientHttpRequestFactory());
}
@doc
----
</t>
<t tx="swot.20250915140414.5" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
@Bean
public OkHttpClient okHttpClient() {
    return new OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build();
}
@doc
----

</t>
<t tx="swot.20250915140414.6" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d31357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
@Bean
public WebClient webClient() {
    return WebClient.builder()
        .baseUrl(itemUrl)   // 使用注入的 Url
        .build();
}
@doc
----

</t>
<t tx="swot.20250915172449.1"></t>
<t tx="swot.20250916112922.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31367103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceorder.utils;

import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;


@Data
@Component
@ConfigurationProperties(prefix = "myspcloud.item")
public class ItemProperties {
    // 下面属性值的内容会从配置文件中被自动获取到
    private String url;
}
@doc
----

</t>
<t tx="swot.20250916113222.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31357103752e">@language java
@others
</t>
<t tx="swot.20250916113222.2">package com.tjise.serviceorder;

import com.tjise.serviceorder.utils.ItemProperties;
import okhttp3.OkHttpClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import java.util.concurrent.TimeUnit;
</t>
<t tx="swot.20250916113222.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31357103752e">/**
 * 订单服务启动类
 * Spring Boot 应用程序入口点
 */
@SpringBootApplication
public class ServiceOrderApplication {
    @others
}
</t>
<t tx="swot.20250916113222.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
/**
 * 创建RestTemplate实例
 * 用于调用其他微服务
 * 
 * @return RestTemplate
 */
@Bean
public RestTemplate restTemplate() {
    // 可以在这里添加拦截器来统一处理URL前缀
    // return new RestTemplate();  // 未使用 OkHttp
    return new RestTemplate(new OkHttp3ClientHttpRequestFactory());
}
@doc
----
</t>
<t tx="swot.20250916113222.5" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
@Bean
public OkHttpClient okHttpClient() {
    return new OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build();
}
@doc
----

</t>
<t tx="swot.20250916113222.6" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d31357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
// 方法参数注入（直接从 Spring 容器里获取 ItemProperties）
@Bean
public WebClient webClient(ItemProperties properties) {
    return WebClient.builder()
            .baseUrl(properties.getUrl())
            .build();
}
@doc
----

</t>
<t tx="swot.20250916132736.1">@language asciidoc
* 问题：商品微服务 ip 发生变更则需要更改订单微服务的配置文件
* 问题：商品微服务有多个，订单微服务该链接哪个？

从而引入微服务注册、发现机制，如下。

image::img/service_register.png[,640]

1. 服务提供者将服务注册到注册中心
2. 服务消费者通过注册中心查找服务
3. 查找到服务后进行调用（这里就是无需硬编码 url 的解决方案）
4. 服务的消费者与服务注册中心保持心跳连接，一旦服务提供者的地址发生变更时，注册中心会通知服务消费者

</t>
<t tx="swot.20250916133305.1">@language asciidoc
Eureka 是 Netfix 开源的服务发现组件，本身是一个基于 REST 的服务。它包含 Server 和 Client 两部分。SpringCloud 将它集成在子项目 SpringCloud Netfix 中，从而实现微服务的注册与发现。

* Eureka Server 提供服务注册服务，各个节点启动后，会在 Eureka Server 中进行注册，这样 EurekaServer 中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。

* Eureka Client 是一个 java 客户端，用于简化与 Eureka Server 的交互，客户端同时也有一个内置的、使用轮询(round-robin)负载算法的负载均衡器。

* 在应用启动后，将会向 Eureka Server 发送心跳,默认周期为 30 秒，如果 Eureka Server 在多个心跳周期内没有接收到某个节点的心跳，Eureka Server 将会从服务注册表中把这个服务节点移除(默认90秒)。

* Eureka Server 之间通过复制的方式完成数据的同步，Eureka 还提供了客户端缓存机制，即使所有的 Eureka Server 都挂掉，客户端依然可以利用缓存中的信息消费其他服务的 API。

综上，Eureka 通过心跳检查、客户端缓存等机制，确保了系统的高可用性、灵活性和可伸缩性。
</t>
<t tx="swot.20250916134236.1">@language asciidoc
创建一个 maven 的项目，命名为 eureka。

image::img/create_eureka_module.png[,800]

</t>
<t tx="swot.20250916141123.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@doc
[source,scss]
....
@c
@language xml
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;eureka&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;!-- 加入下面各项内容 --&gt;
    @others
&lt;/project&gt;
@doc
....
</t>
<t tx="swot.20250916152133.1">@doc
[source,scss]
....
@c
@language xml
&lt;properties&gt;
    &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;
    &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;!-- 这两个版本要匹配才行 --&gt;
    &lt;spring.boot.version&gt;2.7.18&lt;/spring.boot.version&gt;
    &lt;spring.cloud.version&gt;2021.0.8&lt;/spring.cloud.version&gt;
&lt;/properties&gt;
@doc
....
</t>
<t tx="swot.20250916152144.1">@doc
[source,scss]
....
@c
@language xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;!-- Spring Boot 依赖管理 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring.boot.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;!-- Spring Cloud依赖管理 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring.cloud.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
@doc
....
</t>
<t tx="swot.20250916152233.1">@doc
[source,scss]
....
@c
@language xml
&lt;dependencies&gt;
    &lt;!-- Eureka Server核心依赖 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
@doc
....
</t>
<t tx="swot.20250916152243.1">@doc
[source,scss]
....
@c
@language xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;!-- Spring Boot Maven插件，用于打包可执行jar --&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${spring.boot.version}&lt;/version&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
@doc
....
</t>
<t tx="swot.20250916155249.1">@language java
package com.tjise.eureka;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;

/**
 * Eureka Server启动类
 * 
 * @EnableEurekaServer 注解启用 Eureka Server 功能
 */
@SpringBootApplication
@EnableEurekaServer
public class EurekaApplication {
    
    public static void main(String[] args) {
        SpringApplication.run(EurekaApplication.class, args);
    }
}
</t>
<t tx="swot.20250916160550.1">@language python
server:
  port: 8761  # 1. Eureka Server端口设置为8761（默认端口）

eureka:
  instance:
    hostname: localhost  # 2. 设置主机名为localhost
  client:
    register-with-eureka: false  # 3. Eureka Server不向自己注册
    fetch-registry: false        # 4. Eureka 自己不需要获取服务注册信息
    service-url:
      # 5. 设置 Eureka Server 的访问地址
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
      
  server:
    enable-self-preservation: false  # 6. 关闭自我保护机制（开发环境建议关闭，但是会有红色警告提示，属于正常）
                                     # 设置成 false 后保证服务不可用时及时剔除相应的微服务，易测试。
</t>
<t tx="swot.20250917094025.1">@language asciidoc
现在可以通过以下命令启动 Eureka Server：

. 进入eureka项目目录
* cd /Users/swot/swot-learning/java/SpringCloud/eureka

. 使用 IDEA 启动应用
* mvn spring-boot:run

. 或者先打包再运行
* mvn clean package
* java -jar target/eureka-1.0-SNAPSHOT.jar

启动后访问 http://localhost:8761 即可看到 Eureka Server 的管理界面。

image::img/eureka_admin_no_instance.png[]

</t>
<t tx="swot.20250917113532.1">@language asciidoc
成功注册 service-item 到 eureka 是这样的，如下图

image::img/eureka_admin_with_service-item.png[]

</t>
<t tx="swot.20250917113753.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
@others
</t>
<t tx="swot.20250918182153.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;properties&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;spring-cloud.version&gt;2021.0.8&lt;/spring-cloud.version&gt;
&lt;/properties&gt;
@doc
....
</t>
<t tx="swot.20250918182311.1">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-item&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-item&lt;/name&gt;
    &lt;description&gt;service-item&lt;/description&gt;
    @others
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</t>
<t tx="swot.20250918182407.1" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d31387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring-cloud.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
@doc
....
</t>
<t tx="swot.20250918182711.1">&lt;dependencies&gt;
    &lt;!-- 添加Spring Boot Web依赖 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;
    
    &lt;!-- 添加Spring Boot Test依赖 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;!-- Lombok --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
        &lt;artifactId&gt;lombok&lt;/artifactId&gt;
        &lt;optional&gt;true&lt;/optional&gt;
    &lt;/dependency&gt;
    @others
&lt;/dependencies&gt;
</t>
<t tx="swot.20250918182810.1" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d31387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 添加 Eureka 客户端依赖, 用于将服务注册到 Eureka --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250918184444.1" annotate="7d71002858080000007072696f7269747971014b04580a000000707269736574646174657102580a000000323032352d30392d31387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677104580700000072656c506174687105580d000000636c656f2f707269342e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,python]
----
@c
@language python
### 服务端口号(本身是一个web项目)
server:
    port: 8081

### 起个名字作为服务名称(该服务注册到eureka注册中心的名称，比如商品服务)
spring:
    application:
        name: app-item

### 服务注册到eureka注册中心的地址
eureka:
    client:
        service-url:
            defaultZone: http://127.0.0.1:8761/eureka/
        ### 因为该应用为服务提供者，是 eureka 的一个客户端，需要注册到注册中心
        register-with-eureka: true
        ### 是否需要从 eureka 上检索服务
        fetch-registry: true
    instance:
        # 使用IP地址注册而不是主机名
        prefer-ip-address: true
        # 客户端在注册时使用自己的IP，而不是主机名，是生产环境的最佳实践。避免主机名解析问题
        ip-address: 127.0.0.1
@doc
----

****
name 和 instance 两者都有重要作用，缺一不可：

- spring.application.name：服务的逻辑名称，用于服务发现和负载均衡
- eureka.instance 配置：实例的网络地址，用于实际通信

即使使用IP注册，仍然需要服务名称来进行服务发现和调用。
****
</t>
<t tx="swot.20250918221324.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31387103752e">@language java
package com.tjise.serviceitem;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ServiceItemApplication {

    public static void main(String[] args) {
        SpringApplication.run(ServiceItemApplication.class, args);
    }
}
</t>
<t tx="swot.20250918225928.1">@language asciidoc
之前我们在订单系统中是将商品微服务的地址进行了硬编码，现在，由于已经将商品服务注册到 Eureka 中，所以，只需要从 Eureka 中发现服务即可。

想要从 Eureka 中发现服务，需要先将 service-order 成功注册到 eureka，如下图是成功注册后的截图。

image::img/eureka_admin_with_service-order.png[]

httpie 测试注册 service-order 到 Eureka 后，也是可以正常运行的:
[source,console]
----
http :8091/order/201810300001
----

</t>
<t tx="swot.20250919080549.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
@others
</t>
<t tx="swot.20250919080549.2">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;

    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-order&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-order&lt;/name&gt;
    &lt;description&gt;service-order&lt;/description&gt;
    @others
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</t>
<t tx="swot.20250919080549.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 使用 Spring Boot 管理的版本： --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;
    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250919080549.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,scss]
....
@c
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....</t>
<t tx="swot.20250919081656.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-order&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-order&lt;/name&gt;
    &lt;description&gt;service-order&lt;/description&gt;
    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;

        &lt;!-- Lombok --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</t>
<t tx="swot.20250919135501.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d32307103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;properties&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;spring-cloud.version&gt;2021.0.8&lt;/spring-cloud.version&gt;
&lt;/properties&gt;
@doc
....
</t>
<t tx="swot.20250919135524.1">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;!-- Lombok --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
        &lt;artifactId&gt;lombok&lt;/artifactId&gt;
        &lt;optional&gt;true&lt;/optional&gt;
    &lt;/dependency&gt;
    @others
&lt;/dependencies&gt;
</t>
<t tx="swot.20250919135651.1" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d32307103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring-cloud.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
@doc
....
</t>
<t tx="swot.20250919135739.1" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d31387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 添加 Eureka 客户端依赖, 用于将服务注册到 Eureka --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250919170635.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@language yaml
@others
</t>
<t tx="swot.20250919222308.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@language java
@others
</t>
<t tx="swot.20250919222308.2">package com.tjise.serviceorder;

import com.tjise.serviceorder.utils.ItemProperties;
import okhttp3.OkHttpClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.loadbalancer.LoadBalanced;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;
import java.util.concurrent.TimeUnit;
</t>
<t tx="swot.20250919222308.3" annotate="7d71002858080000007072696f7269747971014b05580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677104580700000072656c506174687105580d000000636c656f2f707269352e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
/**
 * 订单服务启动类，Spring Boot 应用程序入口点。
 */
@SpringBootApplication
@EnableEurekaClient  // new -&gt; 启用 Eureka 客户端功能
public class ServiceOrderApplication {
    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }
    // 包含其他代码
    @others
}
@doc
----

.负载均衡使用拦截器原理：
****
1. 拦截请求URL
2. 识别服务名
3. 通过服务发现获取实际地址
4. 替换URL并发起请求
****
</t>
<t tx="swot.20250919222308.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@doc
[source,java]
----
@c
/**
 * 创建 RestTemplate 实例，用于调用其他微服务。
 * @return RestTemplate
 */
@Bean
@LoadBalanced // new -&gt; 使用负载均衡
public RestTemplate restTemplate() {
    // 可以在这里添加拦截器来统一处理URL前缀
    // return new RestTemplate();  // not use OkHttp
    return new RestTemplate(
           new OkHttp3ClientHttpRequestFactory());  // use OkHttp
}
@doc
----
</t>
<t tx="swot.20250919222308.5" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@doc
[source,java]
----
@c
@Bean
// @LoadBalanced  // OkHttpClient 不支持负载均衡，在这儿写该注解没用。
public OkHttpClient okHttpClient() {
    return new OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build();
}
@doc
----

</t>
<t tx="swot.20250919222308.6" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31397103752e">@doc
@nowrap
[source,java]
----
@c
// 配置负载均衡的 WebClient.Builder
@Bean
@LoadBalanced // new -&gt; 使用负载均衡
public WebClient.Builder loadBalancedWebClientBuilder() {
    return WebClient.builder();
}

// 使用 Builder 创建 WebClient
@Bean
public WebClient webClient(WebClient.Builder builder) {
    return builder
        .baseUrl("http://app-item/item")  // 使用 eureka 注册中心调用(去注册中心查找服务 app-item，这种方式必须先开启负载均衡 @LoadBalanced)
        .build();
}

@doc
----

.总结
****
WebClient 也需要使用 @LoadBalanced 注解，但需要注解在 WebClient.Builder 上，而不是 WebClient 实例上。
这与 WebClient 的设计有关：

- WebClient 是不可变的（immutable）
- WebClient.Builder 是可变的，用于构建 WebClient 实例
- Spring Cloud 需要在 Builder 层面注入负载均衡能力

这样设计是为了与 WebClient 的不可变性设计保持一致，同时也提供了更灵活的配置方式。
****
</t>
<t tx="swot.20250920073920.1"></t>
<t tx="swot.20250920121016.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@language java
@others
</t>
<t tx="swot.20250921075637.1">@doc
[source,yaml]
----
@c
server:
    port: 8091
@doc
----
</t>
<t tx="swot.20250921075656.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@doc
[source, yaml]
----
@c
# 起个名字作为服务名称(该服务注册到 eureka 注册中心的名称，比如订单服务)
spring:
    application:
        name: app-order
@doc
----</t>
<t tx="swot.20250921075711.1" annotate="7d71002858080000007072696f7269747971014b04580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677104580700000072656c506174687105580d000000636c656f2f707269342e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,yaml]
----
@c
# 服务注册到 eureka 注册中心的地址
eureka:
    client:
        service-url:
            defaultZone: http://127.0.0.1:8761/eureka
        register-with-eureka: true  # 因为该应用为服务提供者，是 eureka 的一个客户端，需要注册到注册中心
        fetch-registry: true        # 是否需要从 eureka 上检索服务
    instance:
        prefer-ip-address: true     # 使用 IP地址 注册而不是主机名
        ip-address: 127.0.0.1       # 客户端在注册时使用自己的 IP，而不是主机名
                                    # 这是生产环境的最佳实践。避免主机名解析问题
@doc
----
</t>
<t tx="swot.20250921083535.1">package com.tjise.serviceorder.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.tjise.serviceorder.pojo.Item;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.loadbalancer.LoadBalancerClient;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import java.io.IOException;
</t>
<t tx="swot.20250921083629.1" annotate="7d71002858080000007072696f7269747971014b06580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e677104580700000072656c506174687105580d000000636c656f2f707269362e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
// 根据商品 ID 查询商品信息：通过 REST 调用商品微服务获取商品详细数据
@Service
public class ItemService {  // 商品服务类
    @Autowired
    private RestTemplate restTemplate;

    private final WebClient webClient;
    private final OkHttpClient okHttpClient;
    private final ObjectMapper objectMapper;  // 可支持 json 序列化

    // 单个构造方法注入
    public ItemService(
            WebClient webClient,
            @Autowired(required = false) OkHttpClient okHttpClient,
            @Autowired(required = false) ObjectMapper objectMapper) {
        this.webClient = webClient;
        this.okHttpClient = okHttpClient;
        this.objectMapper = objectMapper;
    }
    // 包含其他代码
    @others
}
@language asciidoc
@doc
----
</t>
<t tx="swot.20250921084241.1">@doc
[source,java]
----
@c
@language java
public Item queryItemById(Long id) {
    return restTemplate.getForObject(
            "http://app-item/item/" + id, Item.class);  // &lt;1&gt;
}
@language asciidoc
@doc
----

&lt;1&gt; app-item 是 service-item 在 Eureka 中注册的服务名。
</t>
<t tx="swot.20250921085305.1">@doc
[source,java]
----
@c
@language java
public Item queryItemByIdWithWebClient(Long id) {
    return webClient.get()
                    .uri("/{id}", id)
                    .retrieve()
                    .bodyToMono(Item.class)
                    .block();
}
@doc
----


</t>
<t tx="swot.20250921102752.1">@language java
@others
</t>
<t tx="swot.20250921102844.1">package com.tjise.serviceorder.service;

import com.tjise.serviceorder.pojo.Order;
import com.tjise.serviceorder.pojo.OrderDetail;
import com.tjise.serviceorder.pojo.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.*;
</t>
<t tx="swot.20250921103039.1">/**
 * 订单服务类
 * 提供订单查询功能，并通过调用商品服务获取商品详细信息
 */
@Service
public class OrderService {
    @others
}
</t>
<t tx="swot.20250921103135.1">private static final Map&lt;String, Order&gt; ORDER_DATA = new HashMap&lt;String, Order&gt;();
// 初始化订单数据
static {
    // 模拟数据库，构造测试数据
    Order order = new Order();
    order.setOrderId("201810300001");
    order.setCreateDate(new Date());
    order.setUpdateDate(order.getCreateDate());
    order.setUserId(1L);
    List&lt;OrderDetail&gt; orderDetails = new ArrayList&lt;OrderDetail&gt;();

    // 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
    Item item = new Item();
    item.setId(1L);
    orderDetails.add(new OrderDetail(order.getOrderId(), item));

    // 创建第二个商品详情
    item = new Item();
    item.setId(2L);
    orderDetails.add(new OrderDetail(order.getOrderId(), item));

    order.setOrderDetails(orderDetails);

    ORDER_DATA.put(order.getOrderId(), order);
}
</t>
<t tx="swot.20250921103403.1" annotate="7d71002858080000007072696f7269747971014b07580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269372e706e677104580700000072656c506174687105580d000000636c656f2f707269372e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
// 注入商品服务，用于查询商品详细信息
@Autowired
private ItemService itemService;
/**
 * 根据订单ID查询订单数据
 * @param orderId 订单ID
 * @return Order 订单信息，包含完整的商品详情
 */
public Order queryOrderById(String orderId) throws IOException {
    // 从模拟数据库中查询订单
    Order order = ORDER_DATA.get(orderId);
    if (null == order) {
        return null;
    }
    // 获取订单详情列表
    List&lt;OrderDetail&gt; orderDetails = order.getOrderDetails();
    // 遍历订单详情，通过商品微服务查询商品详细数据
    for (OrderDetail orderDetail : orderDetails) {
        // 通过商品微服务查询商品详细数据
        Item item = itemService.queryItemById(orderDetail.getItem().getId());  // &lt;1&gt;
        // Item item = itemService.queryItemByIdWithOkHttpClient(orderDetail.getItem().getId());  // &lt;2&gt;
        // Item item = itemService.queryItemByIdWithWebClient(orderDetail.getItem().getId());  // &lt;3&gt;
        if (null == item) {
            continue;
        }
        orderDetail.setItem(item);  // 将查询到的商品详细信息设置到订单详情中
    }
    return order;
}
@language asciidoc
@doc
----
&lt;1&gt; 使用 RestTemplate
&lt;2&gt; 使用 OkHttpClient
&lt;3&gt; 使用 WebClient
</t>
<t tx="swot.20250921115356.1">@doc
[source,java]
----
@c
@language java
@Autowired
private LoadBalancerClient loadBalancerClient;

public Item queryItemByIdWithOkHttpClient(Long id) throws IOException {
    // 使用 LoadBalancerClient 获取负载均衡的实例
    ServiceInstance instance = loadBalancerClient.choose("app-item");
    String actualUrl = "http://" + instance.getHost() + ":" + instance.getPort() + "/item/" + id;
    Request request = new Request.Builder().url(actualUrl).build();
    try (Response response = okHttpClient.newCall(request).execute()) {  // 执行 OkHttpClient 调用
        String json = response.body().string();  // 读取响应体
        // 使用注入的 objectMapper 反序列化成 JSON 字符串
        return objectMapper.readValue(json, Item.class);
    }
}
@doc
----

</t>
<t tx="swot.20250921163937.1">@language asciidoc
在前面的示例中，我们可以看到不需要登录即可访问到 Eureka 服务，这样其实是不安全的。
所以需要为 Eureka 添加用户认证功能。

.加入用户认证功能后需要登录界面
image::img/eureka_login.png[,800]

.加入用户认证功能后依然可以注册成功
image::img/eureka_admin_with_user_and_pass.png[]
</t>
<t tx="swot.20250921164454.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
@others
</t>
<t tx="swot.20250921164454.2">@doc
[source,scss]
....
@c
@language xml
&lt;properties&gt;
    &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;
    &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;!-- 这两个版本要匹配才行 --&gt;
    &lt;spring.boot.version&gt;2.7.18&lt;/spring.boot.version&gt;
    &lt;spring.cloud.version&gt;2021.0.8&lt;/spring.cloud.version&gt;
&lt;/properties&gt;
@doc
....
</t>
<t tx="swot.20250921164454.3">@doc
[source,scss]
....
@c
@language xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;!-- Spring Boot 依赖管理 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring.boot.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;!-- Spring Cloud依赖管理 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring.cloud.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
@doc
....
</t>
<t tx="swot.20250921164454.4">&lt;dependencies&gt;
    @others
&lt;/dependencies&gt;
</t>
<t tx="swot.20250921164454.5">@doc
[source,scss]
....
@c
@language xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;!-- Spring Boot Maven插件，用于打包可执行jar --&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${spring.boot.version}&lt;/version&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
@doc
....
</t>
<t tx="swot.20250921164739.1">&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;eureka&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;!-- 加入下面各项内容 --&gt;
    @others
&lt;/project&gt;
</t>
<t tx="swot.20250921165129.1">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;
&lt;/dependency&gt;
</t>
<t tx="swot.20250921165148.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250921165831.1">@language yaml
@others
</t>
<t tx="swot.20250921165918.1" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,yaml]
----
@c
@language yaml
eureka:
  instance:
    hostname: localhost  # 2. 设置主机名为localhost
  client:
    register-with-eureka: false  # 3. Eureka Server不向自己注册
    fetch-registry: false        # 4. Eureka 自己不需要获取服务注册信息
    service-url:
      # 5. 设置 Eureka Server 的访问地址
      # defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
      # 改成需要账号和密码的形式
      defaultZone: http://${spring.security.user.name}:${spring.security.user.password}@${eureka.instance.hostname}:${server.port}/eureka/
  server:
    enable-self-preservation: true  # 6. 关闭自我保护机制（开发环境建议关闭）
@doc
----

</t>
<t tx="swot.20250921170022.1">@doc
[source,yaml]
----
@c
@language yaml
server:
  port: 8761  # 1. Eureka Server端口设置为8761（默认端口）
@doc
----
</t>
<t tx="swot.20250921170040.1" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,yaml]
----
@c
@language yaml
spring:
  application:
    name: app-eureka-center
  security:
    basic:
      enable: true  # 开启基于 HTTP basic 的认证
    user:  # 配置用户的账号信息
      name: root
      password: root
@doc
----
</t>
<t tx="swot.20250921180203.1">@language java
@others
</t>
<t tx="swot.20250921180537.1">package com.tjise.eureka.conf;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
</t>
<t tx="swot.20250921180605.1" annotate="7d71002858080000007072696f7269747971014b04580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677104580700000072656c506174687105580d000000636c656f2f707269342e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
@Configuration
@EnableWebSecurity
public class WebSecurityConfig {
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.sessionManagement()
            .sessionCreationPolicy(SessionCreationPolicy.NEVER)
            .and()
            .csrf().disable()
            .authorizeHttpRequests(authz -&gt; authz
                    .anyRequest().authenticated()
            )
            .httpBasic(Customizer.withDefaults());
        return http.build();
    }
}
@doc
----
</t>
<t tx="swot.20250921181348.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31387103752e">@language yaml
@others
@doc
****
name 和 instance 两者都有重要作用，缺一不可：

- spring.application.name：服务的逻辑名称，用于服务发现和负载均衡
- eureka.instance 配置：实例的网络地址，用于实际通信

即使使用 IP 注册，仍然需要服务名称来进行服务发现和调用。
****
</t>
<t tx="swot.20250921181657.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@language yaml
@others
</t>
<t tx="swot.20250921181657.2">@doc
[source,yaml]
----
@c
server:
    port: 8082
@doc
----
</t>
<t tx="swot.20250921181657.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@doc
[source, yaml]
----
@c
# 起个名字作为服务名称(该服务注册到 eureka 注册中心的名称，比如订单服务)
spring:
    application:
        name: app-order
@doc
----
</t>
<t tx="swot.20250921181657.4" annotate="7d71002858080000007072696f7269747971014b06580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e677104580700000072656c506174687105580d000000636c656f2f707269362e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,yaml]
----
@c
# 服务注册到 eureka 注册中心的地址
eureka:
    client:
        service-url:
            # defaultZone: http://127.0.0.1:8761/eureka/
            # 更改：加入用户名和密码
            defaultZone: http://root:root@127.0.0.1:8761/eureka/
        register-with-eureka: true  # 因为该应用为服务提供者，是 eureka 的一个客户端，需要注册到注册中心
        fetch-registry: true        # 是否需要从 eureka 上检索服务
    instance:
        prefer-ip-address: true     # 使用 IP地址 注册而不是主机名
        ip-address: 127.0.0.1       # 客户端在注册时使用自己的 IP，而不是主机名
                                    # 这是生产环境的最佳实践。避免主机名解析问题
@doc
----
</t>
<t tx="swot.20250921182054.1" annotate="7d71002858080000007072696f7269747971014b05580a000000707269736574646174657102580a000000323032352d30392d32317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677104580700000072656c506174687105580d000000636c656f2f707269352e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,yaml]
----
@c
@language yaml
### 服务注册到eureka注册中心的地址
eureka:
    client:
        service-url:
            # defaultZone: http://127.0.0.1:8761/eureka/
            # 更改：加入用户名和密码
            defaultZone: http://root:root@127.0.0.1:8761/eureka/

        ### 因为该应用为服务提供者，是 eureka 的一个客户端，需要注册到注册中心
        register-with-eureka: true
        ### 是否需要从 eureka 上检索服务
        fetch-registry: true
    instance:
        prefer-ip-address: true  # 使用IP地址注册而不是主机名
        ip-address: 127.0.0.1    # 客户端在注册时使用自己的IP，而不是主机名。
                                 # 这是生产环境的最佳实践，避免主机名解析问题。
@doc
----

</t>
<t tx="swot.20250921182058.1">@doc
[source,yaml]
----
@c
@language yaml
### 起个名字作为服务名称(该服务注册到eureka注册中心的名称，比如商品服务)
spring:
    application:
        name: app-item
@doc
----

</t>
<t tx="swot.20250921182102.1">@doc
[source,yaml]
----
@c
@language yaml
### 服务端口号(本身是一个web项目)
server:
    port: 8081
@doc
----

</t>
<t tx="swot.20250921193934.1">@language asciidoc
前面的测试发现，Eureka 服务是一个单点服务，在生产环境就会出现单点故障，为了确保 Eureka 服务的高可用，需要搭建 Eureka 服务的集群。

1. sudo vim /etc/hosts 增加 3 个主机名
+
[source,shell]
----
127.0.0.1 eureka1
127.0.0.1 eureka2
127.0.0.1 eureka3
----
2. 在 eureka 中创建 3 个配置文件: application-peer[1,2,3].yml
* defaultZone 配置多个地址在 Eureka 集群中的作用：
  ** 相互注册: 每个 Eureka Server 实例都需要知道集群中其他实例的地址，以便它们能够互相注册和同步服务注册信息。
    *** application-peer1.yml 中的这个配置告诉 eureka1 实例，它需要向 eureka2 和 eureka3 进行注册，并从它们那里获取服务注册信息。
    *** 同理，application-peer2.yml 会配置 eureka1 和 eureka3 的地址，application-peer3.yml 会配置 eureka1 和 eureka2 的地址。
  ** 高可用性: 通过相互注册，整个 Eureka 集群形成了一个去中心化的结构。即使其中一个 Eureka Server 实例宕机，其他实例仍然可以提供服务注册与发现功能，保证了服务的持续可用性。
  ** 信息同步: Eureka Server 实例之间会定期同步服务注册信息，确保所有实例上的服务列表保持一致。
  
3. 按下图在开发机器上配置 3 个 Eureka 服务的集群。
+
image::img/eureka_multi.png[]

4. 访问三个 eureka 管理端网址，查看注册情况。
+
http://localhost:8761/ | http://localhost:8762/ | http://localhost:8763/
+
.三个网址内容类似
image::img/eureka_multi_admin.png[]

TIP: 用户名: root 密码: root

5. 为了实现高可用性，service-item 和 service-order 应该像 Eureka Server 之间相互注册那样，将所有 Eureka Server 的地址都配置上。这样做可以确保即使其中一个 Eureka Server 实例宕机，服务仍然能够成功注册和发现其他服务，从而提高整个系统的可用性。
+
[source,yaml]
----
eureka:
    client:
        service-url:
            defaultZone: http://root:root@eureka1:8761/eureka/,http://root:root@eureka2:8762/eureka/,http://root:root@eureka3:8763/eureka/
        register-with-eureka: true
        fetch-registry: true
    instance:
        prefer-ip-address: true
        ip-address: 127.0.0.1
----
</t>
<t tx="swot.20250921213424.1">@doc
[source,yaml]
----
@c
@language yaml
server:
  port: 8761

spring:
  application:
    name: eureka-server-clustered
  security:
    basic:
      enable: true
    user:
      name: root
      password: root

eureka:
  instance:
    hostname: eureka1
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://root:root@eureka2:8762/eureka/,http://root:root@eureka3:8763/eureka/
  server:
    enable-self-preservation: false
    # Eureka Server 的核心配置参数，用于控制服务失效实例的清理频率 10s。
    eviction-interval-timer-in-ms: 10000
@doc
----
</t>
<t tx="swot.20250921213623.1">@doc
[source,yaml]
----
@c
@language yaml
server:
  port: 8762

spring:
  application:
    name: eureka-server-clustered
  security:
    basic:
      enable: true
    user:
      name: root
      password: root

eureka:
  instance:
    hostname: eureka2
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://root:root@eureka1:8761/eureka/,http://root:root@eureka3:8763/eureka/
  server:
    enable-self-preservation: false
    # Eureka Server 的核心配置参数，用于控制服务失效实例的清理频率 10s。
    eviction-interval-timer-in-ms: 10000
@doc
----

</t>
<t tx="swot.20250921213631.1">@doc
[source,yaml]
----
@c
@language yaml
server:
  port: 8763

spring:
  application:
    name: eureka-server-clustered
  security:
    basic:
      enable: true
    user:
      name: root
      password: root

eureka:
  instance:
    hostname: eureka3
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://root:root@eureka1:8761/eureka/,http://root:root@eureka2:8762/eureka/
  server:
    enable-self-preservation: false
    # Eureka Server 的核心配置参数，用于控制服务失效实例的清理频率 10s。
    eviction-interval-timer-in-ms: 10000
@doc
----

</t>
<t tx="swot.20250921235101.1">@language asciidoc
.创建 nginx 容器
[source,console]
----
docker run -d --name nginx \
-p 80:80 \
-p 8760:8760 \
-v ./eureka.conf:/etc/nginx/conf.d/eureka.conf \
nginx
----

NOTE: 使用命令行可以同时映射多个端口。docker desktop GUI 客户端无法映射多个端口。

***

WARNING: nginx 出现单点故障，则整个 Eureka 集群无法访问。所以这种方式用的很少。


.好好理解一下
****
- **Eureka 自己带了客户端负载均衡思想**

  - 客户端直接配置多台 `Eureka Server`，会自动轮询、重试。
  - 集群节点之间数据同步，不需要额外中间层。

- **Nginx 放在这里反而引入了单点**

  - Eureka 是 peer-to-peer 对等架构，本来就没有“主从”问题。
  - 加个 Nginx 只会让本来不需要的层变成潜在风险点。

- **现在更清楚 Nginx 的定位**

  - 它更适合放在 **网关层**（对外入口），做统一访问、鉴权、流量控制。
  - 不适合放在 **注册中心层**。
****
</t>
<t tx="swot.20250922001602.1">@doc
[source,python]
----
@c
@language python
upstream eureka-cluster {
    server host.docker.internal:8761;
    server host.docker.internal:8762;
    server host.docker.internal:8763;
}

server {
    listen 8760;
    location / {
        proxy_pass http://eureka-cluster;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
@language asciidoc
@doc
----

要让容器里的 Nginx 把请求转发到“宿主机上的 Eureka”，就得用宿主机在 Docker 网络中的地址。 +
Docker 已经预留了一个特殊 DNS 名：host.docker.internal +
它自动解析成宿主机在 Docker 网桥里的 IP。

访问 http://localhost:8760/ 会按 nginx 默认的负载均衡访问 3 台 Eureka 服务器。
</t>
<t tx="swot.20250922225939.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31387103752e">@language yaml
@others
@doc
****
name 和 instance 两者都有重要作用，缺一不可：

- spring.application.name：服务的逻辑名称，用于服务发现和负载均衡
- eureka.instance 配置：实例的网络地址，用于实际通信

即使使用 IP 注册，仍然需要服务名称来进行服务发现和调用。
****
</t>
<t tx="swot.20250922225939.2">@doc
[source,yaml]
----
@c
@language yaml
### 服务端口号(本身是一个web项目)
server:
    port: 8081
@doc
----

</t>
<t tx="swot.20250922225939.3">@doc
[source,yaml]
----
@c
@language yaml
### 起个名字作为服务名称(该服务注册到eureka注册中心的名称，比如商品服务)
spring:
    application:
        name: app-item
@doc
----

</t>
<t tx="swot.20250922225939.4" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d32327103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,yaml]
----
@c
@language yaml
### 服务注册到 eureka 注册中心的地址
eureka:
    client:
        service-url:
            # defaultZone: http://root:root@127.0.0.1:8761/eureka/
            defaultZone: http://root:root@eureka1:8761/eureka/,http://root:root@eureka2:8762/eureka/,http://root:root@eureka3:8763/eureka/
        register-with-eureka: true # 因为该应用为服务提供者，是 eureka 的一个客户端，需要注册到注册中心
        fetch-registry: true       # 是否需要从 eureka 上检索服务

    instance:
        prefer-ip-address: true    # 使用IP地址注册而不是主机名
        ip-address: 127.0.0.1      # 客户端在注册时使用自己的IP，而不是主机名。
                                   # 这是生产环境的最佳实践，避免主机名解析问题。
@doc
----
</t>
<t tx="swot.20250922225949.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@language yaml
@others
</t>
<t tx="swot.20250922225949.2">@doc
[source,yaml]
----
@c
server:
    port: 8091
@doc
----
</t>
<t tx="swot.20250922225949.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@doc
[source, yaml]
----
@c
# 起个名字作为服务名称(该服务注册到 eureka 注册中心的名称，比如订单服务)
spring:
    application:
        name: app-order
@doc
----
</t>
<t tx="swot.20250922225949.4" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d32327103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,yaml]
----
@c
# 服务注册到 eureka 注册中心的地址
eureka:
    client:
        service-url:
            # defaultZone: http://root:root@127.0.0.1:8761/eureka/
            defaultZone: http://root:root@eureka1:8761/eureka/,http://root:root@eureka2:8762/eureka/,http://root:root@eureka3:8763/eureka/
        register-with-eureka: true  # 因为该应用为服务提供者，是 eureka 的一个客户端，需要注册到注册中心
        fetch-registry: true        # 是否需要从 eureka 上检索服务
    instance:
        prefer-ip-address: true     # 使用 IP地址 注册而不是主机名
        ip-address: 127.0.0.1       # 客户端在注册时使用自己的 IP，而不是主机名
                                    # 这是生产环境的最佳实践。避免主机名解析问题
@doc
----
</t>
<t tx="swot.20250922232410.1"></t>
<t tx="swot.20250922232431.1"></t>
<t tx="swot.20250922232551.1">@language asciidoc
</t>
<t tx="swot.20250922234952.1">package com.tjise.serviceorder.service;

import com.tjise.serviceorder.pojo.Order;
import com.tjise.serviceorder.pojo.OrderDetail;
import com.tjise.serviceorder.pojo.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.io.IOException;
import java.util.*;
</t>
<t tx="swot.20250923001453.1">/**
 * 订单服务类
 * 提供订单查询功能，并通过调用商品服务获取商品详细信息
 */
@Service
public class OrderService {
    @others
}
</t>
<t tx="swot.20250923001649.1">// 使用静态Map模拟数据库存储订单数据
private static final Map&lt;String, Order&gt; ORDER_DATA = new HashMap&lt;String, Order&gt;();
// 初始化订单数据
static {
    // 模拟数据库，构造测试数据
    @others
}
</t>
<t tx="swot.20250923001803.1">// 注入商品服务，用于查询商品详细信息
@Autowired
private ItemService itemService;
/**
 * 根据订单ID查询订单数据
 * 
 * @param orderId 订单ID
 * @return Order 订单信息，包含完整的商品详情
 */
public Order queryOrderById(String orderId) throws IOException {
    // 从模拟数据库中查询订单
    Order order = ORDER_DATA.get(orderId);
    if (null == order) {
        return null;
    }
    // 获取订单详情列表
    List&lt;OrderDetail&gt; orderDetails = order.getOrderDetails();

    // 遍历订单详情，通过商品微服务查询商品详细数据
    for (OrderDetail orderDetail : orderDetails) {
        // 通过商品微服务查询商品详细数据
        Item item = itemService.queryItemById(orderDetail.getItem().getId());
        if (null == item) {
            continue;
        }
        // 将查询到的商品详细信息设置到订单详情中
        orderDetail.setItem(item);
    }
    return order;
}
</t>
<t tx="swot.20250923002048.1">Order order = new Order();
order.setOrderId("201810300001");
order.setCreateDate(new Date());
order.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order.setUserId(1L);
List&lt;OrderDetail&gt; orderDetails = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item = new Item();
item.setId(1L);
orderDetails.add(new OrderDetail(order.getOrderId(), item));

// 创建第二个商品详情
item = new Item();
item.setId(2L);
orderDetails.add(new OrderDetail(order.getOrderId(), item));

order.setOrderDetails(orderDetails);

ORDER_DATA.put(order.getOrderId(), order);
</t>
<t tx="swot.20250923002644.1">@language java
@others
</t>
<t tx="swot.20250923002644.2">package com.tjise.serviceorder.service;

import com.tjise.serviceorder.pojo.Order;
import com.tjise.serviceorder.pojo.OrderDetail;
import com.tjise.serviceorder.pojo.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.io.IOException;
import java.util.*;
</t>
<t tx="swot.20250923002644.3">@doc
[source,java]
----
@c
@language java
/**
 * 订单服务类
 * 提供订单查询功能，并通过调用商品服务获取商品详细信息
 */
@Service
public class OrderService {
    @others
}
@doc
----

</t>
<t tx="swot.20250923002644.4">@doc
[source,java]
----
@c
@language java
// 使用静态Map模拟数据库存储订单数据
private static final Map&lt;String, Order&gt; ORDER_DATA = new HashMap&lt;String, Order&gt;();
// 初始化订单数据
static {
    // 模拟数据库，构造测试数据
    @others
}
@doc
----

</t>
<t tx="swot.20250923002644.5">@doc
[source,java]
----
@c
@language java
Order order = new Order();
order.setOrderId("201810300001");
order.setCreateDate(new Date());
order.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order.setUserId(1L);
List&lt;OrderDetail&gt; orderDetails = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item = new Item();
item.setId(1L);
orderDetails.add(new OrderDetail(order.getOrderId(), item));

// 创建第二个商品详情
item = new Item();
item.setId(2L);
orderDetails.add(new OrderDetail(order.getOrderId(), item));

order.setOrderDetails(orderDetails);

ORDER_DATA.put(order.getOrderId(), order);
@doc
----

</t>
<t tx="swot.20250923002644.6" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d32377103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
Order order2 = new Order();
order2.setOrderId("201810300002");
order2.setCreateDate(new Date());
order2.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order2.setUserId(2L);
List&lt;OrderDetail&gt; orderDetails2 = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item2 = new Item();
item2.setId(3L);
orderDetails2.add(new OrderDetail(order2.getOrderId(), item2));

// 创建第二个商品详情
item2 = new Item();
item2.setId(4L);
orderDetails2.add(new OrderDetail(order2.getOrderId(), item2));

order2.setOrderDetails(orderDetails2);

ORDER_DATA.put(order2.getOrderId(), order2);
@doc
----

</t>
<t tx="swot.20250923002644.7">@doc
[source,java]
----
@c
@language java
// 注入商品服务，用于查询商品详细信息
@Autowired
private ItemService itemService;
/**
 * 根据订单ID查询订单数据
 * 
 * @param orderId 订单ID
 * @return Order 订单信息，包含完整的商品详情
 */
public Order queryOrderById(String orderId) throws IOException {
    // 从模拟数据库中查询订单
    Order order = ORDER_DATA.get(orderId);
    if (null == order) {
        return null;
    }
    // 获取订单详情列表
    List&lt;OrderDetail&gt; orderDetails = order.getOrderDetails();

    // 遍历订单详情，通过商品微服务查询商品详细数据
    for (OrderDetail orderDetail : orderDetails) {
        // 通过商品微服务查询商品详细数据
        Item item = itemService.queryItemById(orderDetail.getItem().getId());
        if (null == item) {
            continue;
        }
        // 将查询到的商品详细信息设置到订单详情中
        orderDetail.setItem(item);
    }
    return order;
}
@doc
----

</t>
<t tx="swot.20250923003436.1">[source,console]
----
http :8091/order/201810300001
----

....
HTTP/1.1 200
Connection: keep-alive
Content-Type: application/json
Date: Mon, 22 Sep 2025 16:32:37 GMT
Keep-Alive: timeout=60
Transfer-Encoding: chunked

{
    "createDate": "2025-09-22T16:30:20.174+00:00",
    "orderDetails": [
        {
            "item": {
                "desc": "商品描述1",
                "id": 1,
                "pic": "http://图片1",
                "price": 1000,
                "title": "商品1"
            },
            "orderId": "201810300001"
        },
        {
            "item": {
                "desc": "商品描述2",
                "id": 2,
                "pic": "http://图片2",
                "price": 2000,
                "title": "商品2"
            },
            "orderId": "201810300001"
        }
    ],
    "orderId": "201810300001",
    "updateDate": "2025-09-22T16:30:20.174+00:00",
    "userId": 1
}
....
</t>
<t tx="swot.20250923003556.1">停掉端口为 8761 的 eureka 服务，再测试应该还是能正常访问的。
</t>
<t tx="swot.20250923003649.1">为了防止是缓存的效果，再创建一个订单 order2，如下。
</t>
<t tx="swot.20250923003731.1">[source,console]
----
http :8091/order/201810300002
----

.测试结果说明 Eureka 高可用无问题
....
HTTP/1.1 200
Connection: keep-alive
Content-Type: application/json
Date: Mon, 22 Sep 2025 16:31:11 GMT
Keep-Alive: timeout=60
Transfer-Encoding: chunked

{
    "createDate": "2025-09-22T16:30:20.175+00:00",
    "orderDetails": [
        {
            "item": {
                "desc": "商品描述3",
                "id": 3,
                "pic": "http://图片3",
                "price": 3000,
                "title": "商品3"
            },
            "orderId": "201810300002"
        },
        {
            "item": {
                "desc": "商品描述4",
                "id": 4,
                "pic": "http://图片4",
                "price": 4000,
                "title": "商品4"
            },
            "orderId": "201810300002"
        }
    ],
    "orderId": "201810300002",
    "updateDate": "2025-09-22T16:30:20.174+00:00",
    "userId": 2
}
....
</t>
<t tx="swot.20250927165432.1">@language asciidoc
重复操作下面步骤 2 次，一共启动 3 个 service-item 实例。

.复制 service-item 配置
image::img/serviceItem_copy_config.png[]

.编辑 service-item 配置启动新端口
image::img/serviceItem_copy_config_edit_8082.png[,520]

启动 3 个实例，如下图所示：

.在 Eureka 中发现有 3 个 service-item 实例已经注册成功
image::img/three_serviceItem_in_eureka.png[]
</t>
<t tx="swot.20250928064324.1">@doc
[source,java]
----
@c
@language java
public static void main(String[] args) {
    SpringApplication.run(ServiceOrderApplication.class, args);
}
@doc
----

</t>
<t tx="swot.20250928064421.1" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d32387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
// 成员注入的方式
// @Autowired
// private ItemProperties itemProperties;

private final ItemProperties itemProperties;
// 单构造器注入，不用 @Autowired
public ServiceOrderApplication(ItemProperties itemProperties) {
    this.itemProperties = itemProperties;
}
@doc
----

</t>
<t tx="swot.20250928164633.1">下面代码使用 @Value("${server.port}") 可以获取到运行时的实际端口号，即使是在通过 Edit Configuration 传递 --server.port=8082 或 8083
参数启动多个实例的情况下。这是 Spring Boot 的一个强大功能，它会自动解析运行时的实际配置值。

现在已经修改了 ItemController，在每次请求时会打印当前处理请求的端口号。以下是简单的负载均衡测试方法：

负载均衡测试步骤：

1. 确认所有服务都已启动：
  - Eureka Server (端口 8761)
  - 3 个 service-item 实例 (端口 8081, 8082, 8083)
  - service-order (端口 8091)

2. 在 3 个 service-item 实例的控制台分别观察日志输出。

3. 通过 service-order 发起请求：

   # 重复执行以下命令，观察哪个实例在处理请求
   http :8091/order/201810300001

4. 每次执行上述命令时，观察 3 个 service-item 实例的控制台，应该会看到类似下面的日志，显示哪个端口在处理请求：

   Processing request on port: 8081 for item ID: 1
   Processing request on port: 8083 for item ID: 2
   Processing request on port: 8082 for item ID: 1

这样就能清楚地看到负载均衡在工作，请求被分发到不同的 service-item 实例上。
</t>
<t tx="swot.20250928232827.1">@language java
package com.tjise.serviceitem.controller;

import com.tjise.serviceitem.pojo.Item;
import com.tjise.serviceitem.service.ItemService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import java.util.logging.Logger;

@RestController
public class ItemController {

    @Autowired
    private ItemService itemService;
    
    @Value("${server.port}")
    private int serverPort;

    private static final Logger logger = Logger.getLogger(ItemController.class.getName());

    /**
     * 对外提供接口服务，查询商品信息
     *
     * @param id
     * @return
     */
    @GetMapping(value = "item/{id}")
    public Item queryItemById(@PathVariable("id") Long id) {
        // 增加了日志打印功能，方便查看是哪个 service-item 提供的服务。
        logger.info("Handling request on port: " + serverPort + " for item ID: " + id);
        System.out.println("Processing request on port: " + serverPort + " for item ID: " + id);
        return this.itemService.queryItemById(id);
    }
}
</t>
<t tx="swot.20250928233710.1"></t>
<t tx="swot.20250928233840.1"></t>
<t tx="swot.20250929000751.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@language java
@others
</t>
<t tx="swot.20250929000751.2">package com.tjise.serviceorder.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.tjise.serviceorder.pojo.Item;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.ServiceInstance;
import org.springframework.cloud.client.loadbalancer.LoadBalancerClient;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import java.io.IOException;
</t>
<t tx="swot.20250929000751.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@doc
[source,java]
----
@c
@language java
// 根据商品 ID 查询商品信息：通过 REST 调用商品微服务获取商品详细数据
@Service
public class ItemService {  // 商品服务类
    @Autowired
    private RestTemplate restTemplate;
    // 包含其他代码
    @others
}
@language asciidoc
@doc
----
</t>
<t tx="swot.20250929000751.4" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d32397103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
public Item queryItemById(Long id) {

    // 获取实际被选择的实例
    ServiceInstance serviceInstance = loadBalancerClient.choose("app-item");
    if (serviceInstance != null) {
        // String targetUrl = serviceInstance.getUri().toString() + "/item/" + id;
        // logger.info("Load Balancer: Requesting instance at " +
                // serviceInstance.getHost() + ":" + serviceInstance.getPort() +
                // " for item ID: " + id);
        System.out.println("负载均衡选择了端口: " + serviceInstance.getPort());
    }

    // restTemplate 会自动应用负载均衡，上面的实例选取只是为了能演示出负载均衡的策略。
    Item item = restTemplate.getForObject(
            "http://app-item/item/" + id, Item.class);  // &lt;1&gt;

    // logger.info("Load Balancer: Got response fro item ID: " + id +
                // ", result: " + (item != null ? "SUCCESS" : "FAILED"));
    return item;
}
@language asciidoc
@doc
----

&lt;1&gt; app-item 是 service-item 在 Eureka 中注册的服务名。
</t>
<t tx="swot.20250929000751.5" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32397103752e">@doc
[source,java]
----
@c
@language java
@Autowired
private LoadBalancerClient loadBalancerClient;

public Item queryItemByIdWithOkHttpClient(Long id) throws IOException {
    // 使用 LoadBalancerClient 获取负载均衡的实例
    ServiceInstance instance = loadBalancerClient.choose("app-item");
    String actualUrl = "http://" + instance.getHost() + ":" + instance.getPort() + "/item/" + id;
    Request request = new Request.Builder().url(actualUrl).build();
    try (Response response = okHttpClient.newCall(request).execute()) {  // 执行 OkHttpClient 调用
        String json = response.body().string();  // 读取响应体
        // 使用注入的 objectMapper 反序列化成 JSON 字符串
        return objectMapper.readValue(json, Item.class);
    }
}
@doc
----

</t>
<t tx="swot.20250929000751.6">@doc
[source,java]
----
@c
@language java
public Item queryItemByIdWithWebClient(Long id) {
    return webClient.get()
                    .uri("/{id}", id)
                    .retrieve()
                    .bodyToMono(Item.class)
                    .block();  // 在同步方法中使用 block
}
@doc
----
</t>
<t tx="swot.20250929114654.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d33307103752e"></t>
<t tx="swot.20250929155909.1">@language asciidoc
在微服务架构中通常会有多个服务层调用，基础服务的故障可能会导致级联故障，进而造成整个系统不可用的情况，这种现象被称为服务雪崩效应。

服务雪崩效应是一种因“服务提供者”的不可用导致“服务消费者”的不可用，并将不可用逐渐放大的过程。

如下图所示：A 作为服务提供者，B 为 A 的服务消费者，C 和 D 是 B 的服务消费者。A 不可用引起了 B 的不可用，并将不可用像滚雪球一样放大到 C 和 D 时，雪崩效应就形成了。

image::img/avalanche.png[,600]
</t>
<t tx="swot.20250929172607.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d33307103752e">IMPORTANT: 我们是启了负载均衡的，所以不能使用注解的方式来使用 queryItemByIdFallback，会被负载均衡给拦截掉。
只能使用手动通过 circuitBreakerRegistry 的方式来启用断路器 Resilience4j，这点要注意了。因为通过多次调试发现，Resilience4j 不起作用的原因就在这儿了。
</t>
<t tx="swot.20250930135119.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d33307103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;io.github.resilience4j&lt;/groupId&gt;
    &lt;artifactId&gt;resilience4j-spring-boot2&lt;/artifactId&gt;
    &lt;version&gt;1.7.0&lt;/version&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250930135203.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
@others
</t>
<t tx="swot.20250930135203.2">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;

    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-order&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-order&lt;/name&gt;
    &lt;description&gt;service-order&lt;/description&gt;
    @others
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</t>
<t tx="swot.20250930135203.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32307103752e">@doc
[source,scss]
....
@c
@language xml
&lt;properties&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;spring-cloud.version&gt;2021.0.8&lt;/spring-cloud.version&gt;
&lt;/properties&gt;
@doc
....
</t>
<t tx="swot.20250930135203.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32307103752e">@doc
[source,scss]
....
@c
@language xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring-cloud.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
@doc
....
</t>
<t tx="swot.20250930135203.5">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;!-- Lombok --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
        &lt;artifactId&gt;lombok&lt;/artifactId&gt;
        &lt;optional&gt;true&lt;/optional&gt;
    &lt;/dependency&gt;
    @others
&lt;/dependencies&gt;
</t>
<t tx="swot.20250930135203.6" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 使用 Spring Boot 管理的版本： --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;
    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250930135203.7" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,scss]
....
@c
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250930135203.8" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31387103752e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 添加 Eureka 客户端依赖, 用于将服务注册到 Eureka --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20251001083156.1" annotate="7d71002858080000007072696f7269747971014b04580a000000707269736574646174657102580a000000323032352d31302d30317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677104580700000072656c506174687105580d000000636c656f2f707269342e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
/**
 * 断路器降级方法
 * @param id 商品 ID
 * @param throwable 抛出的异常
 * @return 降级后的默认商品信息
 */
public Item queryItemByIdFallback(Long id, Throwable throwable) {
    System.out.println("=======CircuitBreaker 降级处理，原因：" + throwable.getMessage());
    return new Item(id, "查询商品信息出错", null, null, null);
}
@doc
----

</t>
<t tx="swot.20251001084921.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@language yaml
@others
</t>
<t tx="swot.20251001084921.2">@doc
[source,yaml]
----
@c
server:
    port: 8091
@doc
----
</t>
<t tx="swot.20251001084921.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@doc
[source, yaml]
----
@c
# 起个名字作为服务名称(该服务注册到 eureka 注册中心的名称，比如订单服务)
spring:
    application:
        name: app-order
@doc
----
</t>
<t tx="swot.20251001084921.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32327103752e">@doc
[source,yaml]
----
@c
# 服务注册到 eureka 注册中心的地址
eureka:
    client:
        service-url:
            # defaultZone: http://root:root@127.0.0.1:8761/eureka/
            defaultZone: http://root:root@eureka1:8761/eureka/,http://root:root@eureka2:8762/eureka/,http://root:root@eureka3:8763/eureka/
        register-with-eureka: true  # 因为该应用为服务提供者，是 eureka 的一个客户端，需要注册到注册中心
        fetch-registry: true        # 是否需要从 eureka 上检索服务
    instance:
        prefer-ip-address: true     # 使用 IP地址 注册而不是主机名
        ip-address: 127.0.0.1       # 客户端在注册时使用自己的 IP，而不是主机名
                                    # 这是生产环境的最佳实践。避免主机名解析问题
@doc
----
</t>
<t tx="swot.20251001085142.1" annotate="7d71002858080000007072696f7269747971014b04580a000000707269736574646174657102580a000000323032352d31302d30317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677104580700000072656c506174687105580d000000636c656f2f707269342e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,yaml]
----
@c
@language yaml
resilience4j:
  circuitbreaker:
    instances:
      OrderService:
        sliding-window-size: 5                  # 需要 5次调用来计算失败率
        failure-rate-threshold: 50              # 50% 失败率才跳闸
        wait-duration-in-open-state: 10s        # 10 秒后进入半开状态
        permitted-number-of-calls-in-half-open-state: 2     # 半开状态允许 2 次调用
        sliding-window-type: COUNT_BASED        # 基于调用次数
        record-exceptions:                      # 哪些异常算失败
          - org.springframework.web.reactive.function.client.WebClientResponseException
          - java.lang.RuntimeException
          - java.io.IOException
        ignore-exceptions:                      # 忽略的异常类型
          - java.lang.IllegalArgumentException
@doc
----

NOTE: 实际生产要宽松一些的。

[caption=]
测试 vs 生产
[cols="1,1,1",options="header"]
|===
| 场景    | 测试配置 | 生产配置
| 窗口大小 | 5 次调用 | 100次调用
| 故障阈值 | 50%     | 75%
| 恢复时间 | 10 秒   | 60秒
| 目的    | 快速验证 | 稳定运行
|===
</t>
<t tx="swot.20251001091156.1">@language asciidoc
测试步骤：

1. 启动 Eureka 服务注册中心
2. 启动 service-item 服务（也可以不启动）
3. 启动 service-order 服务
4. 关闭 service-item 服务（这样调用会失败）
5. 调用 order 服务的相关接口
+
[source,console]
----
http :8091/order/201810300001
----

5. 重复调用几次（超过 failure-rate-threshold 设置的阈值）

6. 观察日志输出，应该会看到降级方法被调用
+
.输出结果如下
....
2025-10-01 17:17:40.308  INFO 4711 --- [nio-8091-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2025-10-01 17:17:40.309  INFO 4711 --- [nio-8091-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
=== 断路器状态: CLOSED ===
=== 断路器失败率: -1.0 ===
=== 断路器调用次数: 0 ===
2025-10-01 17:17:40.437  WARN 4711 --- [nio-8091-exec-1] o.s.c.l.core.RoundRobinLoadBalancer      : No servers available for service: app-item
2025-10-01 17:17:40.438  WARN 4711 --- [nio-8091-exec-1] eactorLoadBalancerExchangeFilterFunction : LoadBalancer does not contain an instance for the service app-item
=== 断路器抛出异常: ServiceUnavailable - 503 Service Unavailable from UNKNOWN  ===
=======CircuitBreaker 降级处理，原因：503 Service Unavailable from UNKNOWN 
=== 断路器状态: CLOSED ===
=== 断路器失败率: -1.0 ===
=== 断路器调用次数: 1 ===
2025-10-01 17:17:40.478  WARN 4711 --- [nio-8091-exec-1] o.s.c.l.core.RoundRobinLoadBalancer      : No servers available for service: app-item
2025-10-01 17:17:40.478  WARN 4711 --- [nio-8091-exec-1] eactorLoadBalancerExchangeFilterFunction : LoadBalancer does not contain an instance for the service app-item
=== 断路器抛出异常: ServiceUnavailable - 503 Service Unavailable from UNKNOWN  ===
=======CircuitBreaker 降级处理，原因：503 Service Unavailable from UNKNOWN 
=== 断路器状态: CLOSED ===
=== 断路器失败率: -1.0 ===
=== 断路器调用次数: 2 ===
2025-10-01 17:18:04.135  WARN 4711 --- [nio-8091-exec-3] o.s.c.l.core.RoundRobinLoadBalancer      : No servers available for service: app-item
2025-10-01 17:18:04.135  WARN 4711 --- [nio-8091-exec-3] eactorLoadBalancerExchangeFilterFunction : LoadBalancer does not contain an instance for the service app-item
=== 断路器抛出异常: ServiceUnavailable - 503 Service Unavailable from UNKNOWN  ===
=======CircuitBreaker 降级处理，原因：503 Service Unavailable from UNKNOWN 
=== 断路器状态: CLOSED ===
=== 断路器失败率: -1.0 ===
=== 断路器调用次数: 3 ===
2025-10-01 17:18:04.136  WARN 4711 --- [nio-8091-exec-3] o.s.c.l.core.RoundRobinLoadBalancer      : No servers available for service: app-item
2025-10-01 17:18:04.136  WARN 4711 --- [nio-8091-exec-3] eactorLoadBalancerExchangeFilterFunction : LoadBalancer does not contain an instance for the service app-item
=== 断路器抛出异常: ServiceUnavailable - 503 Service Unavailable from UNKNOWN  ===
=======CircuitBreaker 降级处理，原因：503 Service Unavailable from UNKNOWN 
=== 断路器状态: CLOSED ===
=== 断路器失败率: -1.0 ===
=== 断路器调用次数: 4 ===
2025-10-01 17:18:10.612  WARN 4711 --- [nio-8091-exec-5] o.s.c.l.core.RoundRobinLoadBalancer      : No servers available for service: app-item
2025-10-01 17:18:10.612  WARN 4711 --- [nio-8091-exec-5] eactorLoadBalancerExchangeFilterFunction : LoadBalancer does not contain an instance for the service app-item
=== 断路器抛出异常: ServiceUnavailable - 503 Service Unavailable from UNKNOWN  ===
=======CircuitBreaker 降级处理，原因：503 Service Unavailable from UNKNOWN 
=== 断路器状态: OPEN ===  --&gt; 断路器已经是打开状态了
=== 断路器失败率: 100.0 ===
=== 断路器调用次数: 5 ===  --&gt; 第 5 次才开始计算的
=== 断路器抛出异常: CallNotPermittedException - CircuitBreaker 'OrderService' is OPEN and does not permit further calls ===
=======CircuitBreaker 降级处理，原因：CircuitBreaker 'OrderService' is OPEN and does not permit further calls
--&gt; 不会进行实际的网络调用了，断路器直接返回降级结果
=== 断路器状态: OPEN ===
=== 断路器失败率: 100.0 ===
=== 断路器调用次数: 5 ===
2025-10-01 17:18:37.444  WARN 4711 --- [nio-8091-exec-7] o.s.c.l.core.RoundRobinLoadBalancer      : No servers available for service: app-item
2025-10-01 17:18:37.444  WARN 4711 --- [nio-8091-exec-7] eactorLoadBalancerExchangeFilterFunction : LoadBalancer does not contain an instance for the service app-item
=== 断路器抛出异常: ServiceUnavailable - 503 Service Unavailable from UNKNOWN  ===
=======CircuitBreaker 降级处理，原因：503 Service Unavailable from UNKNOWN 
=== 断路器状态: HALF_OPEN ===  --&gt; 10s 以后断路器就变成半开状态，且允许 2 次实际的网络调用，可以看见负载均衡又起作用了。
=== 断路器失败率: -1.0 ===
=== 断路器调用次数: 1 ===
2025-10-01 17:18:37.446  WARN 4711 --- [nio-8091-exec-7] o.s.c.l.core.RoundRobinLoadBalancer      : No servers available for service: app-item
2025-10-01 17:18:37.446  WARN 4711 --- [nio-8091-exec-7] eactorLoadBalancerExchangeFilterFunction : LoadBalancer does not contain an instance for the service app-item
=== 断路器抛出异常: ServiceUnavailable - 503 Service Unavailable from UNKNOWN  ===
=======CircuitBreaker 降级处理，原因：503 Service Unavailable from UNKNOWN 
=== 断路器状态: OPEN ===
=== 断路器失败率: 100.0 ===  --&gt; 2 次调用都失败了，断路器又打开了
=== 断路器调用次数: 2 ===
2025-10-01 17:19:07.312  WARN 4711 --- [nio-8091-exec-9] o.s.c.l.core.RoundRobinLoadBalancer      : No servers available for service: app-item
2025-10-01 17:19:07.312  WARN 4711 --- [nio-8091-exec-9] eactorLoadBalancerExchangeFilterFunction : LoadBalancer does not contain an instance for the service app-item
=== 断路器抛出异常: ServiceUnavailable - 503 Service Unavailable from UNKNOWN  ===
=======CircuitBreaker 降级处理，原因：503 Service Unavailable from UNKNOWN 
=== 断路器状态: HALF_OPEN ===  --&gt; 10s 以后又变成了半开状态，如此反复吧......
=== 断路器失败率: -1.0 ===
=== 断路器调用次数: 1 ===
....

这个日志完美展示了：

- ✅ 断路器状态管理：CLOSED → OPEN → HALF_OPEN
- ✅ 阈值触发机制： 失败率达到50%时跳闸
- ✅ 自动恢复尝试： 定期试探服务可用性
- ✅ 性能优化：OPEN状态时避免无效调用

断路器完全按照设计工作，在系统层面提供了有效的故障保护和自动恢复机制！
</t>
<t tx="swot.20251001110527.1">@language java
@others
</t>
<t tx="swot.20251001110527.2">package com.tjise.serviceorder.service;

import com.tjise.serviceorder.pojo.Order;
import com.tjise.serviceorder.pojo.OrderDetail;
import com.tjise.serviceorder.pojo.Item;
import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.io.IOException;
import java.util.*;
</t>
<t tx="swot.20251001110527.3">@doc
[source,java]
----
@c
@language java
/**
 * 订单服务类
 * 提供订单查询功能，并通过调用商品服务获取商品详细信息
 */
@Service
public class OrderService {

    @Autowired
    private CircuitBreakerRegistry circuitBreakerRegistry;

    @others
}
@doc
----

</t>
<t tx="swot.20251001110527.4">// 使用静态Map模拟数据库存储订单数据
private static final Map&lt;String, Order&gt; ORDER_DATA = new HashMap&lt;String, Order&gt;();
// 初始化订单数据
static {
    // 模拟数据库，构造测试数据
    @others
}
</t>
<t tx="swot.20251001110527.5">Order order = new Order();
order.setOrderId("201810300001");
order.setCreateDate(new Date());
order.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order.setUserId(1L);
List&lt;OrderDetail&gt; orderDetails = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item = new Item();
item.setId(1L);
orderDetails.add(new OrderDetail(order.getOrderId(), item));

// 创建第二个商品详情
item = new Item();
item.setId(2L);
orderDetails.add(new OrderDetail(order.getOrderId(), item));

order.setOrderDetails(orderDetails);

ORDER_DATA.put(order.getOrderId(), order);
</t>
<t tx="swot.20251001110527.6" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32377103752e">Order order2 = new Order();
order2.setOrderId("201810300002");
order2.setCreateDate(new Date());
order2.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order2.setUserId(2L);
List&lt;OrderDetail&gt; orderDetails2 = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item2 = new Item();
item2.setId(3L);
orderDetails2.add(new OrderDetail(order2.getOrderId(), item2));

// 创建第二个商品详情
item2 = new Item();
item2.setId(4L);
orderDetails2.add(new OrderDetail(order2.getOrderId(), item2));

order2.setOrderDetails(orderDetails2);

ORDER_DATA.put(order2.getOrderId(), order2);
</t>
<t tx="swot.20251001110527.7" annotate="7d71002858080000007072696f7269747971014b05580a000000707269736574646174657102580a000000323032352d31302d30317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677104580700000072656c506174687105580d000000636c656f2f707269352e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
// 注入商品服务，用于查询商品详细信息
@Autowired
private ItemService itemService;
/**
 * 根据订单ID查询订单数据
 * 
 * @param orderId 订单ID
 * @return Order 订单信息，包含完整的商品详情
 */
public Order queryOrderById(String orderId) throws IOException {
    // 从模拟数据库中查询订单
    Order order = ORDER_DATA.get(orderId);
    if (null == order) {
        return null;
    }
    // 获取订单详情列表
    List&lt;OrderDetail&gt; orderDetails = order.getOrderDetails();

    // 遍历订单详情，通过商品微服务查询商品详细数据
    for (OrderDetail orderDetail : orderDetails) {
        // 通过商品微服务查询商品详细数据
        try {
            Item item = queryItemByIdWithCircuitBreaker(orderDetail.getItem().getId());
            if (null == item) {
                continue;
            }
            // 将查询到的商品详细信息设置到订单详情中
            orderDetail.setItem(item);
        } catch (Exception e) {
            // 如果断路器抛出异常，使用降级商品
            // 注意：这里不再打印日志，因为 queryItemByIdWithCircuitBreaker 中已经处理了异常
            Item fallbackItem = queryItemByIdFallback(orderDetail.getItem().getId(), e);
            orderDetail.setItem(fallbackItem);
        }
    }
    return order;
}
@doc
----
</t>
<t tx="swot.20251001115941.1" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d31302d30317103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
// name 对应 application.yml 中的配置
public Item queryItemByIdWithCircuitBreaker(Long id) {
    CircuitBreaker circuitBreaker = circuitBreakerRegistry.circuitBreaker("OrderService");
    System.out.println("=== 断路器状态: " + circuitBreaker.getState() + " ===");
    System.out.println("=== 断路器失败率: " + circuitBreaker.getMetrics().getFailureRate() + " ===");
    System.out.println("=== 断路器调用次数: " + circuitBreaker.getMetrics().getNumberOfBufferedCalls() + " ===");

    try {
        Item result = circuitBreaker.executeSupplier(() -&gt; itemService.queryItemByIdWithWebClient(id));
        System.out.println("=== WebClient 调用成功 ===");
        return result;
    } catch (Exception e) {
        System.out.println("=== 断路器抛出异常: " + e.getClass().getSimpleName() + " - " + e.getMessage() + " ===");
        throw e;
    }
}
@doc
----

</t>
<t tx="swot.20251001180733.1">private final WebClient webClient;
private final OkHttpClient okHttpClient;
private final ObjectMapper objectMapper;  // 可支持 json 序列化

// 单个构造方法注入
public ItemService(
        WebClient webClient,
        @Autowired(required = false) OkHttpClient okHttpClient,
        @Autowired(required = false) ObjectMapper objectMapper) {
    this.webClient = webClient;
    this.okHttpClient = okHttpClient;
    this.objectMapper = objectMapper;
}
System.out.println("Hello World!");</t>
<t tx="swot.20251001212305.1">@language asciidoc
虽然使用了 WebClient 或 RestTemplate + @LoadBalanced + Resilience4j 可以实现负载均衡和容错处理，但是这个编码在实现大量业务时会显得太过于冗余（如，多参数的URL拼接）。

思考：有没有更加优雅的实现呢？有，那就是 Feign。
</t>
<t tx="swot.20251002073143.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
@others
</t>
<t tx="swot.20251002073143.2">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;

    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-order&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-order&lt;/name&gt;
    &lt;description&gt;service-order&lt;/description&gt;
    @others
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</t>
<t tx="swot.20251002073143.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32307103752e">@doc
[source,scss]
....
@c
@language xml
&lt;properties&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;spring-cloud.version&gt;2021.0.8&lt;/spring-cloud.version&gt;
&lt;/properties&gt;
@doc
....
</t>
<t tx="swot.20251002073143.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32307103752e">@doc
[source,scss]
....
@c
@language xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring-cloud.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
@doc
....
</t>
<t tx="swot.20251002073143.5">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;!-- Lombok --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
        &lt;artifactId&gt;lombok&lt;/artifactId&gt;
        &lt;optional&gt;true&lt;/optional&gt;
    &lt;/dependency&gt;
    @others
&lt;/dependencies&gt;
</t>
<t tx="swot.20251002073143.6" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 使用 Spring Boot 管理的版本： --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;
    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20251002073143.7" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,scss]
....
@c
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20251002073143.8" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31387103752e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 添加 Eureka 客户端依赖, 用于将服务注册到 Eureka --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20251002073143.9" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d33307103752e">@doc
[source,scss]
....
@c
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;io.github.resilience4j&lt;/groupId&gt;
    &lt;artifactId&gt;resilience4j-spring-boot2&lt;/artifactId&gt;
    &lt;version&gt;1.7.0&lt;/version&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20251002073248.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d31302d30327103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20251002084839.1">1. 基本概念差异
+
Feign:

- 是一个声明式的 Web 服务客户端
- 通过注解驱动，将 HTTP 请求抽象为接口方法
- 本质上是对 HTTP 客户端的高层次封装
- 专注于微服务间的通信

+
WebClient/RestTemplate:

- 是底层的 HTTP 客户端工具
- RestTemplate 是同步阻塞的
- WebClient 是响应式异步的
- 提供基础的 HTTP 操作能力

2. 关系梳理
+
实际上，Feign 与其他工具的关系是：Feign 是一个抽象层，它可以使用不同的底层 HTTP 客户端实现：

- 默认使用 HttpURLConnection
- 可以配置使用 Apache HttpClient
- 可以配置使用 OkHttp
- 甚至可以与 WebClient 集成

但是，Feign 不能直接使用 RestTemplate 或 WebClient 作为其底层实现，因为它们的设计理念不同。
</t>
<t tx="swot.20251002084926.1">Feign 专为微服务设计:

- 与 Eureka、LoadBalancer 无缝集成
- 内置负载均衡支持
- 提供声明式服务调用
- 天然支持熔断器模式

WebClient/RestTemplate 需要额外配置:

- RestTemplate: 需要 @LoadBalanced 注解与服务发现集成
- WebClient: 需要手动配置与 LoadBalancer 的集成
- 都需要额外配置熔断机制
</t>
<t tx="swot.20251002085120.1">@language asciidoc
</t>
<t tx="swot.20251002085138.1"></t>
<t tx="swot.20251002124215.1">@language asciidoc
Feign 优势:

1. 声明式接口: 代码简洁，像调用本地方法
2. 开箱即用: 自动集成负载均衡、熔断器
3. 微服务友好的: 与 Spring Cloud 生态无缝集成
4. 配置简单: 通过注解和配置文件即可完成大部分配置

WebClient/RestTemplate 优势:

1. 灵活性: 完全控制 HTTP 请求的每个细节
2. 通用性: 不仅适用于微服务，也适用于一般 HTTP 客户端场景
3. 响应式: WebClient 支持非阻塞异步编程
4. 性能: 底层控制，理论上性能更高

关系总结:

- Feign 是面向微服务的高级抽象层
- WebClient/RestTemplate 是通用的底层 HTTP 客户端
- 三者解决的问题层次不同
- Feign 自动处理了很多微服务特有的问题（负载均衡、熔断等）
- WebClient/RestTemplate 需要手动配置这些微服务特性

在你的 Spring Cloud 微服务项目中，Feign 提供了更优雅的解决方案，减少了样板代码，让开发者更专注于业务逻辑。

总的来说，Feign 与 WebClient/RestTemplate 并不是直接竞争关系，而是解决不同层次问题的工具。Feign 更专注于微服务间的声明式通信，而 WebClient/RestTemplate 是更通用的 HTTP 客户端工具。在微服务架构中，Feign 提供了更高层次的抽象和更好的开发体验。
</t>
<t tx="swot.20251003055927.1">[source,java]
----
@language java
@Service
public class ItemService {

    @Autowired
    private RestTemplate restTemplate;

    public Item queryItemById(Long id) {
        Item item = restTemplate.getForObject(
                "http://app-item/item/" + id, Item.class);
        return item;
    }
}
----
</t>
<t tx="swot.20251003060826.1">[source,java]
----
@language java
@Service
public class ItemService {

    private final WebClient webClient;

    // 单构造器注入
    public ItemService(WebClient webClient) {
        this.webClient = webClient;
    }

    public Item queryItemByIdWithWebClient(Long id) {
        return webClient.get()
            .uri("/{id}", id)
            .retrieve()
            .bodyToMono(Item.class)  // 类似于 js Promise
            .block();
    }
}
----
</t>
<t tx="swot.20251003061811.1">@doc
先展示一下，具体内容参后面详细步骤。注意：这是发送请求哟！

[source,java]
----
@c
@language java
// 要访问在 Eureka 中的服务名，并指定实现该接口的降级类名
@FeignClient(name = "app-item", fallback = ItemFallback.class)
public interface ItemFeignClient {
    @GetMapping("/item/{id}")
    Item queryItemById(@PathVariable("id") Long id);
}
@doc
----

</t>
<t tx="swot.20251003062053.1" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d31302d30337103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceorder.client;

import com.tjise.serviceorder.pojo.Item;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

@FeignClient(name = "app-item")  // 要访问的在 Eureka 中的服务名
public interface ItemFeignClient {
    @GetMapping("/item/{id}")
    Item queryItemById(@PathVariable("id") Long id);
}
@doc
----
</t>
<t tx="swot.20251003062357.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@language java
@others
</t>
<t tx="swot.20251003062357.2">package com.tjise.serviceorder;

import com.tjise.serviceorder.utils.ItemProperties;
import okhttp3.OkHttpClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.loadbalancer.LoadBalanced;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
import org.springframework.cloud.openfeign.EnableFeignClients;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;
import java.util.concurrent.TimeUnit;
</t>
<t tx="swot.20251003062357.3" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d31302d30337103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
/**
 * 订单服务启动类，Spring Boot 应用程序入口点。
 */
@SpringBootApplication
@EnableEurekaClient  // 启用 Eureka 客户端功能
@EnableFeignClients  // --- New Added --- 会初始化和配置 feign
public class ServiceOrderApplication {
    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }
    // 包含其他代码
    @others
}
@doc
----

.负载均衡使用拦截器原理：
****
1. 拦截请求URL
2. 识别服务名
3. 通过服务发现获取实际地址
4. 替换URL并发起请求
****
</t>
<t tx="swot.20251003062357.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@doc
[source,java]
----
@c
/**
 * 创建 RestTemplate 实例，用于调用其他微服务。
 * @return RestTemplate
 */
@Bean
@LoadBalanced // new -&gt; 使用负载均衡
public RestTemplate restTemplate() {
    // 可以在这里添加拦截器来统一处理URL前缀
    // return new RestTemplate();  // not use OkHttp
    return new RestTemplate(
           new OkHttp3ClientHttpRequestFactory());  // use OkHttp
}
@doc
----
</t>
<t tx="swot.20251003062357.5" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@doc
[source,java]
----
@c
@Bean
// @LoadBalanced  // OkHttpClient 不支持负载均衡，在这儿写该注解没用。
public OkHttpClient okHttpClient() {
    return new OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build();
}
@doc
----

</t>
<t tx="swot.20251003062357.6" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31397103752e">@doc
@nowrap
[source,java]
----
@c
// 配置负载均衡的 WebClient.Builder
@Bean
@LoadBalanced // new -&gt; 使用负载均衡
public WebClient.Builder loadBalancedWebClientBuilder() {
    return WebClient.builder();
}

// 使用 Builder 创建 WebClient
@Bean
public WebClient webClient(WebClient.Builder builder) {
    return builder
        .baseUrl("http://app-item/item")  // 使用 eureka 注册中心调用(去注册中心查找服务 app-item，这种方式必须先开启负载均衡 @LoadBalanced)
        .build();
}
@doc
----

.总结
****
WebClient 也需要使用 @LoadBalanced 注解，但需要注解在 WebClient.Builder 上，而不是 WebClient 实例上。
这与 WebClient 的设计有关：

- WebClient 是不可变的（immutable）
- WebClient.Builder 是可变的，用于构建 WebClient 实例
- Spring Cloud 需要在 Builder 层面注入负载均衡能力

这样设计是为了与 WebClient 的不可变性设计保持一致，同时也提供了更灵活的配置方式。
****
</t>
<t tx="swot.20251003073646.1">@language java
@others
</t>
<t tx="swot.20251003073646.2">package com.tjise.serviceorder.service;

import com.tjise.serviceorder.client.ItemFeignClient;
import com.tjise.serviceorder.pojo.Order;
import com.tjise.serviceorder.pojo.OrderDetail;
import com.tjise.serviceorder.pojo.Item;
import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.io.IOException;
import java.util.*;
</t>
<t tx="swot.20251003073646.3" annotate="7d71002858080000007072696f7269747971014b04580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677104580700000072656c506174687105580d000000636c656f2f707269342e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
/**
 * 订单服务类
 * 提供订单查询功能，并通过调用商品服务获取商品详细信息
 */
@Service
public class OrderService {

    @Autowired
    private CircuitBreakerRegistry circuitBreakerRegistry;

    @Autowired
    ItemFeignClient itemFeignClient;  // --- New Added ---

    @others
}
@doc
----
</t>
<t tx="swot.20251003073646.4">// 使用静态Map模拟数据库存储订单数据
private static final Map&lt;String, Order&gt; ORDER_DATA = new HashMap&lt;String, Order&gt;();
// 初始化订单数据
static {
    // 模拟数据库，构造测试数据
    @others
}
</t>
<t tx="swot.20251003073646.5">Order order = new Order();
order.setOrderId("201810300001");
order.setCreateDate(new Date());
order.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order.setUserId(1L);
List&lt;OrderDetail&gt; orderDetails = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item = new Item();
// item.setId(1L);
item.setId(1L);
orderDetails.add(new OrderDetail(order.getOrderId(), item));

// 创建第二个商品详情
item = new Item();
item.setId(2L);
orderDetails.add(new OrderDetail(order.getOrderId(), item));

order.setOrderDetails(orderDetails);

ORDER_DATA.put(order.getOrderId(), order);
</t>
<t tx="swot.20251003073646.6" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32377103752e">Order order2 = new Order();
order2.setOrderId("201810300002");
order2.setCreateDate(new Date());
order2.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order2.setUserId(2L);
List&lt;OrderDetail&gt; orderDetails2 = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item2 = new Item();
item2.setId(3L);
orderDetails2.add(new OrderDetail(order2.getOrderId(), item2));

// 创建第二个商品详情
item2 = new Item();
item2.setId(4L);
orderDetails2.add(new OrderDetail(order2.getOrderId(), item2));

order2.setOrderDetails(orderDetails2);

ORDER_DATA.put(order2.getOrderId(), order2);
</t>
<t tx="swot.20251003073646.7" annotate="7d71002858080000007072696f7269747971014b06580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e677104580700000072656c506174687105580d000000636c656f2f707269362e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
// name 对应 application.yml 中的配置
public Item queryItemByIdWithCircuitBreaker(Long id) {
    CircuitBreaker circuitBreaker = circuitBreakerRegistry
            .circuitBreaker("OrderService");
    System.out.println("=== 断路器状态: " + 
            circuitBreaker.getState());
    System.out.println("=== 断路器失败率: " + 
            circuitBreaker.getMetrics().getFailureRate());
    System.out.println("=== 断路器调用次数: " + 
            circuitBreaker.getMetrics().getNumberOfBufferedCalls());

    try {
        // 这是之前使用 WebClient 的方式
        // Item result = circuitBreaker.executeSupplier(
            // () -&gt; itemService.queryItemByIdWithWebClient(id));

        // 启用断路器
        Item result = circuitBreaker.executeSupplier(
            () -&gt; itemFeignClient.queryItemById(id)  // 使用 feign
        );
        System.out.println("result:" + result);
        return result;
    }
    catch (Exception e) {
        System.out.println("=== 断路器抛出异常: " +
                e.getClass().getSimpleName() + 
                " - " + e.getMessage());
        throw e;
    }
}
@doc
----
</t>
<t tx="swot.20251003073646.8" annotate="7d71002858080000007072696f7269747971014b07580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269372e706e677104580700000072656c506174687105580d000000636c656f2f707269372e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
/**
 * 断路器降级方法
 * @param id 商品 ID
 * @param throwable 抛出的异常
 * @return 降级后的默认商品信息
 */
public Item queryItemByIdFallback(Long id, Throwable throwable) {
    System.out.println("=======CircuitBreaker 降级处理，原因：" + throwable.getMessage());
    return new Item(id, "查询商品信息出错", null, null, null);
}
@doc
----

</t>
<t tx="swot.20251003073646.9" annotate="7d71002858080000007072696f7269747971014b08580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269382e706e677104580700000072656c506174687105580d000000636c656f2f707269382e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
// 注入商品服务，用于查询商品详细信息
@Autowired
private ItemService itemService;
/**
 * 根据订单ID查询订单数据
 * 
 * @param orderId 订单ID
 * @return Order 订单信息，包含完整的商品详情
 */
public Order queryOrderById(String orderId) throws IOException {
    // 从模拟数据库中查询订单
    Order order = ORDER_DATA.get(orderId);
    if (null == order) {
        return null;
    }
    // 获取订单详情列表
    List&lt;OrderDetail&gt; orderDetails = order.getOrderDetails();

    // 遍历订单详情，通过商品微服务查询商品详细数据
    for (OrderDetail orderDetail : orderDetails) {
        // 通过商品微服务查询商品详细数据
        try {
            Item item = queryItemByIdWithCircuitBreaker(
                orderDetail.getItem().getId()
            );
            if (null == item) {
                continue;
            }
            // 将查询到的商品详细信息设置到订单详情中
            orderDetail.setItem(item);
        } catch (Exception e) {
            // 如果断路器抛出异常，使用降级商品
            Item fallbackItem = queryItemByIdFallback(
                orderDetail.getItem().getId(), e
            );
            orderDetail.setItem(fallbackItem);
        }
    }
    return order;
}
@doc
----
</t>
<t tx="swot.20251004152006.1">尚硅谷2025最新SpringCloud速通-操作步骤（详细）

https://blog.csdn.net/weixin_56884174/article/details/145573890?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522214c85ea0aa82a029044f0f4f716d414%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=214c85ea0aa82a029044f0f4f716d414&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-145573890-null-null.142^v102^pc_search_result_base1&amp;utm_term=%E5%B0%9A%E7%A1%85%E8%B0%B72025%E6%9C%80%E6%96%B0SpringCloud%E9%80%9F%E9%80%9A&amp;spm=1018.2226.3001.4187


docker 部署视频
https://www.bilibili.com/video/BV1Cp4y1F7eA?spm_id_from=333.788.videopod.sections&amp;vd_source=392e2829ea8e40de989be86888026747

docker 部署文档
https://www.codefather.cn/post/1829531285412552706#heading-7
</t>
<t tx="swot.20251005112102.1">@language java
@others
</t>
<t tx="swot.20251005112253.1">package com.tjise.serviceitem.controller;

import com.tjise.serviceitem.pojo.Item;
import com.tjise.serviceitem.service.ItemService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import java.util.logging.Logger;

</t>
<t tx="swot.20251005112340.1" annotate="7d71002858080000007072696f7269747971014b09580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269392e706e677104580700000072656c506174687105580d000000636c656f2f707269392e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
@RestController
public class ItemController {

    @Autowired
    private ItemService itemService;
    
    @Value("${server.port}")
    private int serverPort;

    private static final Logger logger = Logger.getLogger(ItemController.class.getName());

    /**
     * 对外提供接口服务，查询商品信息
     *
     * @param id
     * @return
     */
    @GetMapping(value = "item/{id}")
    public Item queryItemById(@PathVariable("id") Long id) {
        // 增加了日志打印功能，方便查看是哪个 service-item 提供的服务。
        logger.info("Handling request on port: " + serverPort + " for item ID: " + id);
        System.out.println("Processing request on port: " + serverPort + " for item ID: " + id);
        
        // -- New Added Begin --- 测试用例，当 ID 为 -1 时抛出异常
        if (id == -1) {
            System.out.println("=== 触发异常测试，ID 为 -1 ===");
            throw new RuntimeException("服务内部错误");
        }
        // -- New Added End -- 
        return this.itemService.queryItemById(id);  // 正常返回
    }
}
@doc
----

</t>
<t tx="swot.20251005115730.1">正常测试

* http :8091/order/201810300001 

item3 id 为 -1，会抛出异常，查看 8091 打印

* http :8091/order/201810300003

</t>
<t tx="swot.20251005120000.1" annotate="7d71002858080000007072696f7269747971014b05580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677104580700000072656c506174687105580d000000636c656f2f707269352e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
Order order3 = new Order();
order3.setOrderId("201810300003");
order3.setCreateDate(new Date());
order3.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order3.setUserId(3L);
List&lt;OrderDetail&gt; orderDetails3 = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item3 = new Item();
item3.setId(-1L);          // --- 注意这里设置了 -1 哟! ---
orderDetails3.add(new OrderDetail(order3.getOrderId(), item3));

// 创建第二个商品详情
item3 = new Item();
item3.setId(6L);
orderDetails3.add(new OrderDetail(order3.getOrderId(), item3));

order3.setOrderDetails(orderDetails3);

ORDER_DATA.put(order3.getOrderId(), order3);
@doc
----

</t>
<t tx="swot.20251005124609.1">正常测试

* http :8091/order/201810300001 

item3 id 为 -1，会抛出异常，查看 8091 打印

* http :8091/order/201810300003

</t>
<t tx="swot.20251005124609.10" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d33307103752e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- &lt;dependency&gt; --&gt;
    &lt;!-- &lt;groupId&gt;io.github.resilience4j&lt;/groupId&gt; --&gt;
    &lt;!-- &lt;artifactId&gt;resilience4j-spring-boot2&lt;/artifactId&gt; --&gt;
    &lt;!-- &lt;version&gt;1.7.0&lt;/version&gt; --&gt;
&lt;!-- &lt;/dependency&gt; --&gt;
@doc
....
</t>
<t tx="swot.20251005124609.11" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d31302d30327103752e">@doc
[source,scss]
....
@c
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....</t>
<t tx="swot.20251005124609.19">@language java
@others
</t>
<t tx="swot.20251005124609.2" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
@others
</t>
<t tx="swot.20251005124609.20">package com.tjise.serviceorder.service;

import com.tjise.serviceorder.client.ItemFeignClient;
import com.tjise.serviceorder.pojo.Order;
import com.tjise.serviceorder.pojo.OrderDetail;
import com.tjise.serviceorder.pojo.Item;
import org.springframework.cloud.client.circuitbreaker.CircuitBreaker;
import org.springframework.cloud.client.circuitbreaker.CircuitBreakerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;
import java.io.IOException;
import java.util.*;
</t>
<t tx="swot.20251005124609.21" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
/**
 * 订单服务类
 * 提供订单查询功能，并通过调用商品服务获取商品详细信息
 */
@Service
public class OrderService {

    @Autowired
    // private CircuitBreakerRegistry circuitBreakerRegistry;
    private CircuitBreakerFactory circuitBreakerFactory;  // 更改为工厂模式
    
    @Autowired
    ItemFeignClient itemFeignClient;  // --- New Added ---

    @others
}
@doc
----
</t>
<t tx="swot.20251005124609.22">// 使用静态Map模拟数据库存储订单数据
private static final Map&lt;String, Order&gt; ORDER_DATA = new HashMap&lt;String, Order&gt;();
// 初始化订单数据
static {
    // 模拟数据库，构造测试数据
    @others
}
</t>
<t tx="swot.20251005124609.23">Order order = new Order();
order.setOrderId("201810300001");
order.setCreateDate(new Date());
order.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order.setUserId(1L);
List&lt;OrderDetail&gt; orderDetails = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item = new Item();
// item.setId(1L);
item.setId(1L);
orderDetails.add(new OrderDetail(order.getOrderId(), item));

// 创建第二个商品详情
item = new Item();
item.setId(2L);
orderDetails.add(new OrderDetail(order.getOrderId(), item));

order.setOrderDetails(orderDetails);

ORDER_DATA.put(order.getOrderId(), order);
</t>
<t tx="swot.20251005124609.24" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32377103752e">Order order2 = new Order();
order2.setOrderId("201810300002");
order2.setCreateDate(new Date());
order2.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order2.setUserId(2L);
List&lt;OrderDetail&gt; orderDetails2 = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item2 = new Item();
item2.setId(3L);
orderDetails2.add(new OrderDetail(order2.getOrderId(), item2));

// 创建第二个商品详情
item2 = new Item();
item2.setId(4L);
orderDetails2.add(new OrderDetail(order2.getOrderId(), item2));

order2.setOrderDetails(orderDetails2);

ORDER_DATA.put(order2.getOrderId(), order2);
</t>
<t tx="swot.20251005124609.25" annotate="7d71002858080000007072696f7269747971014b05580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677104580700000072656c506174687105580d000000636c656f2f707269352e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
Order order3 = new Order();
order3.setOrderId("201810300003");
order3.setCreateDate(new Date());
order3.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order3.setUserId(3L);
List&lt;OrderDetail&gt; orderDetails3 = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item3 = new Item();
item3.setId(-1L);          // --- 注意这里设置了 -1 哟! ---
orderDetails3.add(new OrderDetail(order3.getOrderId(), item3));

// 创建第二个商品详情
item3 = new Item();
item3.setId(6L);
orderDetails3.add(new OrderDetail(order3.getOrderId(), item3));

order3.setOrderDetails(orderDetails3);

ORDER_DATA.put(order3.getOrderId(), order3);
@doc
----

</t>
<t tx="swot.20251005124609.26" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
public Item queryItemByIdWithCircuitBreaker(Long id) {
    // Using Spring Cloud Circuit Breaker with CircuitBreakerFactory
    // 使用 Factory 创建断路器
    return circuitBreakerFactory.create("OrderService").run(
        () -&gt; {
            Item result = itemFeignClient.queryItemById(id);  // 使用 feign
            System.out.println("result:" + result);
            return result;
        },
        throwable -&gt; queryItemByIdFallback(id, throwable)
    );
}
@doc
----
</t>
<t tx="swot.20251005124609.27" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d31302d30357103752e">@doc
[source,java]
----
@c
@language java
/**
 * 断路器降级方法
 * @param id 商品 ID
 * @param throwable 抛出的异常
 * @return 降级后的默认商品信息
 */
public Item queryItemByIdFallback(Long id, Throwable throwable) {
    System.out.println("=======CircuitBreaker 降级处理，原因：" + throwable.getMessage());
    return new Item(id, "查询商品信息出错", null, null, null);
}
@doc
----

</t>
<t tx="swot.20251005124609.28" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d31302d30357103752e">@doc
[source,java]
----
@c
@language java
// 注入商品服务，用于查询商品详细信息
@Autowired
private ItemService itemService;
/**
 * 根据订单ID查询订单数据
 * 
 * @param orderId 订单ID
 * @return Order 订单信息，包含完整的商品详情
 */
public Order queryOrderById(String orderId) throws IOException {
    // 从模拟数据库中查询订单
    Order order = ORDER_DATA.get(orderId);
    if (null == order) {
        return null;
    }
    // 获取订单详情列表
    List&lt;OrderDetail&gt; orderDetails = order.getOrderDetails();

    // 遍历订单详情，通过商品微服务查询商品详细数据
    for (OrderDetail orderDetail : orderDetails) {
        // 通过商品微服务查询商品详细数据
        try {
            Item item = queryItemByIdWithCircuitBreaker(
                orderDetail.getItem().getId()
            );
            if (null == item) {
                continue;
            }
            // 将查询到的商品详细信息设置到订单详情中
            orderDetail.setItem(item);
        } catch (Exception e) {
            // 如果断路器抛出异常，使用降级商品
            Item fallbackItem = queryItemByIdFallback(
                orderDetail.getItem().getId(), e
            );
            orderDetail.setItem(fallbackItem);
        }
    }
    return order;
}
@doc
----
</t>
<t tx="swot.20251005124609.3">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;

    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-order&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-order&lt;/name&gt;
    &lt;description&gt;service-order&lt;/description&gt;
    @others
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</t>
<t tx="swot.20251005124609.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32307103752e">@doc
[source,scss]
....
@c
@language xml
&lt;properties&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;spring-cloud.version&gt;2021.0.8&lt;/spring-cloud.version&gt;
&lt;/properties&gt;
@doc
....
</t>
<t tx="swot.20251005124609.5" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32307103752e">@doc
[source,scss]
....
@c
@language xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring-cloud.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
@doc
....
</t>
<t tx="swot.20251005124609.6">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;!-- Lombok --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
        &lt;artifactId&gt;lombok&lt;/artifactId&gt;
        &lt;optional&gt;true&lt;/optional&gt;
    &lt;/dependency&gt;
    @others
&lt;/dependencies&gt;
</t>
<t tx="swot.20251005124609.7" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 使用 Spring Boot 管理的版本： --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;
    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20251005124609.8" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,scss]
....
@c
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20251005124609.9" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31387103752e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 添加 Eureka 客户端依赖, 用于将服务注册到 Eureka --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20251005125852.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
....
@c
@language java
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-circuitbreaker-resilience4j&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....

</t>
<t tx="swot.20251005171445.1">@language asciidoc
正常测试

* http :8091/order/201810300001

item3 id 为 -1，会抛出异常，查看 8091 打印，可以查看断路器工作状态的切换。

* http :8091/order/201810300003


查看负载均衡情况：

1. 把 8081 | 8082 | 8083 端口的服务都启动。

2. 发送上面的命令查看各个端口的微服务是否有日志打印。
+
.日志类似于这样
....
2025-10-06 18:33:17.112  INFO 91339 --- [nio-8082-exec-3] c.t.s.controller.ItemController          : Handling request on port: 8082 for item ID: 2
Processing request on port: 8082 for item ID: 2
....

</t>
<t tx="swot.20251005172726.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@language yaml
@others
</t>
<t tx="swot.20251005172726.2">@doc
[source,yaml]
----
@c
server:
    port: 8091
@doc
----
</t>
<t tx="swot.20251005172726.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@doc
[source, yaml]
----
@c
# 起个名字作为服务名称(该服务注册到 eureka 注册中心的名称，比如订单服务)
spring:
    application:
        name: app-order
@doc
----
</t>
<t tx="swot.20251005172726.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32327103752e">@doc
[source,yaml]
----
@c
# 服务注册到 eureka 注册中心的地址
eureka:
    client:
        service-url:
            # defaultZone: http://root:root@127.0.0.1:8761/eureka/
            defaultZone: http://root:root@eureka1:8761/eureka/,http://root:root@eureka2:8762/eureka/,http://root:root@eureka3:8763/eureka/
        register-with-eureka: true  # 因为该应用为服务提供者，是 eureka 的一个客户端，需要注册到注册中心
        fetch-registry: true        # 是否需要从 eureka 上检索服务
    instance:
        prefer-ip-address: true     # 使用 IP地址 注册而不是主机名
        ip-address: 127.0.0.1       # 客户端在注册时使用自己的 IP，而不是主机名
                                    # 这是生产环境的最佳实践。避免主机名解析问题
@doc
----
</t>
<t tx="swot.20251005172726.5" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,yaml]
----
@c
@language yaml
resilience4j:
  circuitbreaker:
    instances:
      # OrderService:  这里就要改成与 Feign 要使用的 Eureka 服务名一样才行，如下面改成 app-item
      app-item:
        sliding-window-size: 5                  # 需要 5次调用来计算失败率
        failure-rate-threshold: 50              # 50% 失败率才跳闸
        wait-duration-in-open-state: 10s        # 10 秒后进入半开状态
        permitted-number-of-calls-in-half-open-state: 2     # 半开状态允许 2 次调用
        sliding-window-type: COUNT_BASED        # 基于调用次数
        record-exceptions:                      # 哪些异常算失败
          - org.springframework.web.reactive.function.client.WebClientResponseException
          - java.lang.RuntimeException
          - java.io.IOException
        ignore-exceptions:                      # 忽略的异常类型
          - java.lang.IllegalArgumentException
@doc
----

NOTE: 实际生产要宽松一些的。

[caption=]
测试 vs 生产
[cols="1,1,1",options="header"]
|===
| 场景    | 测试配置 | 生产配置
| 窗口大小 | 5 次调用 | 100次调用
| 故障阈值 | 50%     | 75%
| 恢复时间 | 10 秒   | 60秒
| 目的    | 快速验证 | 稳定运行
|===
</t>
<t tx="swot.20251005172837.1"></t>
<t tx="swot.20251005172845.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,yaml]
----
@c
@language yaml
feign:
  circuitbreaker:
    enabled: true
@doc
----

</t>
<t tx="swot.20251005174444.1" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d31302d30337103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceorder.client;

import com.tjise.serviceorder.pojo.Item;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

// 要访问的在 Eureka 中的服务名，并指定实现该接口的降级类名
@FeignClient(name = "app-item", fallback = ItemFallback.class)
public interface ItemFeignClient {
    @GetMapping("/item/{id}")
    Item queryItemById(@PathVariable("id") Long id);
}
@doc
----
</t>
<t tx="swot.20251005174728.1" annotate="7d71002858080000007072696f7269747971014b04580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677104580700000072656c506174687105580d000000636c656f2f707269342e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceorder.client;

import com.tjise.serviceorder.pojo.Item;
import org.springframework.stereotype.Component;

@Component
public class ItemFallback implements ItemFeignClient {
    @Override
    public Item queryItemById(Long id) {
        System.out.println("=== ItemFallback.queryItemById 被调用 ===");
        return new Item(id, "Feign 降级商品", null, null, null);
    }
}
@doc
----

</t>
<t tx="swot.20251005174948.1">@language java
@others
</t>
<t tx="swot.20251005174948.10" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d31302d30357103752e">@doc
[source,java]
----
@c
@language java
// 注入商品服务，用于查询商品详细信息
@Autowired
private ItemService itemService;
/**
 * 根据订单ID查询订单数据
 * 
 * @param orderId 订单ID
 * @return Order 订单信息，包含完整的商品详情
 */
public Order queryOrderById(String orderId) throws IOException {
    // 从模拟数据库中查询订单
    Order order = ORDER_DATA.get(orderId);
    if (null == order) {
        return null;
    }
    // 获取订单详情列表
    List&lt;OrderDetail&gt; orderDetails = order.getOrderDetails();

    // 遍历订单详情，通过商品微服务查询商品详细数据
    for (OrderDetail orderDetail : orderDetails) {
        // 通过商品微服务查询商品详细数据
        try {
            Item item = queryItemByIdWithCircuitBreaker(
                orderDetail.getItem().getId()
            );
            if (null == item) {
                continue;
            }
            // 将查询到的商品详细信息设置到订单详情中
            orderDetail.setItem(item);
        } catch (Exception e) {
            // 如果断路器抛出异常，使用降级商品
            Item fallbackItem = queryItemByIdFallback(
                orderDetail.getItem().getId(), e
            );
            orderDetail.setItem(fallbackItem);
        }
    }
    return order;
}
@doc
----
</t>
<t tx="swot.20251005174948.2">package com.tjise.serviceorder.service;

import com.tjise.serviceorder.client.ItemFeignClient;
import com.tjise.serviceorder.pojo.Order;
import com.tjise.serviceorder.pojo.OrderDetail;
import com.tjise.serviceorder.pojo.Item;
import org.springframework.cloud.client.circuitbreaker.CircuitBreaker;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.io.IOException;
import java.util.*;
</t>
<t tx="swot.20251005174948.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d31302d30357103752e">@doc
[source,java]
----
@c
@language java
/**
 * 订单服务类
 * 提供订单查询功能，并通过调用商品服务获取商品详细信息
 */
@Service
public class OrderService {

    // @Autowired
    // private CircuitBreakerRegistry circuitBreakerRegistry;
    // private CircuitBreakerFactory circuitBreakerFactory;  // 更改为工厂模式
    
    @Autowired
    ItemFeignClient itemFeignClient;  // --- New Added ---

    @others
}
@doc
----
</t>
<t tx="swot.20251005174948.4">// 使用静态Map模拟数据库存储订单数据
private static final Map&lt;String, Order&gt; ORDER_DATA = new HashMap&lt;String, Order&gt;();
// 初始化订单数据
static {
    // 模拟数据库，构造测试数据
    @others
}
</t>
<t tx="swot.20251005174948.5">Order order = new Order();
order.setOrderId("201810300001");
order.setCreateDate(new Date());
order.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order.setUserId(1L);
List&lt;OrderDetail&gt; orderDetails = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item = new Item();
// item.setId(1L);
item.setId(1L);
orderDetails.add(new OrderDetail(order.getOrderId(), item));

// 创建第二个商品详情
item = new Item();
item.setId(2L);
orderDetails.add(new OrderDetail(order.getOrderId(), item));

order.setOrderDetails(orderDetails);

ORDER_DATA.put(order.getOrderId(), order);
</t>
<t tx="swot.20251005174948.6" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32377103752e">Order order2 = new Order();
order2.setOrderId("201810300002");
order2.setCreateDate(new Date());
order2.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order2.setUserId(2L);
List&lt;OrderDetail&gt; orderDetails2 = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item2 = new Item();
item2.setId(3L);
orderDetails2.add(new OrderDetail(order2.getOrderId(), item2));

// 创建第二个商品详情
item2 = new Item();
item2.setId(4L);
orderDetails2.add(new OrderDetail(order2.getOrderId(), item2));

order2.setOrderDetails(orderDetails2);

ORDER_DATA.put(order2.getOrderId(), order2);
</t>
<t tx="swot.20251005174948.7" annotate="7d71002858080000007072696f7269747971014b05580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677104580700000072656c506174687105580d000000636c656f2f707269352e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
Order order3 = new Order();
order3.setOrderId("201810300003");
order3.setCreateDate(new Date());
order3.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order3.setUserId(3L);
List&lt;OrderDetail&gt; orderDetails3 = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item3 = new Item();
item3.setId(-1L);          // --- 注意这里设置了 -1 哟! ---
orderDetails3.add(new OrderDetail(order3.getOrderId(), item3));

// 创建第二个商品详情
item3 = new Item();
item3.setId(6L);
orderDetails3.add(new OrderDetail(order3.getOrderId(), item3));

order3.setOrderDetails(orderDetails3);

ORDER_DATA.put(order3.getOrderId(), order3);
@doc
----

</t>
<t tx="swot.20251005174948.8" annotate="7d71002858080000007072696f7269747971014b06580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e677104580700000072656c506174687105580d000000636c656f2f707269362e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
public Item queryItemByIdWithCircuitBreaker(Long id) {

    // 简化为直接调用，断路器由 Feign 自动处理
    Item result = itemFeignClient.queryItemById(id);  // 使用 feign
    System.out.println("result:" + result);
    return result;
}
@doc
----
</t>
<t tx="swot.20251005174948.9" annotate="7d71002858080000007072696f7269747971014b15580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358240000002f55736572732f73776f742f2e6c656f2f49636f6e732f636c656f2f78626c6b2e706e677104580700000072656c506174687105580d000000636c656f2f78626c6b2e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
/**
 * 断路器降级方法
 * @param id 商品 ID
 * @param throwable 抛出的异常
 * @return 降级后的默认商品信息
 */
public Item queryItemByIdFallback(Long id, Throwable throwable) {
    System.out.println("=======CircuitBreaker 降级处理，原因：" + throwable.getMessage());
    return new Item(id, "查询商品信息出错", null, null, null);
}
@doc
----

</t>
<t tx="swot.20251005182851.1">@language asciidoc
启动应用后，您可以访问以下端点：

- http :8091/order/201810300004
+
....
HTTP/1.1 200
Connection: keep-alive
Content-Type: application/json
Date: Sun, 05 Oct 2025 14:15:05 GMT
Keep-Alive: timeout=60
Transfer-Encoding: chunked

{
    "createDate": "2025-10-05T14:14:44.090+00:00",
    "orderDetails": [
        {
            "item": {
                "desc": null,
                "id": -1,
                "pic": null,
                "price": null,
                "title": "Feign 降级商品"
            },
            "orderId": "201810300004"
        }
    ],
    "orderId": "201810300004",
    "updateDate": "2025-10-05T14:14:44.089+00:00",
    "userId": 4
}
....

- http :8091/actuator/health - 查看断路器健康状态
- http :8091/actuator/circuitbreakerevents - 查看断路器事件历史
</t>
<t tx="swot.20251005190244.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@language yaml
@others
</t>
<t tx="swot.20251005190244.2"></t>
<t tx="swot.20251005190244.3">@doc
[source,yaml]
----
@c
server:
    port: 8091
@doc
----
</t>
<t tx="swot.20251005190244.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@doc
[source, yaml]
----
@c
# 起个名字作为服务名称(该服务注册到 eureka 注册中心的名称，比如订单服务)
spring:
    application:
        name: app-order
    cloud:
        circuitbreaker:
            resilience4j:
                enabled: true
@doc
----
</t>
<t tx="swot.20251005190244.5" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32327103752e">@doc
[source,yaml]
----
@c
# 服务注册到 eureka 注册中心的地址
eureka:
    client:
        service-url:
            # defaultZone: http://root:root@127.0.0.1:8761/eureka/
            defaultZone: http://root:root@eureka1:8761/eureka/,http://root:root@eureka2:8762/eureka/,http://root:root@eureka3:8763/eureka/
        register-with-eureka: true  # 因为该应用为服务提供者，是 eureka 的一个客户端，需要注册到注册中心
        fetch-registry: true        # 是否需要从 eureka 上检索服务
    instance:
        prefer-ip-address: true     # 使用 IP地址 注册而不是主机名
        ip-address: 127.0.0.1       # 客户端在注册时使用自己的 IP，而不是主机名
                                    # 这是生产环境的最佳实践。避免主机名解析问题
@doc
----
</t>
<t tx="swot.20251005190244.6" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d31302d30357103752e">@doc
[source,yaml]
----
@c
@language yaml
feign:
  circuitbreaker:
    enabled: true
@doc
----

</t>
<t tx="swot.20251005190244.7" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,yaml]
----
@c
@language yaml
resilience4j:
  circuitbreaker:
    configs:
      default:  # --New 让 SpringCloud 自动管理服务名，否则找不到断路器
        sliding-window-size: 5                  # 需要 5次调用来计算失败率
        failure-rate-threshold: 50              # 50% 失败率才跳闸
        wait-duration-in-open-state: 10s        # 10 秒后进入半开状态
        permitted-number-of-calls-in-half-open-state: 2     # 半开状态允许 2 次调用
        sliding-window-type: COUNT_BASED        # 基于调用次数
        record-exceptions:                      # 哪些异常算失败
          - org.springframework.web.client.HttpServerErrorException
          - org.springframework.web.client.ResourceAccessException
          - java.lang.RuntimeException
          - java.io.IOException
        ignore-exceptions:                      # 忽略的异常类型
          - java.lang.IllegalArgumentException
        register-health-indicator: true         # --New 启用健康检查
@doc
----

NOTE: 实际生产要宽松一些的。

[caption=]
测试 vs 生产
[cols="1,1,1",options="header"]
|===
| 场景    | 测试配置 | 生产配置
| 窗口大小 | 5 次调用 | 100次调用
| 故障阈值 | 50%     | 75%
| 恢复时间 | 10 秒   | 60秒
| 目的    | 快速验证 | 稳定运行
|===
</t>
<t tx="swot.20251005191938.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
@others
</t>
<t tx="swot.20251005191938.10" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d33307103752e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- &lt;dependency&gt; --&gt;
    &lt;!-- &lt;groupId&gt;io.github.resilience4j&lt;/groupId&gt; --&gt;
    &lt;!-- &lt;artifactId&gt;resilience4j-spring-boot2&lt;/artifactId&gt; --&gt;
    &lt;!-- &lt;version&gt;1.7.0&lt;/version&gt; --&gt;
&lt;!-- &lt;/dependency&gt; --&gt;
@doc
....
</t>
<t tx="swot.20251005191938.11" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d31302d30357103752e">@doc
[source,scss]
....
@c
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-circuitbreaker-resilience4j&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....

</t>
<t tx="swot.20251005191938.2">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;

    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-order&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-order&lt;/name&gt;
    &lt;description&gt;service-order&lt;/description&gt;
    @others
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</t>
<t tx="swot.20251005191938.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32307103752e">@doc
[source,scss]
....
@c
@language xml
&lt;properties&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;spring-cloud.version&gt;2021.0.8&lt;/spring-cloud.version&gt;
&lt;/properties&gt;
@doc
....
</t>
<t tx="swot.20251005191938.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32307103752e">@doc
[source,scss]
....
@c
@language xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring-cloud.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
@doc
....
</t>
<t tx="swot.20251005191938.5">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;!-- Lombok --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
        &lt;artifactId&gt;lombok&lt;/artifactId&gt;
        &lt;optional&gt;true&lt;/optional&gt;
    &lt;/dependency&gt;
    @others
&lt;/dependencies&gt;
</t>
<t tx="swot.20251005191938.6" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 使用 Spring Boot 管理的版本： --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;
    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20251005191938.7" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,scss]
....
@c
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20251005191938.8" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31387103752e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 添加 Eureka 客户端依赖, 用于将服务注册到 Eureka --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20251005191938.9" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d31302d30327103752e">@doc
[source,scss]
....
@c
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....</t>
<t tx="swot.20251005192140.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....

</t>
<t tx="swot.20251005192527.1" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,yaml]
----
@c
@language yaml
management:
  endpoints:
    web:
      exposure:
        include: health,info,circuitbreakerevents  # 暴露断路器事件端点
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true  # 启用断路器健康检查
@doc
----

</t>
<t tx="swot.20251005215932.1">@language java
@others
</t>
<t tx="swot.20251005215932.10" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d31302d30357103752e">@doc
[source,java]
----
@c
@language java
// 注入商品服务，用于查询商品详细信息
@Autowired
private ItemService itemService;
/**
 * 根据订单ID查询订单数据
 * 
 * @param orderId 订单ID
 * @return Order 订单信息，包含完整的商品详情
 */
public Order queryOrderById(String orderId) throws IOException {
    // 从模拟数据库中查询订单
    Order order = ORDER_DATA.get(orderId);
    if (null == order) {
        return null;
    }
    // 获取订单详情列表
    List&lt;OrderDetail&gt; orderDetails = order.getOrderDetails();

    // 遍历订单详情，通过商品微服务查询商品详细数据
    for (OrderDetail orderDetail : orderDetails) {
        // 通过商品微服务查询商品详细数据
        // try {
            Item item = queryItemByIdWithCircuitBreaker(
                orderDetail.getItem().getId()
            );
            if (null == item) {
                continue;
            }
            // 将查询到的商品详细信息设置到订单详情中
            orderDetail.setItem(item);
        // } catch (Exception e) {
            // // 如果断路器抛出异常，使用降级商品
            // Item fallbackItem = queryItemByIdFallback(
                // orderDetail.getItem().getId(), e
            // );
            // orderDetail.setItem(fallbackItem);
        // }
    }
    return order;
}
@doc
----
</t>
<t tx="swot.20251005215932.2">package com.tjise.serviceorder.service;

import com.tjise.serviceorder.client.ItemFeignClient;
import com.tjise.serviceorder.pojo.Order;
import com.tjise.serviceorder.pojo.OrderDetail;
import com.tjise.serviceorder.pojo.Item;
import org.springframework.cloud.client.circuitbreaker.CircuitBreaker;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.io.IOException;
import java.util.*;
</t>
<t tx="swot.20251005215932.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d31302d30357103752e">@doc
[source,java]
----
@c
@language java
/**
 * 订单服务类
 * 提供订单查询功能，并通过调用商品服务获取商品详细信息
 */
@Service
public class OrderService {

    // @Autowired
    // private CircuitBreakerRegistry circuitBreakerRegistry;
    // private CircuitBreakerFactory circuitBreakerFactory;  // 更改为工厂模式
    
    @Autowired
    ItemFeignClient itemFeignClient;  // --- New Added ---

    @others
}
@doc
----
</t>
<t tx="swot.20251005215932.4">// 使用静态Map模拟数据库存储订单数据
private static final Map&lt;String, Order&gt; ORDER_DATA = new HashMap&lt;String, Order&gt;();
// 初始化订单数据
static {
    // 模拟数据库，构造测试数据
    @others
}
</t>
<t tx="swot.20251005215932.5">Order order = new Order();
order.setOrderId("201810300001");
order.setCreateDate(new Date());
order.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order.setUserId(1L);
List&lt;OrderDetail&gt; orderDetails = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item = new Item();
// item.setId(1L);
item.setId(1L);
orderDetails.add(new OrderDetail(order.getOrderId(), item));

// 创建第二个商品详情
item = new Item();
item.setId(2L);
orderDetails.add(new OrderDetail(order.getOrderId(), item));

order.setOrderDetails(orderDetails);

ORDER_DATA.put(order.getOrderId(), order);
</t>
<t tx="swot.20251005215932.6" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32377103752e">Order order2 = new Order();
order2.setOrderId("201810300002");
order2.setCreateDate(new Date());
order2.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order2.setUserId(2L);
List&lt;OrderDetail&gt; orderDetails2 = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item2 = new Item();
item2.setId(3L);
orderDetails2.add(new OrderDetail(order2.getOrderId(), item2));

// 创建第二个商品详情
item2 = new Item();
item2.setId(4L);
orderDetails2.add(new OrderDetail(order2.getOrderId(), item2));

order2.setOrderDetails(orderDetails2);

ORDER_DATA.put(order2.getOrderId(), order2);
</t>
<t tx="swot.20251005215932.7" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d31302d30357103752e">@doc
[source,java]
----
@c
@language java
Order order3 = new Order();
order3.setOrderId("201810300003");
order3.setCreateDate(new Date());
order3.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order3.setUserId(3L);
List&lt;OrderDetail&gt; orderDetails3 = new ArrayList&lt;OrderDetail&gt;();

// 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item3 = new Item();
item3.setId(-1L);          // --- 注意这里设置了 -1 哟! ---
orderDetails3.add(new OrderDetail(order3.getOrderId(), item3));

// 创建第二个商品详情
item3 = new Item();
item3.setId(6L);
orderDetails3.add(new OrderDetail(order3.getOrderId(), item3));

order3.setOrderDetails(orderDetails3);

ORDER_DATA.put(order3.getOrderId(), order3);
@doc
----

</t>
<t tx="swot.20251005215932.8" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d31302d30357103752e">@doc
[source,java]
----
@c
@language java
public Item queryItemByIdWithCircuitBreaker(Long id) {

    // 简化为直接调用，断路器由 Feign 自动处理
    Item result = itemFeignClient.queryItemById(id);  // 使用 feign
    System.out.println("result:" + result);
    return result;
}
@doc
----
</t>
<t tx="swot.20251005220026.1" annotate="7d71002858080000007072696f7269747971014b04580a000000707269736574646174657102580a000000323032352d31302d30357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677104580700000072656c506174687105580d000000636c656f2f707269342e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
Order order4 = new Order();
order4.setOrderId("201810300004");
order4.setCreateDate(new Date());
order4.setUpdateDate(order.getCreateDate());  // 真会偷懒呀
order4.setUserId(4L);
List&lt;OrderDetail&gt; orderDetails4 = new ArrayList&lt;OrderDetail&gt;();

// 创建一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
Item item4 = new Item();
item4.setId(-1L);          // --- 注意这里设置了 -1 哟! ---
orderDetails4.add(new OrderDetail(order4.getOrderId(), item4));  // &lt;1&gt;

order4.setOrderDetails(orderDetails4);

ORDER_DATA.put(order4.getOrderId(), order4);
@language asciidoc
@doc
----

&lt;1&gt; 就创建一个商品，逐个累加计数，方便查看断路器的状态，不会跳数字，能看到半开状态 HALF_OPEN。
+
image::img/actuator_health.png[,900]
</t>
<t tx="swot.20251006093428.1">@language asciidoc
Declarative rest Client 声明式 rest 客户端（之前叫编程式 rest 客户端，如 RestTemplate）。

注解驱动

- 指定远程地址: @FeignClient
- 指定请求方式: @GetMapping @PostMapping @DeleteMapping ...
- 指定携带数据: @PathVariable(路径参数) @RequestHeader @RequestParam @RequestBody ...
- 指定结果返回: 封装成的响应模型，如商品对象 Item

</t>
<t tx="swot.20251006093504.1">测试天气 api
http://t.weather.sojson.com/api/weather/city/101030100

citycode.json 文件下载:
https://github.com/LS-KR/China-Citycode/blob/main/citycode.json

.通过 url 判断为第三方 API
[source,java]
----
// weather-client 是自己随便起的名字，在这儿没具体作用
// url 是第三方 API 的域名，有 url 则是第三方 API
@FeignClient(name = "weather-client", url = "http://t.weather.sojson.com")
----

这里只是最简单的一个 API，您可以自己找个复杂的 API 去练习一下，比如有 @PathVariable(路径参数) @RequestHeader @RequestParam @RequestBody ...
</t>
<t tx="swot.20251006093535.1">@language asciidoc
参考文档:
https://docs.spring.io/spring-cloud-openfeign/docs/current/reference/html/#feign-logging

.打开 feign 日志前
image::img/feign_before_open_log.png[]

.打开 feign 日志后
image::img/feign_after_open_log.png[]

下面是开启 Feign 日志的方法，开启后直接测试就行，不用启动任何微服务。
</t>
<t tx="swot.20251006093547.1">@language asciidoc
.超时控制流程图
image::img/feign_timeout.png[,800]

.超时控制分类
image::img/feign_timeout_category.png[,800]

</t>
<t tx="swot.20251006093556.1"></t>
<t tx="swot.20251006093619.1"></t>
<t tx="swot.20251006093630.1"></t>
<t tx="swot.20251006132325.1">@language asciidoc
. 引入依赖 openfeign
+
.service-order/pom.xml
[source,scss]
....
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;
&lt;/dependency&gt;
....


. 启动类开启 openfeign 远程调用功能 -&gt; @EnableFeignClients
+
.service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java
[source,java]
----
@language java
@SpringBootApplication
@EnableEurekaClient  // 启用 Eureka 客户端功能
@EnableFeignClients  // --- New Added --- 会初始化和配置 feign
public class ServiceOrderApplication {
    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }
    // 包含其他代码
    @others
}
----


. 定义 feign 客户端接口
+
[source,java]
----
@language java
// 要访问的在 Eureka 中的服务名，feign 已经实现了负载均衡，不用再写 @LoadBalanced
// 会自动注入 ItemFeignClient 对象到 IOC 容器中，后面使用时直接 @Autowired 即可
@FeignClient(name = "app-item")
public interface ItemFeignClient {
    // 使用 MVC 的注解，在 controller 上是接收请求，在 FeignClient 上是发送请求
    @GetMapping("/item/{id}")
    // 接收到的数据封装成商品对象 Item
    Item queryItemById(@PathVariable("id") Long id);  // id 由下往上传递
}
----


. 使用注入的 itemFeignClient（不要忘记先使用 @Autowired 注入）
+
[source,java]
----
@language java
public Item queryItemByIdWithCircuitBreaker(Long id) {

    // 简化为直接调用，断路器由 Feign 自动处理
    Item result = itemFeignClient.queryItemById(id);  // 使用 feign
    System.out.println("result:" + result);
    return result;
}
----

</t>
<t tx="swot.20251006224019.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d31302d30337103752e">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceorder.client;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

// weather-client 是自己随便起的名字，在这儿没具体作用
// url 是第三方 API 的域名，有 url 则是第三方 API
@FeignClient(name = "weather-client", url = "http://t.weather.sojson.com")
public interface WeatherFeignClient {
    @GetMapping("/api/weather/city/{citycode}")
    String getWeather(@PathVariable("citycode") String citycode);
}
@doc
----
</t>
<t tx="swot.20251006230036.1">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceorder;

import com.tjise.serviceorder.client.WeatherFeignClient;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class WeatherTest {
    @Autowired
    private WeatherFeignClient weatherFeignClient;

    @Test
    void testGetWeather() {
        String weather = weatherFeignClient.getWeather("101030100");
        System.out.println("weather: "  + weather);
    }
}
@doc
----

</t>
<t tx="swot.20251006234047.1">看下面的图就明白了

image::img/client_and_server_balanced.png[,700]
</t>
<t tx="swot.20251007085454.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@language yaml
@others
</t>
<t tx="swot.20251007085454.2"></t>
<t tx="swot.20251007085454.3">@doc
[source,yaml]
----
@c
server:
    port: 8091
@doc
----
</t>
<t tx="swot.20251007085454.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@doc
[source, yaml]
----
@c
# 起个名字作为服务名称(该服务注册到 eureka 注册中心的名称，比如订单服务)
spring:
    application:
        name: app-order
    cloud:
        circuitbreaker:
            resilience4j:
                enabled: true
@doc
----
</t>
<t tx="swot.20251007085454.5" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32327103752e">@doc
[source,yaml]
----
@c
# 服务注册到 eureka 注册中心的地址
eureka:
    client:
        service-url:
            # defaultZone: http://root:root@127.0.0.1:8761/eureka/
            defaultZone: http://root:root@eureka1:8761/eureka/,http://root:root@eureka2:8762/eureka/,http://root:root@eureka3:8763/eureka/
        register-with-eureka: true  # 因为该应用为服务提供者，是 eureka 的一个客户端，需要注册到注册中心
        fetch-registry: true        # 是否需要从 eureka 上检索服务
    instance:
        prefer-ip-address: true     # 使用 IP地址 注册而不是主机名
        ip-address: 127.0.0.1       # 客户端在注册时使用自己的 IP，而不是主机名
        # 这是生产环境的最佳实践。避免主机名解析问题
@doc
----
</t>
<t tx="swot.20251007085454.6" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d31302d30357103752e">@doc
[source,yaml]
----
@c
@language yaml
feign:
    circuitbreaker:
        enabled: true
@doc
----

</t>
<t tx="swot.20251007085454.7" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d31302d30357103752e">@doc
[source,yaml]
----
@c
@language yaml
resilience4j:
    circuitbreaker:
        configs:
            default: # --New 让 SpringCloud 自动管理服务名，否则找不到断路器
                sliding-window-size: 5                  # 需要 5次调用来计算失败率
                failure-rate-threshold: 50              # 50% 失败率才跳闸
                wait-duration-in-open-state: 10s        # 10 秒后进入半开状态
                permitted-number-of-calls-in-half-open-state: 2     # 半开状态允许 2 次调用
                sliding-window-type: COUNT_BASED        # 基于调用次数
                record-exceptions: # 哪些异常算失败
                    - org.springframework.web.client.HttpServerErrorException
                    - org.springframework.web.client.ResourceAccessException
                    - java.lang.RuntimeException
                    - java.io.IOException
                ignore-exceptions: # 忽略的异常类型
                    - java.lang.IllegalArgumentException
                register-health-indicator: true         # --New 启用健康检查
@doc
----

NOTE: 实际生产要宽松一些的。

[caption=]
测试 vs 生产
[cols="1,1,1",options="header"]
|===
| 场景    | 测试配置 | 生产配置
| 窗口大小 | 5 次调用 | 100次调用
| 故障阈值 | 50%     | 75%
| 恢复时间 | 10 秒   | 60秒
| 目的    | 快速验证 | 稳定运行
|===
</t>
<t tx="swot.20251007085454.8" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d31302d30357103752e">@doc
[source,yaml]
----
@c
@language yaml
management:
    endpoints:
        web:
            exposure:
                include: health,info,circuitbreakerevents  # 暴露断路器事件端点
    endpoint:
        health:
            show-details: always
    health:
        circuitbreakers:
            enabled: true  # 启用断路器健康检查
@doc
----

</t>
<t tx="swot.20251007085454.9">@doc
[source,yaml]
----
@c
@language yaml
logging:
    level:
        com.tjise.serviceorder.client: debug
@doc
----

</t>
<t tx="swot.20251007091447.1">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceorder.config;

import feign.Logger;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class FeignConfig {
    @Bean
    Logger.Level feignLoggerLevel() {
        return Logger.Level.FULL;
    }
}
@doc
----
</t>
<t tx="swot.20251007151619.1">@language java
@others
</t>
<t tx="swot.20251007152600.1">@language asciidoc
下面先模拟查询商品微服务返回超时 readTimeout 大于 FeignClient 默认的 60s，设置为 100s，这样可以模拟出超时的效果来。

测试步骤：

. 启动 Eureka-server 注册中心
. 启动 service-item 微服务
. 启动 service-order 微服务

. 访问下面链接会在 60s 超时
* http :8091/order/201810300001

....
HTTP/1.1 500
Connection: close
Content-Type: application/json
Date: Tue, 07 Oct 2025 12:28:55 GMT
Transfer-Encoding: chunked

{
    "error": "Internal Server Error",
    "path": "/order/201810300001",
    "status": 500,
    "timestamp": "2025-10-07T12:28:55.156+00:00"
}
....


.微服务 service-order 显示 readTimeout
....
java.net.SocketTimeoutException: Read timed out -&gt; 显示读取超时了
	at java.net.SocketInputStream.socketRead0(Native Method) ~[na:1.8.0_301]
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116) ~[na:1.8.0_301]
	at java.net.SocketInputStream.read(SocketInputStream.java:171) ~[na:1.8.0_301]
	at java.net.SocketInputStream.read(SocketInputStream.java:141) ~[na:1.8.0_301]
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:246) ~[na:1.8.0_301]
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:286) ~[na:1.8.0_301]
	at java.io.BufferedInputStream.read(BufferedInputStream.java:345) ~[na:1.8.0_301]
	at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:735) ~[na:1.8.0_301]
....
</t>
<t tx="swot.20251007173755.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@language yaml
@others
</t>
<t tx="swot.20251007173755.2"></t>
<t tx="swot.20251007173755.3">@doc
[source,yaml]
----
@c
server:
    port: 8091
@doc
----
</t>
<t tx="swot.20251007173755.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32317103752e">@doc
[source, yaml]
----
@c
# 起个名字作为服务名称(该服务注册到 eureka 注册中心的名称，比如订单服务)
spring:
    application:
        name: app-order
@doc
----
</t>
<t tx="swot.20251007173755.5" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d32327103752e">@doc
[source,yaml]
----
@c
# 服务注册到 eureka 注册中心的地址
eureka:
    client:
        service-url:
            # defaultZone: http://root:root@127.0.0.1:8761/eureka/
            defaultZone: http://root:root@eureka1:8761/eureka/,http://root:root@eureka2:8762/eureka/,http://root:root@eureka3:8763/eureka/
        register-with-eureka: true  # 因为该应用为服务提供者，是 eureka 的一个客户端，需要注册到注册中心
        fetch-registry: true        # 是否需要从 eureka 上检索服务
    instance:
        prefer-ip-address: true     # 使用 IP地址 注册而不是主机名
        ip-address: 127.0.0.1       # 客户端在注册时使用自己的 IP，而不是主机名
                                    # 这是生产环境的最佳实践。避免主机名解析问题
@doc
----
</t>
<t tx="swot.20251007173755.6" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d31302d30377103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
.注释 feign 的断路器功能才能测出来我们自定义的 readTimeout 60s
[source,yaml]
----
@c
@language yaml
# feign:
  # circuitbreaker:
    # enabled: true
@doc
----

在`Resilience4JCircuitBreakerFactory`或`Resilience4JAutoConfiguration`类中，Spring Cloud 会覆盖 Resilience4j 的默认配置：

[source,java]
----
@language java
@Configuration
@ConditionalOnClass(CircuitBreaker.class)
public class Resilience4JAutoConfiguration {
    
    @Bean
    @ConditionalOnMissingBean
    public CircuitBreakerConfig circuitBreakerConfig() {
        return CircuitBreakerConfig.custom()
            // Spring Cloud 会设置更严格的默认值
            .slowCallDurationThreshold(Duration.ofSeconds(5))  // 这里设置为5秒
            .slowCallRateThreshold(100)
            .build();
    }
}
----
</t>
<t tx="swot.20251007173755.7" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d31302d30357103752e">@doc
[source,yaml]
----
@c
@language yaml
resilience4j:
  circuitbreaker:
    instances:
      # OrderService:  这里就要改成与 Feign 要使用的 Eureka 服务名一样才行，如下面改成 app-item
      app-item:
        sliding-window-size: 5                  # 需要 5次调用来计算失败率
        failure-rate-threshold: 50              # 50% 失败率才跳闸
        wait-duration-in-open-state: 10s        # 10 秒后进入半开状态
        permitted-number-of-calls-in-half-open-state: 2     # 半开状态允许 2 次调用
        sliding-window-type: COUNT_BASED        # 基于调用次数
        record-exceptions:                      # 哪些异常算失败
          - org.springframework.web.reactive.function.client.WebClientResponseException
          - java.lang.RuntimeException
          - java.io.IOException
        ignore-exceptions:                      # 忽略的异常类型
          - java.lang.IllegalArgumentException
@doc
----

NOTE: 实际生产要宽松一些的。

[caption=]
测试 vs 生产
[cols="1,1,1",options="header"]
|===
| 场景    | 测试配置 | 生产配置
| 窗口大小 | 5 次调用 | 100次调用
| 故障阈值 | 50%     | 75%
| 恢复时间 | 10 秒   | 60秒
| 目的    | 快速验证 | 稳定运行
|===
</t>
<t tx="swot.20251007175915.1">package com.tjise.serviceitem.service;

import com.tjise.serviceitem.pojo.Item;
import org.springframework.stereotype.Service;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

</t>
<t tx="swot.20251007180040.1">@Service
public class ItemService {
    @others
}
</t>
<t tx="swot.20251007180157.1">private static final Map&lt;Long, Item&gt; ITEM_MAP = new HashMap&lt;Long, Item&gt;();

static {// 准备一些静态数据，模拟数据库，只是为了简单而已
    ITEM_MAP.put(1L, new Item(1L, "商品1", "http://图片1", "商品描述1", 1000L));
    ITEM_MAP.put(2L, new Item(2L, "商品2", "http://图片2", "商品描述2", 2000L));
    ITEM_MAP.put(3L, new Item(3L, "商品3", "http://图片3", "商品描述3", 3000L));
    ITEM_MAP.put(4L, new Item(4L, "商品4", "http://图片4", "商品描述4", 4000L));
    ITEM_MAP.put(5L, new Item(5L, "商品5", "http://图片5", "商品描述5", 5000L));
    ITEM_MAP.put(6L, new Item(6L, "商品6", "http://图片6", "商品描述6", 6000L));
    ITEM_MAP.put(7L, new Item(7L, "商品7", "http://图片7", "商品描述7", 7000L));
    ITEM_MAP.put(8L, new Item(8L, "商品8", "http://图片8", "商品描述8", 8000L));
    ITEM_MAP.put(9L, new Item(9L, "商品9", "http://图片9", "商品描述9", 9000L));
    ITEM_MAP.put(10L, new Item(10L, "商品10", "http://图片10", "商品描述10", 10000L));
}
</t>
<t tx="swot.20251007180253.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d31302d30377103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
/**
 * 模拟实现商品查询
 *
 * @param id
 * @return
 */
public Item queryItemById(Long id) {

    // 模拟超时 100s 大于 FeignClient 默认的 60s 超时，可以实现 FeignClient readTimeout 效果。
    try {
        TimeUnit.SECONDS.sleep(100);
    } catch (InterruptedException e) {
        throw new RuntimeException(e);
    }

    return ITEM_MAP.get(id);
}
@doc
----

</t>
<t tx="swot.20251007203558.1"></t>
</tnodes>
</leo_file>
