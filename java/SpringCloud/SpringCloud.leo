<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: https://leo-editor.github.io/leo-editor/leo_toc.html -->
<leo_file xmlns:leo="https://leo-editor.github.io/leo-editor/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="swot.20250909151313.2" descendentVnodeUnknownAttributes=""><vh>@adoc SpringClound.adoc</vh>
<v t="swot.20250909151510.1" descendentVnodeUnknownAttributes=""><vh>Spring Cloud 微服务</vh>
<v t="swot.20250909151547.1"><vh>1. Spring Cloud 微服务介绍</vh>
<v t="swot.20250909160528.1"><vh>1.1 什么是微服务？</vh></v>
<v t="swot.20250909160632.1"><vh>1.2 微服务带来的新挑战</vh></v>
<v t="swot.20250909160640.1"><vh>1.3 Spring Cloud？</vh></v>
<v t="swot.20250909160728.1"><vh>1.4 Cloud 的核心组件/子项目</vh></v>
<v t="swot.20250909160750.1"><vh>1.5 Cloud 的流派</vh></v>
<v t="swot.20250909160832.1"><vh>1.6 总结</vh></v>
</v>
<v t="swot.20250909151323.1"><vh>2. 创建一个空的工程 micro-service</vh></v>
<v t="swot.20250911081358.1" descendentVnodeUnknownAttributes="7d71005803000000302e3471017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313871077573732e"><vh>3. 创建商品微服务模块 service-item</vh>
<v t="swot.20250912101224.1"><vh>file -&gt; service-item/pom.xml</vh></v>
<v t="swot.20250912104007.1"><vh>file -&gt; service-item/src/main/java/com/tjise/serviceitem/pojo/Item.java</vh></v>
<v t="swot.20250912112243.1"><vh>file -&gt; service-item/src/main/java/com/tjise/serviceitem/service/ItemService.java</vh></v>
<v t="swot.20250912113856.1"><vh>file -&gt; service-item/src/main/java/com/tjise/serviceitem/controller/ItemController.java</vh></v>
<v t="swot.20250918221324.1" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313871077573732e"><vh>file -&gt; service-item/src/main/java/com/tjise/serviceitem/ServiceItemApplication.java</vh></v>
<v t="swot.20250912123428.1"><vh>file -&gt; service-item/src/main/resources/application.yml</vh></v>
</v>
<v t="swot.20250912140740.1"><vh>4. 创建订单微服务模块 service-order</vh>
<v t="swot.20250919081656.1"><vh>file -&gt; service-order/pom.xml</vh></v>
<v t="swot.20250912140845.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/pojo/Item.java</vh></v>
<v t="swot.20250912140908.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/pojo/Order.java</vh></v>
<v t="swot.20250912141126.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/pojo/OrderDetail.java</vh></v>
<v t="swot.20250913160821.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/OrderService.java</vh></v>
<v t="swot.20250913164316.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh></v>
<v t="swot.20250913164255.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/controller/OrderController.java</vh></v>
<v t="swot.20250913170215.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh></v>
<v t="swot.20250913172427.1"><vh>file -&gt; service-order/src/main/resources/application.yml</vh></v>
</v>
<v t="swot.20250914085607.1" descendentVnodeUnknownAttributes="7d7100285809000000302e302e302e312e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755809000000302e312e302e302e3071197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b01580a00000070726973657464617465711e580a000000323032352d30392d3134711f75580500000069636f6e7371205d71217d712228680b680c680c680d680e580d000000636c656f2f707269312e706e6771236810681168124b0068134b0268144b0168156816681768187561755809000000302e312e312e312e3071247d7125285808000000616e6e6f7461746571267d71272858080000007072696f7269747971284b02580a000000707269736574646174657129580a000000323032352d30392d3134712a75580500000069636f6e73712b5d712c7d712d28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67712e680e580d000000636c656f2f707269322e706e67712f6810681168124b0068134b0268144b0168156816681768187561755809000000302e312e322e312e3171307d7131285808000000616e6e6f7461746571327d71332858080000007072696f7269747971344b03580a000000707269736574646174657135580a000000323032352d30392d3134713675580500000069636f6e7371375d71387d713928680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67713a680e580d000000636c656f2f707269332e706e67713b6810681168124b0068134b0268144b0168156816681768187561755809000000302e322e302e312e30713c7d713d5808000000616e6e6f74617465713e7d713f2858080000007072696f7269747971404d0f27580a000000707269736574646174657141580a000000323032352d30392d3134714275735809000000302e322e302e312e3171437d7144285808000000616e6e6f7461746571457d71462858080000007072696f7269747971474b01580a000000707269736574646174657148580a000000323032352d30392d3134714975580500000069636f6e73714a5d714b7d714c28680b680c680c680d680e580d000000636c656f2f707269312e706e67714d6810681168124b0068134b0268144b0168156816681768187561755805000000302e322e31714e7d714f5808000000616e6e6f7461746571507d71512858080000007072696f7269747971524d0f27580a000000707269736574646174657153580a000000323032352d30392d3134715475735809000000302e332e302e302e3071557d71565808000000616e6e6f7461746571577d71582858080000007072696f7269747971594d0f27580a00000070726973657464617465715a580a000000323032352d30392d3134715b75735809000000302e332e302e302e31715c7d715d285808000000616e6e6f74617465715e7d715f2858080000007072696f7269747971604b01580a000000707269736574646174657161580a000000323032352d30392d3134716275580500000069636f6e7371635d71647d716528680b680c680c680d680e580d000000636c656f2f707269312e706e6771666810681168124b0068134b0268144b0168156816681768187561755809000000302e332e312e312e3071677d71685808000000616e6e6f7461746571697d716a2858080000007072696f72697479716b4d0f27580a00000070726973657464617465716c580a000000323032352d30392d3134716d75735809000000302e332e312e312e31716e7d716f5808000000616e6e6f7461746571707d71712858080000007072696f7269747971724d0f27580a000000707269736574646174657173580a000000323032352d30392d3134717475735809000000302e332e312e312e3271757d7176285808000000616e6e6f7461746571777d71782858080000007072696f7269747971794b02580a00000070726973657464617465717a580a000000323032352d30392d3134717b75580500000069636f6e73717c5d717d7d717e28680b680c680c682e680e580d000000636c656f2f707269322e706e67717f6810681168124b0068134b0268144b0168156816681768187561755805000000302e332e3271807d7181285808000000616e6e6f7461746571827d71832858080000007072696f7269747971844b03580a000000707269736574646174657185580a000000323032352d30392d3134718675580500000069636f6e7371875d71887d718928680b680c680c683a680e580d000000636c656f2f707269332e706e67718a6810681168124b0068134b0268144b016815681668176818756175752e"><vh>5. HTTP 客户端</vh>
<v t="swot.20250914092716.1" descendentVnodeUnknownAttributes="7d71005807000000302e302e312e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>5.1 RestTemplate -- Spring 提供的传统同步 HTTP 客户端</vh>
<v t="swot.20250914141436.1" descendentVnodeUnknownAttributes="7d71005805000000302e312e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh>
<v t="swot.20250914174528.1"><vh>@ignore-node import</vh></v>
<v t="swot.20250914174817.1" descendentVnodeUnknownAttributes="7d71005803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>class ItemService</vh>
<v t="swot.20250914175541.1"><vh>@ignore-node 方式一：字段注入（需要 @Autowired）</vh></v>
<v t="swot.20250914175616.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>方式二 单个构造函数注入</vh></v>
<v t="swot.20250914175705.1"><vh>@ignore-node queryItemById</vh></v>
</v>
</v>
</v>
<v t="swot.20250914105307.1" descendentVnodeUnknownAttributes="7d7100285807000000302e302e302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755807000000302e312e312e3071197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3134711f75580500000069636f6e7371205d71217d712228680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677123680e580d000000636c656f2f707269322e706e6771246810681168124b0068134b0268144b0168156816681768187561755807000000302e322e312e3171257d7126285808000000616e6e6f7461746571277d71282858080000007072696f7269747971294b03580a00000070726973657464617465712a580a000000323032352d30392d3134712b75580500000069636f6e73712c5d712d7d712e28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67712f680e580d000000636c656f2f707269332e706e6771306810681168124b0068134b0268144b016815681668176818756175752e"><vh>5.2 RestTemplate + OkHttp 可以兼容老代码</vh>
<v t="swot.20250914180307.1" descendentVnodeUnknownAttributes="7d71005805000000302e302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/pom.xml</vh>
<v t="swot.20250914181023.1" descendentVnodeUnknownAttributes="7d71005803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@ignore-node project</vh>
<v t="swot.20250914181123.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>okhttp 依赖</vh></v>
</v>
</v>
<v t="swot.20250914182058.1" descendentVnodeUnknownAttributes="7d71005805000000302e312e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh>
<v t="swot.20250914182242.1"><vh>@ignore-node import</vh></v>
<v t="swot.20250914182310.1" descendentVnodeUnknownAttributes="7d71005803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@ignore-node class ServiceOrderApplication</vh>
<v t="swot.20250914182350.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>RestTemplate restTemplate</vh></v>
</v>
</v>
<v t="swot.20250914195444.1" descendentVnodeUnknownAttributes="7d71005805000000302e312e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh>
<v t="swot.20250914195444.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250914195444.3" descendentVnodeUnknownAttributes="7d71005803000000302e3171017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@ignore-node class ItemService</vh>
<v t="swot.20250914195444.4"><vh>@ignore-node 方式一：字段注入（需要 @Autowired）</vh></v>
<v t="swot.20250914195444.5" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>方式二 单个构造函数注入 -- 增加了查看是否成功使用了 OkHttp 打印</vh></v>
<v t="swot.20250914195444.6"><vh>@ignore-node queryItemById</vh></v>
</v>
</v>
</v>
<v t="swot.20250914091119.1" descendentVnodeUnknownAttributes="7d7100285807000000302e302e312e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735807000000302e302e312e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3134710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755803000000302e3171207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d313471267573752e"><vh>5.3 OkHttp -- 单独使用 Square 开源的高性能 HTTP 客户端</vh>
<v t="swot.20250914204525.1" descendentVnodeUnknownAttributes="7d7100285805000000302e312e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735805000000302e312e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3134710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh>
<v t="swot.20250914204525.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250914204525.3" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735803000000302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3134710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>@ignore-node class ServiceOrderApplication</vh>
<v t="swot.20250914204525.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node RestTemplate restTemplate</vh></v>
<v t="swot.20250914102420.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>OkHttpClient okHttpClient</vh></v>
</v>
</v>
<v t="swot.20250914105516.1" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh></v>
</v>
<v t="swot.20250914085621.1" descendentVnodeUnknownAttributes="7d7100285807000000302e302e302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735807000000302e302e302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3134710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755807000000302e312e312e3071207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3134712675735807000000302e312e312e3171277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3134712d75735807000000302e312e312e32712e7d712f285808000000616e6e6f7461746571307d71312858080000007072696f7269747971324b02580a000000707269736574646174657133580a000000323032352d30392d3134713475580500000069636f6e7371355d71367d71372868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e6771386815580d000000636c656f2f707269322e706e6771396817681868194b00681a4b02681b4b01681c681d681e681f7561755803000000302e32713a7d713b285808000000616e6e6f74617465713c7d713d2858080000007072696f72697479713e4b03580a00000070726973657464617465713f580a000000323032352d30392d3134714075580500000069636f6e7371415d71427d71432868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e6771446815580d000000636c656f2f707269332e706e6771456817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>5.4 WebClient  -- Spring WebFlux 提供的响应式 HTTP 客户端</vh>
<v t="swot.20250914212915.1" descendentVnodeUnknownAttributes="7d7100285805000000302e302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735805000000302e302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3134710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>file -&gt; service-order/pom.xml</vh>
<v t="swot.20250914212915.2" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735803000000302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b01580a00000070726973657464617465710d580a000000323032352d30392d3134710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677114580700000072656c506174687115580d000000636c656f2f707269312e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f756175752e"><vh>@ignore-node project</vh>
<v t="swot.20250914212915.3" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node okhttp 依赖</vh></v>
<v t="swot.20250914101602.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>WebClient</vh></v>
</v>
</v>
<v t="swot.20250914213134.1" descendentVnodeUnknownAttributes="7d7100285805000000302e312e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735805000000302e312e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3134710e75735805000000302e312e32710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b02580a000000707269736574646174657114580a000000323032352d30392d3134711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67711b580700000072656c50617468711c580d000000636c656f2f707269322e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e71255801000000317126756175752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh>
<v t="swot.20250914213134.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250914213134.3" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3134710e75735803000000302e32710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b02580a000000707269736574646174657114580a000000323032352d30392d3134711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67711b580700000072656c50617468711c580d000000636c656f2f707269322e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e71255801000000317126756175752e"><vh>@ignore-node class ServiceOrderApplication</vh>
<v t="swot.20250914213134.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node RestTemplate restTemplate</vh></v>
<v t="swot.20250914213134.5" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node OkHttpClient okHttpClient</vh></v>
<v t="swot.20250914102436.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>WebClient</vh></v>
</v>
</v>
<v t="swot.20250914214630.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3134710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/service/ItemService.java</vh></v>
</v>
<v t="swot.20250914103506.1"><vh>5.5  RestClient -- Spring 6.1 才支持（目前的 Spring Boot 2.7.18 使用的是 Spring 5.3.x）</vh></v>
</v>
<v t="swot.20250920073920.1" descendentVnodeUnknownAttributes="7d7100285805000000302e302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3135710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755805000000302e302e3171197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3135711f75735807000000302e302e312e3171207d7121285808000000616e6e6f7461746571227d71232858080000007072696f7269747971244b02580a000000707269736574646174657125580a000000323032352d30392d3135712675580500000069636f6e7371275d71287d712928680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67712a680e580d000000636c656f2f707269322e706e67712b6810681168124b0068134b0268144b0168156816681768187561755809000000302e302e312e312e30712c7d712d5808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304d0f27580a000000707269736574646174657131580a000000323032352d30392d3134713275735809000000302e302e312e312e3171337d71345808000000616e6e6f7461746571357d71362858080000007072696f7269747971374d0f27580a000000707269736574646174657138580a000000323032352d30392d3134713975735809000000302e302e312e312e32713a7d713b285808000000616e6e6f74617465713c7d713d2858080000007072696f72697479713e4b03580a00000070726973657464617465713f580a000000323032352d30392d3135714075580500000069636f6e7371415d71427d714328680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677144680e580d000000636c656f2f707269332e706e6771456810681168124b0068134b0268144b0168156816681768187561755805000000302e312e3071467d7147285808000000616e6e6f7461746571487d71492858080000007072696f72697479714a4b01580a00000070726973657464617465714b580a000000323032352d30392d3136714c75580500000069636f6e73714d5d714e7d714f28680b680c680c680d680e580d000000636c656f2f707269312e706e6771506810681168124b0068134b0268144b0168156816681768187561755805000000302e312e3171517d71525808000000616e6e6f7461746571537d71542858080000007072696f7269747971554d0f27580a000000707269736574646174657156580a000000323032352d30392d3135715775735807000000302e312e312e3171587d7159285808000000616e6e6f74617465715a7d715b2858080000007072696f72697479715c4b02580a00000070726973657464617465715d580a000000323032352d30392d3135715e75580500000069636f6e73715f5d71607d716128680b680c680c682a680e580d000000636c656f2f707269322e706e6771626810681168124b0068134b0268144b0168156816681768187561755809000000302e312e312e312e3071637d71645808000000616e6e6f7461746571657d71662858080000007072696f7269747971674d0f27580a000000707269736574646174657168580a000000323032352d30392d3134716975735809000000302e312e312e312e31716a7d716b5808000000616e6e6f74617465716c7d716d2858080000007072696f72697479716e4d0f27580a00000070726973657464617465716f580a000000323032352d30392d3134717075735809000000302e312e312e312e3271717d7172285808000000616e6e6f7461746571737d71742858080000007072696f7269747971754b03580a000000707269736574646174657176580a000000323032352d30392d3135717775580500000069636f6e7371785d71797d717a28680b680c680c6844680e580d000000636c656f2f707269332e706e67717b6810681168124b0068134b0268144b016815681668176818756175752e"><vh>6. service-order url 硬编码问题</vh>
<v t="swot.20250915094305.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3135710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3171197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3135711f75735805000000302e312e3171207d7121285808000000616e6e6f7461746571227d71232858080000007072696f7269747971244b02580a000000707269736574646174657125580a000000323032352d30392d3135712675580500000069636f6e7371275d71287d712928680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67712a680e580d000000636c656f2f707269322e706e67712b6810681168124b0068134b0268144b0168156816681768187561755807000000302e312e312e30712c7d712d5808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304d0f27580a000000707269736574646174657131580a000000323032352d30392d3134713275735807000000302e312e312e3171337d71345808000000616e6e6f7461746571357d71362858080000007072696f7269747971374d0f27580a000000707269736574646174657138580a000000323032352d30392d3134713975735807000000302e312e312e32713a7d713b285808000000616e6e6f74617465713c7d713d2858080000007072696f72697479713e4b03580a00000070726973657464617465713f580a000000323032352d30392d3135714075580500000069636f6e7371415d71427d714328680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677144680e580d000000636c656f2f707269332e706e6771456810681168124b0068134b0268144b016815681668176818756175752e"><vh>6.1 解决 service-order url 硬编码问题：使用 @Value</vh>
<v t="swot.20250915102329.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3135710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/resources/application.yml</vh></v>
<v t="swot.20250915140414.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3135710775735803000000302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b02580a00000070726973657464617465710d580a000000323032352d30392d3135710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677114580700000072656c506174687115580d000000636c656f2f707269322e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755805000000302e312e3071207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3134712675735805000000302e312e3171277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3134712d75735805000000302e312e32712e7d712f285808000000616e6e6f7461746571307d71312858080000007072696f7269747971324b03580a000000707269736574646174657133580a000000323032352d30392d3135713475580500000069636f6e7371355d71367d71372868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e6771386815580d000000636c656f2f707269332e706e6771396817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh>
<v t="swot.20250915140414.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250915140414.3" descendentVnodeUnknownAttributes="7d71002858010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3135710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3071197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3134711f75735803000000302e3171207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3134712675735803000000302e3271277d7128285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4b03580a00000070726973657464617465712c580a000000323032352d30392d3135712d75580500000069636f6e73712e5d712f7d713028680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677131680e580d000000636c656f2f707269332e706e6771326810681168124b0068134b0268144b016815681668176818756175752e"><vh>class ServiceOrderApplication</vh>
<v t="swot.20250915140414.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node RestTemplate restTemplate</vh></v>
<v t="swot.20250915140414.5" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node OkHttpClient okHttpClient</vh></v>
<v t="swot.20250915140414.6" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3135710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>WebClient</vh></v>
</v>
</v>
</v>
<v t="swot.20250915172449.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3136710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3171197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3135711f75735805000000302e312e3171207d7121285808000000616e6e6f7461746571227d71232858080000007072696f7269747971244b02580a000000707269736574646174657125580a000000323032352d30392d3135712675580500000069636f6e7371275d71287d712928680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67712a680e580d000000636c656f2f707269322e706e67712b6810681168124b0068134b0268144b0168156816681768187561755807000000302e312e312e30712c7d712d5808000000616e6e6f74617465712e7d712f2858080000007072696f7269747971304d0f27580a000000707269736574646174657131580a000000323032352d30392d3134713275735807000000302e312e312e3171337d71345808000000616e6e6f7461746571357d71362858080000007072696f7269747971374d0f27580a000000707269736574646174657138580a000000323032352d30392d3134713975735807000000302e312e312e32713a7d713b285808000000616e6e6f74617465713c7d713d2858080000007072696f72697479713e4b03580a00000070726973657464617465713f580a000000323032352d30392d3135714075580500000069636f6e7371415d71427d714328680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677144680e580d000000636c656f2f707269332e706e6771456810681168124b0068134b0268144b016815681668176818756175752e"><vh>6.2 解决 service-order url 硬编码问题：使用 @ConfigurationProperties</vh>
<v t="swot.20250916112922.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3136710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/utils/ItemProperties.java</vh></v>
<v t="swot.20250916113222.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3135710775735803000000302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b02580a00000070726973657464617465710d580a000000323032352d30392d3135710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677114580700000072656c506174687115580d000000636c656f2f707269322e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755805000000302e312e3071207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3134712675735805000000302e312e3171277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3134712d75735805000000302e312e32712e7d712f285808000000616e6e6f7461746571307d71312858080000007072696f7269747971324b03580a000000707269736574646174657133580a000000323032352d30392d3135713475580500000069636f6e7371355d71367d71372868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e6771386815580d000000636c656f2f707269332e706e6771396817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh>
<v t="swot.20250916113222.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250916113222.3" descendentVnodeUnknownAttributes="7d71002858010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3135710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3071197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3134711f75735803000000302e3171207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3134712675735803000000302e3271277d7128285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4b03580a00000070726973657464617465712c580a000000323032352d30392d3135712d75580500000069636f6e73712e5d712f7d713028680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677131680e580d000000636c656f2f707269332e706e6771326810681168124b0068134b0268144b016815681668176818756175752e"><vh>class ServiceOrderApplication</vh>
<v t="swot.20250916113222.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node RestTemplate restTemplate</vh></v>
<v t="swot.20250916113222.5" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node OkHttpClient okHttpClient</vh></v>
<v t="swot.20250916113222.6" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3135710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@Bean WebClient</vh></v>
</v>
</v>
</v>
</v>
<v t="swot.20250916132736.1" descendentVnodeUnknownAttributes="7d7100285809000000302e322e302e302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755809000000302e322e302e302e3171197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3138711f75580500000069636f6e7371205d71217d712228680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677123680e580d000000636c656f2f707269322e706e6771246810681168124b0068134b0268144b016815681668176818756175580b000000302e322e302e302e322e3071257d7126285808000000616e6e6f7461746571277d71282858080000007072696f7269747971294b03580a00000070726973657464617465712a580a000000323032352d30392d3138712b75580500000069636f6e73712c5d712d7d712e28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67712f680e580d000000636c656f2f707269332e706e6771306810681168124b0068134b0268144b0168156816681768187561755805000000302e322e3171317d7132285808000000616e6e6f7461746571337d71342858080000007072696f7269747971354b04580a000000707269736574646174657136580a000000323032352d30392d3138713775580500000069636f6e7371385d71397d713a28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67713b680e580d000000636c656f2f707269342e706e67713c6810681168124b0068134b0268144b0168156816681768187561755805000000302e322e32713d7d713e285808000000616e6e6f74617465713f7d71402858080000007072696f7269747971414b05580a000000707269736574646174657142580a000000323032352d30392d3138714375580500000069636f6e7371445d71457d714628680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677147680e580d000000636c656f2f707269352e706e6771486810681168124b0068134b0268144b0168156816681768187561755809000000302e332e302e302e3071497d714a285808000000616e6e6f74617465714b7d714c2858080000007072696f72697479714d4b01580a00000070726973657464617465714e580a000000323032352d30392d3230714f75580500000069636f6e7371505d71517d715228680b680c680c680d680e580d000000636c656f2f707269312e706e6771536810681168124b0068134b0268144b0168156816681768187561755809000000302e332e302e302e3171547d7155285808000000616e6e6f7461746571567d71572858080000007072696f7269747971584b02580a000000707269736574646174657159580a000000323032352d30392d3230715a7568505d715b7d715c28680b680c680c6823680e580d000000636c656f2f707269322e706e67715d6810681168124b0068134b0268144b016815681668176818756175580b000000302e332e302e302e322e30715e7d715f5808000000616e6e6f7461746571607d71612858080000007072696f7269747971624d0f27580a000000707269736574646174657163580a000000323032352d30392d313471647573580b000000302e332e302e302e322e3171657d71665808000000616e6e6f7461746571677d71682858080000007072696f7269747971694d0f27580a00000070726973657464617465716a580a000000323032352d30392d3134716b7573580b000000302e332e302e302e322e32716c7d716d285808000000616e6e6f74617465716e7d716f2858080000007072696f7269747971704b03580a000000707269736574646174657171580a000000323032352d30392d3138717275580500000069636f6e7371735d71747d717528680b680c680c682f680e580d000000636c656f2f707269332e706e6771766810681168124b0068134b0268144b0168156816681768187561755805000000302e332e3171777d7178285808000000616e6e6f7461746571797d717a2858080000007072696f72697479717b4b04580a00000070726973657464617465717c580a000000323032352d30392d3139717d75580500000069636f6e73717e5d717f7d718028680b680c680c683b680e580d000000636c656f2f707269342e706e6771816810681168124b0068134b0268144b0168156816681768187561755805000000302e332e3271827d71835808000000616e6e6f7461746571847d71852858080000007072696f7269747971864d0f27580a000000707269736574646174657187580a000000323032352d30392d3135718875735807000000302e332e322e3171897d718a285808000000616e6e6f74617465718b7d718c2858080000007072696f72697479718d4b05580a00000070726973657464617465718e580a000000323032352d30392d3139718f75580500000069636f6e7371905d71917d719228680b680c680c6847680e580d000000636c656f2f707269352e706e6771936810681168124b0068134b0268144b0168156816681768187561755809000000302e332e322e312e3071947d71955808000000616e6e6f7461746571967d71972858080000007072696f7269747971984d0f27580a000000707269736574646174657199580a000000323032352d30392d3134719a75735809000000302e332e322e312e31719b7d719c5808000000616e6e6f74617465719d7d719e2858080000007072696f72697479719f4d0f27580a0000007072697365746461746571a0580a000000323032352d30392d313471a175735809000000302e332e322e312e3271a27d71a3285808000000616e6e6f7461746571a47d71a52858080000007072696f7269747971a64b06580a0000007072697365746461746571a7580a000000323032352d30392d313971a875580500000069636f6e7371a95d71aa7d71ab28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e6771ac680e580d000000636c656f2f707269362e706e6771ad6810681168124b0068134b0268144b016815681668176818756175752e"><vh>7. 引入微服务注册、发现机制</vh>
<v t="swot.20250916133305.1"><vh>7.1 Eureka 介绍</vh></v>
<v t="swot.20250916134236.1"><vh>7.2 Eureka Server 的创建</vh>
<v t="swot.20250916141123.1"><vh>file -&gt; eureka/pom.xml</vh>
<v t="swot.20250916152133.1"><vh>1. properties 配置项目属性：Java 版本、Spring Boot 和 Spring Cloud 版本</vh></v>
<v t="swot.20250916152144.1"><vh>2. dependencyManagement 依赖管理：导入 Spring Boot 和 Spring Cloud 的依赖管理</vh></v>
<v t="swot.20250916152233.1"><vh>3. dependencies 项目依赖：添加 Eureka Server 依赖</vh></v>
<v t="swot.20250916152243.1"><vh>4. plugins 构建配置：添加 Spring Boot Maven 插件</vh></v>
</v>
<v t="swot.20250916155249.1"><vh>file -&gt; eureka/src/main/java/com/tjise/eureka/EurekaApplication.java</vh></v>
<v t="swot.20250916160550.1"><vh>file -&gt; eureka/src/main/resources/application.yml</vh></v>
<v t="swot.20250917094025.1"><vh>启动 Eureka Server 并测试网页管理端</vh></v>
</v>
<v t="swot.20250917113532.1" descendentVnodeUnknownAttributes="7d7100285807000000302e302e302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755807000000302e302e302e3171197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3138711f75580500000069636f6e7371205d71217d712228680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677123680e580d000000636c656f2f707269322e706e6771246810681168124b0068134b0268144b0168156816681768187561755809000000302e302e302e322e3071257d7126285808000000616e6e6f7461746571277d71282858080000007072696f7269747971294b03580a00000070726973657464617465712a580a000000323032352d30392d3138712b75580500000069636f6e73712c5d712d7d712e28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67712f680e580d000000636c656f2f707269332e706e6771306810681168124b0068134b0268144b0168156816681768187561755803000000302e3171317d7132285808000000616e6e6f7461746571337d71342858080000007072696f7269747971354b04580a000000707269736574646174657136580a000000323032352d30392d3138713775580500000069636f6e7371385d71397d713a28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67713b680e580d000000636c656f2f707269342e706e67713c6810681168124b0068134b0268144b0168156816681768187561755803000000302e32713d7d713e285808000000616e6e6f74617465713f7d71402858080000007072696f7269747971414b05580a000000707269736574646174657142580a000000323032352d30392d3138714375580500000069636f6e7371445d71457d714628680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677147680e580d000000636c656f2f707269352e706e6771486810681168124b0068134b0268144b016815681668176818756175752e"><vh>7.3 Eureka Server 注册商品微服务到</vh>
<v t="swot.20250917113753.1" descendentVnodeUnknownAttributes="7d7100285805000000302e302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755805000000302e302e3171197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3138711f75580500000069636f6e7371205d71217d712228680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677123680e580d000000636c656f2f707269322e706e6771246810681168124b0068134b0268144b0168156816681768187561755807000000302e302e322e3071257d7126285808000000616e6e6f7461746571277d71282858080000007072696f7269747971294b03580a00000070726973657464617465712a580a000000323032352d30392d3138712b75580500000069636f6e73712c5d712d7d712e28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67712f680e580d000000636c656f2f707269332e706e6771306810681168124b0068134b0268144b016815681668176818756175752e"><vh>file -&gt; service-item/pom.xml</vh>
<v t="swot.20250918182311.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3171197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3138711f75580500000069636f6e7371205d71217d712228680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677123680e580d000000636c656f2f707269322e706e6771246810681168124b0068134b0268144b0168156816681768187561755805000000302e322e3071257d7126285808000000616e6e6f7461746571277d71282858080000007072696f7269747971294b03580a00000070726973657464617465712a580a000000323032352d30392d3138712b75580500000069636f6e73712c5d712d7d712e28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67712f680e580d000000636c656f2f707269332e706e6771306810681168124b0068134b0268144b016815681668176818756175752e"><vh>@ignore-node project</vh>
<v t="swot.20250918182153.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>properties Add cloud Version 2021.0.8</vh></v>
<v t="swot.20250918182407.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>dependencyManagement Add cloud dependency</vh></v>
<v t="swot.20250918182711.1" descendentVnodeUnknownAttributes="7d71005803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>@ignore-node dependencies</vh>
<v t="swot.20250918182810.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>spring-cloud-starter-netflix-eureka-client</vh></v>
</v>
</v>
</v>
<v t="swot.20250918184444.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b04580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67710d580700000072656c50617468710e580d000000636c656f2f707269342e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-item/src/main/resources/application.yml</vh></v>
<v t="swot.20250913170621.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b05580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67710d580700000072656c50617468710e580d000000636c656f2f707269352e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-item/src/main/java/com/tjise/serviceitem/ServiceItemApplication.java</vh></v>
</v>
<v t="swot.20250918225928.1" descendentVnodeUnknownAttributes="7d7100285807000000302e302e302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3230710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755807000000302e302e302e3171197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3230711f7568085d71207d712128680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677122680e580d000000636c656f2f707269322e706e6771236810681168124b0068134b0268144b0168156816681768187561755809000000302e302e302e322e3071247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d30392d3134712a75735809000000302e302e302e322e31712b7d712c5808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4d0f27580a000000707269736574646174657130580a000000323032352d30392d3134713175735809000000302e302e302e322e3271327d7133285808000000616e6e6f7461746571347d71352858080000007072696f7269747971364b03580a000000707269736574646174657137580a000000323032352d30392d3138713875580500000069636f6e7371395d713a7d713b28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67713c680e580d000000636c656f2f707269332e706e67713d6810681168124b0068134b0268144b0168156816681768187561755803000000302e31713e7d713f285808000000616e6e6f7461746571407d71412858080000007072696f7269747971424b04580a000000707269736574646174657143580a000000323032352d30392d3139714475580500000069636f6e7371455d71467d714728680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677148680e580d000000636c656f2f707269342e706e6771496810681168124b0068134b0268144b0168156816681768187561755803000000302e32714a7d714b5808000000616e6e6f74617465714c7d714d2858080000007072696f72697479714e4d0f27580a00000070726973657464617465714f580a000000323032352d30392d3135715075735805000000302e322e3171517d7152285808000000616e6e6f7461746571537d71542858080000007072696f7269747971554b05580a000000707269736574646174657156580a000000323032352d30392d3139715775580500000069636f6e7371585d71597d715a28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67715b680e580d000000636c656f2f707269352e706e67715c6810681168124b0068134b0268144b0168156816681768187561755807000000302e322e312e30715d7d715e5808000000616e6e6f74617465715f7d71602858080000007072696f7269747971614d0f27580a000000707269736574646174657162580a000000323032352d30392d3134716375735807000000302e322e312e3171647d71655808000000616e6e6f7461746571667d71672858080000007072696f7269747971684d0f27580a000000707269736574646174657169580a000000323032352d30392d3134716a75735807000000302e322e312e32716b7d716c285808000000616e6e6f74617465716d7d716e2858080000007072696f72697479716f4b06580a000000707269736574646174657170580a000000323032352d30392d3139717175580500000069636f6e7371725d71737d717428680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e677175680e580d000000636c656f2f707269362e706e6771766810681168124b0068134b0268144b016815681668176818756175752e"><vh>7.4 Eureka 中发现商品微服务</vh>
<v t="swot.20250919080549.1" descendentVnodeUnknownAttributes="7d7100285805000000302e302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3230710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755805000000302e302e3171197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3230711f7568085d71207d712128680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677122680e580d000000636c656f2f707269322e706e6771236810681168124b0068134b0268144b0168156816681768187561755807000000302e302e322e3071247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d30392d3134712a75735807000000302e302e322e31712b7d712c5808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4d0f27580a000000707269736574646174657130580a000000323032352d30392d3134713175735807000000302e302e322e3271327d7133285808000000616e6e6f7461746571347d71352858080000007072696f7269747971364b03580a000000707269736574646174657137580a000000323032352d30392d3138713875580500000069636f6e7371395d713a7d713b28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67713c680e580d000000636c656f2f707269332e706e67713d6810681168124b0068134b0268144b016815681668176818756175752e"><vh>file -&gt; service-order/pom.xml</vh>
<v t="swot.20250919080549.2" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3230710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3171197d711a285808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4b02580a00000070726973657464617465711e580a000000323032352d30392d3230711f7568085d71207d712128680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677122680e580d000000636c656f2f707269322e706e6771236810681168124b0068134b0268144b0168156816681768187561755805000000302e322e3071247d71255808000000616e6e6f7461746571267d71272858080000007072696f7269747971284d0f27580a000000707269736574646174657129580a000000323032352d30392d3134712a75735805000000302e322e31712b7d712c5808000000616e6e6f74617465712d7d712e2858080000007072696f72697479712f4d0f27580a000000707269736574646174657130580a000000323032352d30392d3134713175735805000000302e322e3271327d7133285808000000616e6e6f7461746571347d71352858080000007072696f7269747971364b03580a000000707269736574646174657137580a000000323032352d30392d3138713875580500000069636f6e7371395d713a7d713b28680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67713c680e580d000000636c656f2f707269332e706e67713d6810681168124b0068134b0268144b016815681668176818756175752e"><vh>@ignore-node project</vh>
<v t="swot.20250919135501.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b01580a000000707269736574646174657106580a000000323032352d30392d3230710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e67710d580700000072656c50617468710e580d000000636c656f2f707269312e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>properties version</vh></v>
<v t="swot.20250919135651.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b02580a000000707269736574646174657106580a000000323032352d30392d3230710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e67710d580700000072656c50617468710e580d000000636c656f2f707269322e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>Add cloud dependency</vh></v>
<v t="swot.20250919135524.1" descendentVnodeUnknownAttributes="7d7100285803000000302e3071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3134710775735803000000302e3171087d71095808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4d0f27580a00000070726973657464617465710d580a000000323032352d30392d3134710e75735803000000302e32710f7d7110285808000000616e6e6f7461746571117d71122858080000007072696f7269747971134b03580a000000707269736574646174657114580a000000323032352d30392d3138711575580500000069636f6e7371165d71177d7118285804000000747970657119580400000066696c65711a681a58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67711b580700000072656c50617468711c580d000000636c656f2f707269332e706e67711d58050000007768657265711e580e0000006265666f7265486561646c696e65711f5807000000796f666673657471204b005807000000786f666673657471214b0258040000007870616471224b0158020000006f6e71235805000000766e6f646571245808000000636c656f49636f6e71255801000000317126756175752e"><vh>@ignore-node dependencies</vh>
<v t="swot.20250919080549.3" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node OkHttp 依赖</vh></v>
<v t="swot.20250919080549.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>@ignore-node WebClient 依赖</vh></v>
<v t="swot.20250919135739.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b03580a000000707269736574646174657106580a000000323032352d30392d3138710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e67710d580700000072656c50617468710e580d000000636c656f2f707269332e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>eureka-client 依赖</vh></v>
</v>
</v>
</v>
<v t="swot.20250919170635.1" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b04580a000000707269736574646174657106580a000000323032352d30392d3139710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e67710d580700000072656c50617468710e580d000000636c656f2f707269342e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>file -&gt; service-order/src/main/resources/application.yml</vh></v>
<v t="swot.20250919222308.1" descendentVnodeUnknownAttributes="7d71002858010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d3135710775735803000000302e3171087d7109285808000000616e6e6f74617465710a7d710b2858080000007072696f72697479710c4b05580a00000070726973657464617465710d580a000000323032352d30392d3139710e75580500000069636f6e73710f5d71107d7111285804000000747970657112580400000066696c657113681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677114580700000072656c506174687115580d000000636c656f2f707269352e706e677116580500000077686572657117580e0000006265666f7265486561646c696e6571185807000000796f666673657471194b005807000000786f6666736574711a4b02580400000078706164711b4b0158020000006f6e711c5805000000766e6f6465711d5808000000636c656f49636f6e711e580100000031711f7561755805000000302e312e3071207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3134712675735805000000302e312e3171277d71285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4d0f27580a00000070726973657464617465712c580a000000323032352d30392d3134712d75735805000000302e312e32712e7d712f285808000000616e6e6f7461746571307d71312858080000007072696f7269747971324b06580a000000707269736574646174657133580a000000323032352d30392d3139713475580500000069636f6e7371355d71367d71372868126813681358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e6771386815580d000000636c656f2f707269362e706e6771396817681868194b00681a4b02681b4b01681c681d681e681f756175752e"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/ServiceOrderApplication.java</vh>
<v t="swot.20250919222308.2"><vh>@ignore-node import</vh></v>
<v t="swot.20250919222308.3" descendentVnodeUnknownAttributes="7d71002858010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b05580a000000707269736574646174657106580a000000323032352d30392d3139710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e67710d580700000072656c50617468710e580d000000636c656f2f707269352e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e711758010000003171187561755803000000302e3071197d711a5808000000616e6e6f74617465711b7d711c2858080000007072696f72697479711d4d0f27580a00000070726973657464617465711e580a000000323032352d30392d3134711f75735803000000302e3171207d71215808000000616e6e6f7461746571227d71232858080000007072696f7269747971244d0f27580a000000707269736574646174657125580a000000323032352d30392d3134712675735803000000302e3271277d7128285808000000616e6e6f7461746571297d712a2858080000007072696f72697479712b4b06580a00000070726973657464617465712c580a000000323032352d30392d3139712d75580500000069636f6e73712e5d712f7d713028680b680c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e677131680e580d000000636c656f2f707269362e706e6771326810681168124b0068134b0268144b016815681668176818756175752e"><vh>class ServiceOrderApplication</vh>
<v t="swot.20250919222308.4" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>RestTemplate</vh></v>
<v t="swot.20250919222308.5" descendentVnodeUnknownAttributes="7d710058010000003071017d71025808000000616e6e6f7461746571037d71042858080000007072696f7269747971054d0f27580a000000707269736574646174657106580a000000323032352d30392d313471077573732e"><vh>OkHttpClient</vh></v>
<v t="swot.20250919222308.6" descendentVnodeUnknownAttributes="7d710058010000003071017d7102285808000000616e6e6f7461746571037d71042858080000007072696f7269747971054b06580a000000707269736574646174657106580a000000323032352d30392d3139710775580500000069636f6e7371085d71097d710a28580400000074797065710b580400000066696c65710c680c58320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e67710d580700000072656c50617468710e580d000000636c656f2f707269362e706e67710f580500000077686572657110580e0000006265666f7265486561646c696e6571115807000000796f666673657471124b005807000000786f666673657471134b0258040000007870616471144b0158020000006f6e71155805000000766e6f646571165808000000636c656f49636f6e71175801000000317118756175732e"><vh>WebClient</vh></v>
</v>
</v>
<v t="swot.20250920105836.1"><vh>测试微服务是否注册成功</vh>
<v t="swot.20250920110103.1"><vh>file -&gt; service-order/src/main/java/com/tjise/serviceorder/controller/OrderController.java</vh>
<v t="swot.20250920111410.1"><vh>docs</vh></v>
<v t="swot.20250920110131.1"><vh>@ignore-node import</vh></v>
<v t="swot.20250920110227.1"><vh>@ignore-node class OrderController</vh>
<v t="swot.20250920111059.1"><vh>@ignore-node queryOrderById</vh></v>
<v t="swot.20250920111147.1"><vh>get services in Eureka 看看都注册了哪些微服务</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="swot.20250909151313.2">@language asciidoc
:source-highlighter: pygments
:icons: font
:scripts: cjk
:stem: latexmath
:toc:
:toc: right
:toc-title: Table of Contents
:toclevels: 3</t>
<t tx="swot.20250909151323.1">@language asciidoc

image::img/create_empty_project.png[,800]

</t>
<t tx="swot.20250909151510.1">
++++
&lt;button id="toggleButton"&gt;Table of Contents&lt;/button&gt;
&lt;script&gt;
    // 获取按钮和 div 元素
    const toggleButton = document.getElementById('toggleButton');
    const contentDiv = document.getElementById('toc');
    contentDiv.style.display = 'block';

    // 添加点击事件监听器
    toggleButton.addEventListener('click', () =&gt; {
        // 切换 div 的显示状态
        // if (contentDiv.style.display === 'none' || contentDiv.style.display === '') {
        if (contentDiv.style.display === 'none') {
            contentDiv.style.display = 'block';
        } else {
            contentDiv.style.display = 'none';
        }
    });
&lt;/script&gt;
++++
</t>
<t tx="swot.20250909151547.1"></t>
<t tx="swot.20250909160528.1">@language asciidoc
1. 单体架构的困境
+
在传统单体架构（Monolithic Architecture）中，所有功能模块（如用户管理、订单管理、支付管理等）都被打包在一个大的应用程序中，并部署在一个应用服务器上。

* *优点*：开发、测试、部署简单。
* *缺点*：
  ** 复杂性高：代码庞大，耦合度高，维护困难。
  ** 技术栈僵化：难以引入新的技术或框架。
  ** 扩展性差：无法针对特定模块进行扩展，必须扩展整个应用。
  ** 部署不灵活：一个小修改就需要重新部署整个应用，风险高。
  ** 可靠性低：一个微小的问题可能导致整个应用崩溃。


2. 微服务架构的解决方案
+
微服务架构（Microservices Architecture）是一种将单个应用程序拆分为 #一组小而自治的服务# 的架构风格。

* *核心思想*：*拆分* 与 *解耦*。
* *每个服务*：
  ** 围绕 *业务能力* 构建。
  ** 拥有独立的 *数据库* 和 *数据模型*。
  ** 可以独立 *开发*、*部署*、*扩展* 和 *重启*。
  ** 通过轻量级的通信机制（如 HTTP/REST、gRPC）进行协作。

+
比喻：

* *单体应用* 像一个 *大商场* ：所有部门（服装、餐饮、超市）在一个大楼里，共享水电消防。一损俱损。
* *微服务* 像一个 *商业街* ：每个店铺（服务）独立经营，有自己的特色和库存，通过公共街道（网络）连接。一店装修，不影响其他店。

</t>
<t tx="swot.20250909160632.1">@language asciidoc
拆分成多个服务后，也引入了新的复杂性：

. 服务发现：服务实例动态变化，消费者如何找到提供者？
. 配置管理：如何统一管理所有服务的配置，并实现动态更新？
. 负载均衡：如何将请求合理地分发到多个服务实例上？
. 容错与熔断：如何防止一个服务故障导致整个系统雪崩？
. API网关：如何为外部客户端提供一个统一的入口，并处理跨切面问题（认证、限流、路由）？
. 分布式事务：如何保证跨多个服务的数据一致性？
. 监控与链路追踪：如何跟踪一个请求穿越多个服务的全过程，以便排查问题？

</t>
<t tx="swot.20250909160640.1">@language asciidoc
1. 定义
+
Spring Cloud 是一套基于 Spring Boot的 #微服务生态工具集#。它提供了一系列 #标准化的工具和组件#，用于快速解决微服务架构中的常见问题（如上述挑战），让我们能更专注于业务逻辑的开发。
+
*简单来说*：Spring Boot 让开发单个微服务变得简单，而 Spring Cloud 让 #管理和协调# 这些微服务变得简单。


2. 核心定位
+
Spring Cloud 通过封装 *Netflix*、*Alibaba* 等公司成熟的微服务解决方案，提供了 *开箱即用* 的分布式系统开发体验。

</t>
<t tx="swot.20250909160728.1">@language asciidoc
Spring Cloud是一个“全家桶”，包含众多组件，以下是其中最核心的几个：

[cols="1,3,2", options="header"]
|===
| 组件名称
| 功能
| 比喻

| *Eureka / Nacos*
| *服务发现与注册*：服务提供者启动后向注册中心注册自己的地址，消费者从注册中心拉取服务列表。
| *电话簿*：服务在这里注册和查找彼此的地址。

| *Ribbon / LoadBalancer*
| *客户端负载均衡*：从服务列表中选择一个实例，将请求分发过去。
| *导游*：在多个相同的服务实例中，选择一个带你去。

| *Feign / OpenFeign*
| *声明式HTTP客户端*：基于接口和注解的方式调用远程服务，像调用本地方法一样简单。
| *翻译官*：帮你自动完成HTTP请求的组装和发送。

| *Hystrix / Sentinel*
| *熔断器*：当服务调用失败率达到阈值时，快速失败（熔断），防止雪崩效应，并提供服务降级。
| *保险丝*：电流过大（故障太多）自动熔断，保护整个电路（系统）。

| *Zuul / Gateway*
| *API网关*：所有外部请求的统一入口，负责路由、过滤、认证、限流、监控等。
| *前台/门卫*：所有访客必须经过这里，由它决定谁可以进、去哪里。

| *Config / Nacos*
| *分布式配置中心*：集中管理所有环境的配置文件，支持动态刷新。
| *公告板*：所有服务从这里获取最新配置，无需重启即可生效。

| *Sleuth / Zipkin*
| *分布式链路追踪*：跟踪一个请求从开始到结束的完整路径，用于性能分析和故障排查。
| *快递追踪*：可以查看你的包裹（请求）经过了哪些中转站（服务）。
|===
</t>
<t tx="swot.20250909160750.1">@language asciidoc
目前主要有两大主流体系：

. *Netflix系*：Spring Cloud Netflix（如 Eureka, Hystrix, Zuul）是早期标准，目前已部分进入维护模式。

. *Alibaba系*：*Spring Cloud Alibaba* 是目前国内最主流的方案，它提供了一站式的微服务解决方案（如 Nacos, Sentinel, Seata），与 Spring Cloud 生态无缝集成，功能强大且活跃度高。

*建议*：新项目首选 *Spring Cloud Alibaba*。
</t>
<t tx="swot.20250909160832.1">@language asciidoc
* 微服务架构通过拆分和解耦，解决了单体应用的痛点，但也带来了分布式系统的复杂性。

* *Spring Cloud* 不是一门新技术，而是一个 *工具箱*，它提供了 *一整套标准化的解决方案* 来轻松应对这些复杂性。

* 使用 *Spring Boot + Spring Cloud*，可以快速构建和治理一套完整、健壮的分布式微服务系统。
</t>
<t tx="swot.20250911081358.1">@language asciidoc
写完下面的代码后，使用 httpie 测试一下

http :8081/item/1

</t>
<t tx="swot.20250912101224.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-item&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-item&lt;/name&gt;
    &lt;description&gt;service-item&lt;/description&gt;
    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        
        &lt;!-- Lombok --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;


&lt;/project&gt;
</t>
<t tx="swot.20250912104007.1">@language java
package com.tjise.serviceitem.pojo;

import lombok.Data;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Item {
    
    private Long id;
    
    private String title;
    
    private String pic;
    
    private String desc;
    
    private Long price;
}
</t>
<t tx="swot.20250912112243.1">@language java
package com.tjise.serviceitem.service;

import com.tjise.serviceitem.pojo.Item;
import org.springframework.stereotype.Service;
import java.util.HashMap;
import java.util.Map;

@Service
public class ItemService {

    private static final Map&lt;Long, Item&gt; ITEM_MAP = new HashMap&lt;Long, Item&gt;();

    static {// 准备一些静态数据，模拟数据库，只是为了简单而已
        ITEM_MAP.put(1L, new Item(1L, "商品1", "http://图片1", "商品描述1", 1000L));
        ITEM_MAP.put(2L, new Item(2L, "商品2", "http://图片2", "商品描述2", 2000L));
        ITEM_MAP.put(3L, new Item(3L, "商品3", "http://图片3", "商品描述3", 3000L));
        ITEM_MAP.put(4L, new Item(4L, "商品4", "http://图片4", "商品描述4", 4000L));
        ITEM_MAP.put(5L, new Item(5L, "商品5", "http://图片5", "商品描述5", 5000L));
        ITEM_MAP.put(6L, new Item(6L, "商品6", "http://图片6", "商品描述6", 6000L));
        ITEM_MAP.put(7L, new Item(7L, "商品7", "http://图片7", "商品描述7", 7000L));
        ITEM_MAP.put(8L, new Item(8L, "商品8", "http://图片8", "商品描述8", 8000L));
        ITEM_MAP.put(9L, new Item(9L, "商品9", "http://图片9", "商品描述9", 9000L));
        ITEM_MAP.put(10L, new Item(10L, "商品10", "http://图片10", "商品描述10", 10000L));
    }

    /**
     * 模拟实现商品查询
     *
     * @param id
     * @return
     */
    public Item queryItemById(Long id) {
        return ITEM_MAP.get(id);
    }

}
</t>
<t tx="swot.20250912113856.1">@language java
package com.tjise.serviceitem.controller;

import com.tjise.serviceitem.pojo.Item;
import com.tjise.serviceitem.service.ItemService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ItemController {

    @Autowired
    private ItemService itemService;

    /**
     * 对外提供接口服务，查询商品信息
     *
     * @param id
     * @return
     */
    @GetMapping(value = "item/{id}")
    public Item queryItemById(@PathVariable("id") Long id) {
        return this.itemService.queryItemById(id);
    }

}
</t>
<t tx="swot.20250912123428.1">@language python
server:
  port: 8081
</t>
<t tx="swot.20250912140740.1"></t>
<t tx="swot.20250912140845.1">@language java
package com.tjise.serviceorder.pojo;

import lombok.Data;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Item {
    
    private Long id;
    
    private String title;
    
    private String pic;
    
    private String desc;
    
    private Long price;
}
</t>
<t tx="swot.20250912140908.1">@language java
package com.tjise.serviceorder.pojo;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Date;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Order {

    private String orderId;

    private Long userId;

    private Date createDate;

    private Date updateDate;

    private List&lt;OrderDetail&gt; orderDetails;
}
</t>
<t tx="swot.20250912141126.1">@language java
package com.tjise.serviceorder.pojo;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class OrderDetail {
    private String orderId;
    private Item item;
}
</t>
<t tx="swot.20250913160821.1">@language java
package com.tjise.serviceorder.service;

import com.tjise.serviceorder.pojo.Order;
import com.tjise.serviceorder.pojo.OrderDetail;
import com.tjise.serviceorder.pojo.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.*;

/**
 * 订单服务类
 * 提供订单查询功能，并通过调用商品服务获取商品详细信息
 */
@Service
public class OrderService {

    // 使用静态Map模拟数据库存储订单数据
    private static final Map&lt;String, Order&gt; ORDER_DATA = new HashMap&lt;String, Order&gt;();

    // 初始化订单数据
    static {
        // 模拟数据库，构造测试数据
        Order order = new Order();
        order.setOrderId("201810300001");
        order.setCreateDate(new Date());
        order.setUpdateDate(order.getCreateDate());
        order.setUserId(1L);
        List&lt;OrderDetail&gt; orderDetails = new ArrayList&lt;OrderDetail&gt;();

        // 创建第一个商品详情（仅保存商品ID，需要调用商品微服务获取详细信息）
        Item item = new Item();
        item.setId(1L);
        orderDetails.add(new OrderDetail(order.getOrderId(), item));

        // 创建第二个商品详情
        item = new Item();
        item.setId(2L);
        orderDetails.add(new OrderDetail(order.getOrderId(), item));

        order.setOrderDetails(orderDetails);

        ORDER_DATA.put(order.getOrderId(), order);
    }

    // 注入商品服务，用于查询商品详细信息
    @Autowired
    private ItemService itemService;

    /**
     * 根据订单ID查询订单数据
     * 
     * @param orderId 订单ID
     * @return Order 订单信息，包含完整的商品详情
     */
    public Order queryOrderById(String orderId) throws IOException {
        // 从模拟数据库中查询订单
        Order order = ORDER_DATA.get(orderId);
        if (null == order) {
            return null;
        }
        
        // 获取订单详情列表
        List&lt;OrderDetail&gt; orderDetails = order.getOrderDetails();
        
        // 遍历订单详情，通过商品微服务查询商品详细数据
        for (OrderDetail orderDetail : orderDetails) {
            // 通过商品微服务查询商品详细数据
            Item item = itemService.queryItemById(orderDetail.getItem().getId());
            if (null == item) {
                continue;
            }
            // 将查询到的商品详细信息设置到订单详情中
            orderDetail.setItem(item);
        }

        return order;
    }
}
</t>
<t tx="swot.20250913164255.1">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceorder.controller;

import com.tjise.serviceorder.pojo.Order;
import com.tjise.serviceorder.service.OrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

/**
 * 订单控制器
 * 处理订单相关的HTTP请求
 */
@RestController
public class OrderController {
    
    // 注入订单服务
    @Autowired
    private OrderService orderService;

    /**
     * 根据订单ID查询订单信息
     * 
     * @param orderId 订单ID
     * @return Order 订单信息
     */
    @GetMapping(value = "order/{orderId}")
    public Order queryOrderById(@PathVariable("orderId") String orderId) {
        return orderService.queryOrderById(orderId);
    }
}
@language asciidoc
@doc
----

httpie 测试:
http :8082/order/201810300001
</t>
<t tx="swot.20250913164316.1">@language java
package com.tjise.serviceorder.service;

import com.tjise.serviceorder.pojo.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

/**
 * 商品服务类
 * 通过 REST 方式调用商品微服务获取商品信息
 */
@Service
public class ItemService {

    // Spring 框架对 RESTful 方式的 http 请求做了封装，来简化操作
    @Autowired
    private RestTemplate restTemplate;

    /**
     * 根据商品 ID 查询商品信息
     * 通过 REST 调用商品微服务获取商品详细数据
     * 
     * @param id 商品ID
     * @return Item 商品信息
     */
    public Item queryItemById(Long id) {
        return restTemplate.getForObject("http://127.0.0.1:8081/item/"
                + id, Item.class);
    }

}
</t>
<t tx="swot.20250913170215.1">@language java
package com.tjise.serviceorder;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.web.client.RestTemplate;

/**
 * 订单服务启动类
 * Spring Boot 应用程序入口点
 */
@SpringBootApplication
public class ServiceOrderApplication {
    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }

    /**
     * 创建RestTemplate实例
     * 用于调用其他微服务
     * 
     * @return RestTemplate
     */
    @Bean
    public RestTemplate restTemplate() {
        // 可以在这里添加拦截器来统一处理URL前缀
        return new RestTemplate();
    }
}
</t>
<t tx="swot.20250913170621.1" annotate="7d71002858080000007072696f7269747971014b05580a000000707269736574646174657102580a000000323032352d30392d31387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677104580700000072656c506174687105580d000000636c656f2f707269352e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceitem;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;

@SpringBootApplication
@EnableEurekaClient
public class ServiceItemApplication {

    public static void main(String[] args) {
        SpringApplication.run(ServiceItemApplication.class, args);
    }
}
@doc
----
</t>
<t tx="swot.20250913172427.1">@language python
server:
  port: 8082
</t>
<t tx="swot.20250914085607.1"></t>
<t tx="swot.20250914085621.1"></t>
<t tx="swot.20250914091119.1">@language asciidoc
OkHttp 的异步 API 在应用程序层面实现了与 Node.js 类似的高并发编程模型：通过非阻塞 I/O 和回调机制，最大化利用少量线程来处理海量网络连接，从而高效地处理高并发 HTTP 请求。
</t>
<t tx="swot.20250914092716.1">前面演示的是 方式一：字段注入（需要 @Autowired），
下面演示一下使用 方式二单个构造函数注入的例子。
</t>
<t tx="swot.20250914101602.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....</t>
<t tx="swot.20250914102420.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
@Bean
public OkHttpClient okHttpClient() {
    return new OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build();
}
@doc
----

</t>
<t tx="swot.20250914102436.1" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
@Bean
public WebClient webClient() {
    return WebClient.builder()
          .baseUrl("http://127.0.0.1:8081/item")
          .build();
}
@doc
----

</t>
<t tx="swot.20250914103506.1">@language asciidoc
RestClient 的主要价值在于它提供了一个现代化但又不失简单的 API，结合了 RestTemplate 的易用性和 WebClient 的功能强大，是未来 Spring 应用HTTP客户端调用的推荐选择。
</t>
<t tx="swot.20250914105307.1">为了兼容老的 RestTemplate 代码，也可以在 RestTemplate 中配置 OkHttp。

</t>
<t tx="swot.20250914105516.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceorder.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.tjise.serviceorder.pojo.Item;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.springframework.stereotype.Service;

import java.io.IOException;

@Service
public class ItemService {
    // 下面这两种方式是等价的，看自己的使用方式而定
    // 方式一：字段注入（需要 @Autowired）
    // @Autowired
    // private OkHttpClient client;

    // 方式二 单个构造函数注入
    private final OkHttpClient client;  // 单个构造函数注入（不需要 @Autowired
    private final ObjectMapper objectMapper;  // 可支持 json 序列化
    public ItemService(OkHttpClient client, ObjectMapper objectMapper) {
        this.client = client;
        this.objectMapper = objectMapper;
        // 检查请求工厂类型
        System.out.println("Using OkHttpClient: " + client.getClass().getName());
        // 打印：Using OkHttpClient: okhttp3.OkHttpClient
    }

    public Item queryItemById(Long id) throws IOException {
        Request request = new Request.Builder()
                .url("http://127.0.0.1:8081/item/" + id)
                .build();
        try (Response response = client.newCall(request).execute()) {
            // 读取响应体
            String json = response.body().string();
            // 使用注入的 objectMapper 反序列化成 JSON 字符串
            return objectMapper.readValue(json, Item.class);
        }
    }
}
@doc
----
</t>
<t tx="swot.20250914141436.1">@language java
@others
</t>
<t tx="swot.20250914174528.1">package com.tjise.serviceorder.service;

import com.tjise.serviceorder.pojo.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
</t>
<t tx="swot.20250914174817.1">/**
 * 商品服务类
 * 通过 REST 方式调用商品微服务获取商品信息
 */
@Service
public class ItemService {
    @others
}
</t>
<t tx="swot.20250914175541.1">// Spring 框架对 RESTful 方式的 http 请求做了封装，来简化操作
// @Autowired
// private RestTemplate restTemplate;
</t>
<t tx="swot.20250914175616.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
private final RestTemplate restTemplate;
public ItemService(RestTemplate restTemplate) {
    this.restTemplate = restTemplate;
}
@doc
----

</t>
<t tx="swot.20250914175705.1">/**
 * 根据商品 ID 查询商品信息
 * 通过 REST 调用商品微服务获取商品详细数据
 * 
 * @param id 商品ID
 * @return Item 商品信息
 */
public Item queryItemById(Long id) {
    return restTemplate.getForObject(
        "http://127.0.0.1:8081/item/" + id,
        Item.class
    );
}
</t>
<t tx="swot.20250914180307.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
@others
</t>
<t tx="swot.20250914181023.1">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-order&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-order&lt;/name&gt;
    &lt;description&gt;service-order&lt;/description&gt;
    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;

        &lt;!-- Lombok --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
        @others
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</t>
<t tx="swot.20250914181123.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 使用 Spring Boot 管理的版本： --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;
    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250914182058.1">@language java
@others
</t>
<t tx="swot.20250914182242.1">package com.tjise.serviceorder;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;
</t>
<t tx="swot.20250914182310.1">/**
 * 订单服务启动类
 * Spring Boot 应用程序入口点
 */
@SpringBootApplication
public class ServiceOrderApplication {

    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }
    @others
}
</t>
<t tx="swot.20250914182350.1" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
/**
 * 创建RestTemplate实例
 * 用于调用其他微服务
 * 
 * @return RestTemplate
 */
@Bean
public RestTemplate restTemplate() {
    // 可以在这里添加拦截器来统一处理URL前缀
    // return new RestTemplate();  // 未使用 OkHttp
    return new RestTemplate(new OkHttp3ClientHttpRequestFactory());
}
@doc
----
</t>
<t tx="swot.20250914195444.1">@language java
@others
</t>
<t tx="swot.20250914195444.2">package com.tjise.serviceorder.service;

import com.tjise.serviceorder.pojo.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
</t>
<t tx="swot.20250914195444.3">/**
 * 商品服务类
 * 通过 REST 方式调用商品微服务获取商品信息
 */
@Service
public class ItemService {
    @others
}
</t>
<t tx="swot.20250914195444.4">// Spring 框架对 RESTful 方式的 http 请求做了封装，来简化操作
// @Autowired
// private RestTemplate restTemplate;
</t>
<t tx="swot.20250914195444.5" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
private final RestTemplate restTemplate;
public ItemService(RestTemplate restTemplate) {  // 单个构造函数
    this.restTemplate = restTemplate;
    // 检查请求工厂类型
    System.out.println("Request Factory: " + restTemplate.getRequestFactory().getClass().getName());
    // 成功使用 OkHttp 会打印
    // Request Factory: org.springframework.http.client.OkHttp3ClientHttpRequestFactory
}
@doc
----

</t>
<t tx="swot.20250914195444.6">/**
 * 根据商品 ID 查询商品信息
 * 通过 REST 调用商品微服务获取商品详细数据
 * 
 * @param id 商品ID
 * @return Item 商品信息
 */
public Item queryItemById(Long id) {
    return restTemplate.getForObject(
        "http://127.0.0.1:8081/item/" + id,
        Item.class
    );
}
</t>
<t tx="swot.20250914204525.1">@language java
@others
</t>
<t tx="swot.20250914204525.2">package com.tjise.serviceorder;

import okhttp3.OkHttpClient;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import java.util.concurrent.TimeUnit;
</t>
<t tx="swot.20250914204525.3">/**
 * 订单服务启动类
 * Spring Boot 应用程序入口点
 */
@SpringBootApplication
public class ServiceOrderApplication {

    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }
    @others
}
</t>
<t tx="swot.20250914204525.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
/**
 * 创建RestTemplate实例
 * 用于调用其他微服务
 * 
 * @return RestTemplate
 */
@Bean
public RestTemplate restTemplate() {
    // 可以在这里添加拦截器来统一处理URL前缀
    // return new RestTemplate();  // 未使用 OkHttp
    return new RestTemplate(new OkHttp3ClientHttpRequestFactory());
}
@doc
----
</t>
<t tx="swot.20250914212915.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
@others
</t>
<t tx="swot.20250914212915.2">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-order&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-order&lt;/name&gt;
    &lt;description&gt;service-order&lt;/description&gt;
    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;

        &lt;!-- Lombok --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
        @others
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</t>
<t tx="swot.20250914212915.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 使用 Spring Boot 管理的版本： --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;
    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250914213134.1">@language java
@others
</t>
<t tx="swot.20250914213134.2">package com.tjise.serviceorder;

import okhttp3.OkHttpClient;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import java.util.concurrent.TimeUnit;
</t>
<t tx="swot.20250914213134.3">/**
 * 订单服务启动类
 * Spring Boot 应用程序入口点
 */
@SpringBootApplication
public class ServiceOrderApplication {

    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }
    @others
}
</t>
<t tx="swot.20250914213134.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
/**
 * 创建RestTemplate实例
 * 用于调用其他微服务
 * 
 * @return RestTemplate
 */
@Bean
public RestTemplate restTemplate() {
    // 可以在这里添加拦截器来统一处理URL前缀
    // return new RestTemplate();  // 未使用 OkHttp
    return new RestTemplate(new OkHttp3ClientHttpRequestFactory());
}
@doc
----
</t>
<t tx="swot.20250914213134.5" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
@Bean
public OkHttpClient okHttpClient() {
    return new OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build();
}
@doc
----

</t>
<t tx="swot.20250914214630.1" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d31347103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceorder.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.tjise.serviceorder.pojo.Item;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import java.io.IOException;

@Service
public class ItemService {
    // 下面这两种方式是等价的，看自己的使用方式而定
    // 方式一：字段注入（需要 @Autowired）
    // @Autowired
    // private WebClient webClient;

    // 方式二 单个构造函数注入
    private final WebClient webClient;
    public ItemService(WebClient webClient) {
        this.webClient = webClient;
    }

    public Item queryItemById(Long id) {
        return webClient.get()
            .uri("/{id}", id)
            .retrieve()
            .bodyToMono(Item.class)
            .block(); // 同步调用，如需要异步可去掉block()
    }
}
@doc
----
</t>
<t tx="swot.20250915094305.1">@language asciidoc
通过以上的测试我们发现，在订单系统中要调用商品微服务中的查询接口来获取数据，在订单微服务中将 url 硬编码到代码中，这样显然不好，因为，运行环境一旦发生变化这个 url 地址将不可用。

如何解决呢？

解决方案：将 url 地址写入到 yml 配置文件中。

</t>
<t tx="swot.20250915102329.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,python]
----
@c
@language python
server:
  port: 8082

# 新增 url 配置
myspcloud:
  item:
    url: http://127.0.0.1:8081/item/

@doc
----
</t>
<t tx="swot.20250915140414.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31357103752e">@language java
@others
</t>
<t tx="swot.20250915140414.2">package com.tjise.serviceorder;

import okhttp3.OkHttpClient;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import java.util.concurrent.TimeUnit;
</t>
<t tx="swot.20250915140414.3" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d31357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">/**
 * 订单服务启动类
 * Spring Boot 应用程序入口点
 */
@SpringBootApplication
public class ServiceOrderApplication {

    // 新增使用 @Value 注解获取配置的 url
    @Value("${myspcloud.item.url}")
    private String itemUrl;

    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }
    @others
}
</t>
<t tx="swot.20250915140414.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
/**
 * 创建RestTemplate实例
 * 用于调用其他微服务
 * 
 * @return RestTemplate
 */
@Bean
public RestTemplate restTemplate() {
    // 可以在这里添加拦截器来统一处理URL前缀
    // return new RestTemplate();  // 未使用 OkHttp
    return new RestTemplate(new OkHttp3ClientHttpRequestFactory());
}
@doc
----
</t>
<t tx="swot.20250915140414.5" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
@Bean
public OkHttpClient okHttpClient() {
    return new OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build();
}
@doc
----

</t>
<t tx="swot.20250915140414.6" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d31357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
@Bean
public WebClient webClient() {
    return WebClient.builder()
        .baseUrl(itemUrl)   // 使用注入的 Url
        .build();
}
@doc
----

</t>
<t tx="swot.20250915172449.1"></t>
<t tx="swot.20250916112922.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31367103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
package com.tjise.serviceorder.utils;

import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;


@Data
@Component
@ConfigurationProperties(prefix = "myspcloud.item")
public class ItemProperties {
    // 下面属性值的内容会从配置文件中被自动获取到
    private String url;
}
@doc
----

</t>
<t tx="swot.20250916113222.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31357103752e">@language java
@others
</t>
<t tx="swot.20250916113222.2">package com.tjise.serviceorder;

import com.tjise.serviceorder.utils.ItemProperties;
import okhttp3.OkHttpClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import java.util.concurrent.TimeUnit;
</t>
<t tx="swot.20250916113222.3" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d31357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">/**
 * 订单服务启动类
 * Spring Boot 应用程序入口点
 */
@SpringBootApplication
public class ServiceOrderApplication {

    // 新增 DI 注入 配置的 url
    @Autowired
    private ItemProperties itemProperties;

    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }
    @others
}
</t>
<t tx="swot.20250916113222.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
/**
 * 创建RestTemplate实例
 * 用于调用其他微服务
 * 
 * @return RestTemplate
 */
@Bean
public RestTemplate restTemplate() {
    // 可以在这里添加拦截器来统一处理URL前缀
    // return new RestTemplate();  // 未使用 OkHttp
    return new RestTemplate(new OkHttp3ClientHttpRequestFactory());
}
@doc
----
</t>
<t tx="swot.20250916113222.5" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
@Bean
public OkHttpClient okHttpClient() {
    return new OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build();
}
@doc
----

</t>
<t tx="swot.20250916113222.6" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d31357103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
// 直接注入也可以的
// public WebClient webClient(ItemServiceProperties properties) {
@Bean
public WebClient webClient() {
    return WebClient.builder()
        .baseUrl(itemProperties.getUrl())   // 使用注入的 Url
        .build();
}
@doc
----

</t>
<t tx="swot.20250916132736.1">@language asciidoc
* 问题：商品微服务 ip 发生变更则需要更改订单微服务的配置文件
* 问题：商品微服务有多个，订单微服务该链接哪个？

从而引入微服务注册、发现机制，如下。

image::img/service_register.png[,640]

1. 服务提供者将服务注册到注册中心
2. 服务消费者通过注册中心查找服务
3. 查找到服务后进行调用（这里就是无需硬编码url的解决方案）
4. 服务的消费者与服务注册中心保持心跳连接，一旦服务提供者的地址发生变更时，注册中心会通知服务消费者

</t>
<t tx="swot.20250916133305.1">@language asciidoc
Eureka 是 Netfix 开源的服务发现组件，本身是一个基于 REST 的服务。它包含 Server 和 Client 两部分。SpringCloud 将它集成在子项目 SpringCloud Netfix 中，从而实现微服务的注册与发现。

* Eureka Server 提供服务注册服务，各个节点启动后，会在 Eureka Server 中进行注册，这样 EurekaServer 中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到。

* Eureka Client 是一个 java 客户端，用于简化与 Eureka Server 的交互，客户端同时也有一个内置的、使用轮询(round-robin)负载算法的负载均衡器。

* 在应用启动后，将会向 Eureka Server 发送心跳,默认周期为 30 秒，如果 Eureka Server 在多个心跳周期内没有接收到某个节点的心跳，Eureka Server 将会从服务注册表中把这个服务节点移除(默认90秒)。

* Eureka Server 之间通过复制的方式完成数据的同步，Eureka 还提供了客户端缓存机制，即使所有的 Eureka Server 都挂掉，客户端依然可以利用缓存中的信息消费其他服务的 API。

综上，Eureka 通过心跳检查、客户端缓存等机制，确保了系统的高可用性、灵活性和可伸缩性。
</t>
<t tx="swot.20250916134236.1">@language asciidoc
创建一个 maven 的项目，命名为 eureka。

image::img/create_eureka_module.png[,800]

</t>
<t tx="swot.20250916141123.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@doc
[source,scss]
....
@c
@language xml
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;eureka&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;!-- 加入下面各项内容 --&gt;
    @others
&lt;/project&gt;
@doc
....
</t>
<t tx="swot.20250916152133.1">@doc
[source,scss]
....
@c
@language xml
&lt;properties&gt;
    &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;
    &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;!-- 这两个版本要匹配才行 --&gt;
    &lt;spring.boot.version&gt;2.7.18&lt;/spring.boot.version&gt;
    &lt;spring.cloud.version&gt;2021.0.8&lt;/spring.cloud.version&gt;
&lt;/properties&gt;
@doc
....
</t>
<t tx="swot.20250916152144.1">@doc
[source,scss]
....
@c
@language xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;!-- Spring Boot 依赖管理 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring.boot.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;!-- Spring Cloud依赖管理 --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring.cloud.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
@doc
....
</t>
<t tx="swot.20250916152233.1">@doc
[source,scss]
....
@c
@language xml
&lt;dependencies&gt;
    &lt;!-- Eureka Server核心依赖 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
@doc
....
</t>
<t tx="swot.20250916152243.1">@doc
[source,scss]
....
@c
@language xml
&lt;build&gt;
    &lt;plugins&gt;
        &lt;!-- Spring Boot Maven插件，用于打包可执行jar --&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;${spring.boot.version}&lt;/version&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
@doc
....
</t>
<t tx="swot.20250916155249.1">@language java
package com.tjise.eureka;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;

/**
 * Eureka Server启动类
 * 
 * @EnableEurekaServer 注解启用 Eureka Server 功能
 */
@SpringBootApplication
@EnableEurekaServer
public class EurekaApplication {
    
    public static void main(String[] args) {
        SpringApplication.run(EurekaApplication.class, args);
    }
}
</t>
<t tx="swot.20250916160550.1">@language python
server:
  port: 8761  # 1. Eureka Server端口设置为8761（默认端口）

eureka:
  instance:
    hostname: localhost  # 2. 设置主机名为localhost
  client:
    register-with-eureka: false  # 3. Eureka Server不向自己注册
    fetch-registry: false        # 4. Eureka 自己不需要获取服务注册信息
    service-url:
      # 5. 设置 Eureka Server 的访问地址
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
      
  server:
    enable-self-preservation: false  # 6. 关闭自我保护机制（开发环境建议关闭）
</t>
<t tx="swot.20250917094025.1">@language asciidoc
现在可以通过以下命令启动 Eureka Server：

. 进入eureka项目目录
* cd /Users/swot/swot-learning/java/SpringCloud/eureka

. 使用 IDEA 启动应用
* mvn spring-boot:run

. 或者先打包再运行
* mvn clean package
* java -jar target/eureka-1.0-SNAPSHOT.jar

启动后访问 http://localhost:8761 即可看到 Eureka Server 的管理界面。

image::img/eureka_admin_no_instance.png[]

</t>
<t tx="swot.20250917113532.1">@language asciidoc
成功注册 service-item 到 eureka 是这样的，如下图

image::img/eureka_admin_with_service-item.png[]
</t>
<t tx="swot.20250917113753.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
@others
</t>
<t tx="swot.20250918182153.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d31387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;properties&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;spring-cloud.version&gt;2021.0.8&lt;/spring-cloud.version&gt;
&lt;/properties&gt;
@doc
....
</t>
<t tx="swot.20250918182311.1">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-item&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-item&lt;/name&gt;
    &lt;description&gt;service-item&lt;/description&gt;
    @others
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</t>
<t tx="swot.20250918182407.1" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d31387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring-cloud.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
@doc
....
</t>
<t tx="swot.20250918182711.1">&lt;dependencies&gt;
    &lt;!-- 添加Spring Boot Web依赖 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;
    
    &lt;!-- 添加Spring Boot Test依赖 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;!-- Lombok --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
        &lt;artifactId&gt;lombok&lt;/artifactId&gt;
        &lt;optional&gt;true&lt;/optional&gt;
    &lt;/dependency&gt;
    @others
&lt;/dependencies&gt;
</t>
<t tx="swot.20250918182810.1" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d31387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 添加 Eureka 客户端依赖, 用于将服务注册到 Eureka --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250918184444.1" annotate="7d71002858080000007072696f7269747971014b04580a000000707269736574646174657102580a000000323032352d30392d31387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677104580700000072656c506174687105580d000000636c656f2f707269342e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,python]
----
@c
@language python
### 服务端口号(本身是一个web项目)
server:
    port: 8081

### 起个名字作为服务名称(该服务注册到eureka注册中心的名称，比如商品服务)
spring:
    application:
        name: app-item

### 服务注册到eureka注册中心的地址
eureka:
    client:
        service-url:
            defaultZone: http://127.0.0.1:8761/eureka/
        ### 因为该应用为服务提供者，是 eureka 的一个客户端，需要注册到注册中心
        register-with-eureka: true
        ### 是否需要从 eureka 上检索服务
        fetch-registry: true
    instance:
        # 使用IP地址注册而不是主机名
        prefer-ip-address: true
        # 客户端在注册时使用自己的IP，而不是主机名，是生产环境的最佳实践。避免主机名解析问题
        ip-address: 127.0.0.1
@doc
----

****
name 和 instance 两者都有重要作用，缺一不可：

- spring.application.name：服务的逻辑名称，用于服务发现和负载均衡
- eureka.instance 配置：实例的网络地址，用于实际通信

即使使用IP注册，仍然需要服务名称来进行服务发现和调用。
****
</t>
<t tx="swot.20250918221324.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31387103752e">@language java
package com.tjise.serviceitem;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ServiceItemApplication {

    public static void main(String[] args) {
        SpringApplication.run(ServiceItemApplication.class, args);
    }
}
</t>
<t tx="swot.20250918225928.1">@language asciidoc
之前我们在订单系统中是将商品微服务的地址进行了硬编码，现在，由于已经将商品服务注册到 Eureka 中，所以，只需要从 Eureka 中发现服务即可。

httpie 测试:
http :8082/order/201810300001
</t>
<t tx="swot.20250919080549.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
@others
</t>
<t tx="swot.20250919080549.2">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;

    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-order&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-order&lt;/name&gt;
    &lt;description&gt;service-order&lt;/description&gt;
    @others
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</t>
<t tx="swot.20250919080549.3" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 使用 Spring Boot 管理的版本： --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;
    &lt;artifactId&gt;okhttp&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250919080549.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,scss]
....
@c
@language xml
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....</t>
<t tx="swot.20250919081656.1">@first &lt;?xml version="1.0" encoding="UTF-8"?&gt;
@language xml
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
    &lt;groupId&gt;com.tjise&lt;/groupId&gt;
    &lt;artifactId&gt;service-order&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;service-order&lt;/name&gt;
    &lt;description&gt;service-order&lt;/description&gt;
    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;

        &lt;!-- Lombok --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</t>
<t tx="swot.20250919135501.1" annotate="7d71002858080000007072696f7269747971014b01580a000000707269736574646174657102580a000000323032352d30392d32307103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269312e706e677104580700000072656c506174687105580d000000636c656f2f707269312e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;properties&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;spring-cloud.version&gt;2021.0.8&lt;/spring-cloud.version&gt;
&lt;/properties&gt;
@doc
....
</t>
<t tx="swot.20250919135524.1">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;!-- Lombok --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
        &lt;artifactId&gt;lombok&lt;/artifactId&gt;
        &lt;optional&gt;true&lt;/optional&gt;
    &lt;/dependency&gt;
    @others
&lt;/dependencies&gt;
</t>
<t tx="swot.20250919135651.1" annotate="7d71002858080000007072696f7269747971014b02580a000000707269736574646174657102580a000000323032352d30392d32307103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269322e706e677104580700000072656c506174687105580d000000636c656f2f707269322e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring-cloud.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
@doc
....
</t>
<t tx="swot.20250919135739.1" annotate="7d71002858080000007072696f7269747971014b03580a000000707269736574646174657102580a000000323032352d30392d31387103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269332e706e677104580700000072656c506174687105580d000000636c656f2f707269332e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,scss]
....
@c
@language xml
&lt;!-- 添加 Eureka 客户端依赖, 用于将服务注册到 Eureka --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
&lt;/dependency&gt;
@doc
....
</t>
<t tx="swot.20250919170635.1" annotate="7d71002858080000007072696f7269747971014b04580a000000707269736574646174657102580a000000323032352d30392d31397103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269342e706e677104580700000072656c506174687105580d000000636c656f2f707269342e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,python]
----
@c
@language python
server:
    port: 8082

# 新增 url 配置
myspcloud:
    item:
        url: http://127.0.0.1:8081/item/

# 起个名字作为服务名称(该服务注册到 eureka 注册中心的名称，比如订单服务)
spring:
    application:
        name: app-order

# 服务注册到 eureka 注册中心的地址
eureka:
    client:
        service-url:
            defaultZone: http://127.0.0.1:8761/eureka
        # 因为该应用为服务提供者，是eureka的一个客户端，需要注册到注册中心
        register-with-eureka: true
        # 是否需要从eureka上检索服务
        fetch-registry: true
    instance:
        # 使用IP地址注册而不是主机名
        prefer-ip-address: true
        # 客户端在注册时使用自己的IP，而不是主机名，是生产环境的最佳实践。避免主机名解析问题
        ip-address: 127.0.0.1
@doc
----
</t>
<t tx="swot.20250919222308.1" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31357103752e">@language java
@others
</t>
<t tx="swot.20250919222308.2">package com.tjise.serviceorder;

import com.tjise.serviceorder.utils.ItemProperties;
import okhttp3.OkHttpClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.loadbalancer.LoadBalanced;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
import org.springframework.context.annotation.Bean;
import org.springframework.http.client.OkHttp3ClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import java.util.concurrent.TimeUnit;
</t>
<t tx="swot.20250919222308.3" annotate="7d71002858080000007072696f7269747971014b05580a000000707269736574646174657102580a000000323032352d30392d31397103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269352e706e677104580700000072656c506174687105580d000000636c656f2f707269352e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">/**
 * 订单服务启动类
 * Spring Boot 应用程序入口点
 */
@SpringBootApplication
@EnableEurekaClient  // 启用 Eureka 客户端功能
public class ServiceOrderApplication {
    // @Autowired
    // private ItemProperties itemProperties;  // 新增 DI 注入 配置的 url
    // 使用 Eureka 找服务名的方式，就用不到该对象来找配置参数了。

    public static void main(String[] args) {
        SpringApplication.run(ServiceOrderApplication.class, args);
    }
    @others
}
</t>
<t tx="swot.20250919222308.4" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
/**
 * 创建RestTemplate实例
 * 用于调用其他微服务
 * 
 * @return RestTemplate
 */
@Bean
public RestTemplate restTemplate() {
    // 可以在这里添加拦截器来统一处理URL前缀
    // return new RestTemplate();  // not use OkHttp
    return new RestTemplate(new OkHttp3ClientHttpRequestFactory());  // use OkHttp
}
@doc
----
</t>
<t tx="swot.20250919222308.5" annotate="7d71002858080000007072696f7269747971014d0f27580a000000707269736574646174657102580a000000323032352d30392d31347103752e">@doc
[source,java]
----
@c
@language java
@Bean
public OkHttpClient okHttpClient() {
    return new OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build();
}
@doc
----

</t>
<t tx="swot.20250919222308.6" annotate="7d71002858080000007072696f7269747971014b06580a000000707269736574646174657102580a000000323032352d30392d31397103752e" icons="5d71007d7101285804000000747970657102580400000066696c657103680358320000002f55736572732f73776f742f6170702f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f707269362e706e677104580700000072656c506174687105580d000000636c656f2f707269362e706e677106580500000077686572657107580e0000006265666f7265486561646c696e6571085807000000796f666673657471094b005807000000786f6666736574710a4b02580400000078706164710b4b0158020000006f6e710c5805000000766e6f6465710d5808000000636c656f49636f6e710e580100000031710f75612e">@doc
[source,java]
----
@c
@language java
// 直接注入也可以的
// public WebClient webClient(ItemServiceProperties properties) {
@Bean
@LoadBalanced // 使用负载均衡
public WebClient webClient() {
    return WebClient.builder()
        // .baseUrl(itemProperties.getUrl())   // 使用注入的 Url
        .baseUrl("http://app-item/item")  // 改成使用 eureka 注册中心调用(去注册中心根据 app-item 查找服务，这种方式必须先开启负载均衡 @LoadBalanced)
        .build();
}
@doc
----
</t>
<t tx="swot.20250920073920.1"></t>
<t tx="swot.20250920105836.1"></t>
<t tx="swot.20250920110103.1">@language java
@others
</t>
<t tx="swot.20250920110131.1">package com.tjise.serviceorder.controller;

import com.tjise.serviceorder.pojo.Order;
import com.tjise.serviceorder.service.OrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
</t>
<t tx="swot.20250920110227.1">/**
 * 订单控制器
 * 处理订单相关的HTTP请求
 */
@RestController
public class OrderController {  
    // 注入订单服务
    @Autowired
    private OrderService orderService;
    @others
}
</t>
<t tx="swot.20250920111059.1">/**
 * 根据订单ID查询订单信息
 * 
 * @param orderId 订单ID
 * @return Order 订单信息
 */
@GetMapping(value = "order/{orderId}")
public Order queryOrderById(@PathVariable("orderId") String orderId) {
    return orderService.queryOrderById(orderId);
}
</t>
<t tx="swot.20250920111147.1">@doc
[source,java]
----
@c
@language java
@Autowired
private org.springframework.cloud.client.discovery.DiscoveryClient discoveryClient;

@GetMapping("/services")
public List&lt;String&gt; getServices() {
    return discoveryClient.getServices();
}
@doc
----
</t>
<t tx="swot.20250920111410.1">@doc
// httpie 测试获取订单详情
// http :8082/order/201810300001

.httpie 测试已经注册的微服务
[source,console]
----
http :8082/services
----

.返回都注册了哪些微服务
....
HTTP/1.1 200
Connection: keep-alive
Content-Type: application/json
Date: Sat, 20 Sep 2025 03:05:52 GMT
Keep-Alive: timeout=60
Transfer-Encoding: chunked

[
    "app-item",
    "app-order"
]
....

说明上面的两个微服务在 Eureka 中已经注册成功了。
</t>
</tnodes>
</leo_file>
