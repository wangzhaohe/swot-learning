<?xml version="1.0" encoding="UTF-8" ?>
<!--@+leo-ver=5-thin-->
<!--@+node:swot.20250924161056.1: * @file src/main/resources/com/tjise/mapper/empMapper.xml-->
<!--@@first-->
<!--@@language xml-->
<!--@+others-->
<!--@+node:swot.20250924161056.2: ** EmpMapper.xml -> 动态SQL-->
<!--@+doc-->
<!--
[source,scss]
....
-->
<!--@@c-->
<!--@@language xml-->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tjise.mapper.EmpMapper">
  <!--@+others-->
  <!--@+node:swot.20250924161056.3: *3* @ignore-node list-->
  <select id="list" resultType="com.tjise.pojo.Emp">
        select * from emp
        <where>
            <if test="name != null">
                name like concat('%', #{name}, '%')
            </if>

            <if test="gender != null">
                and gender = #{gender}
            </if>

            <if test="begin != null and end != null">
                and entrydate between #{begin} and #{end}
            </if>
        </where>
        order by update_time desc
  </select>
  <!--@+node:swot.20250924161056.4: *3* @ignore-node deleteEmpByIds-->
  <!--@@language java-->
  <!--@+doc-->
  <!--
  sql: delete from emp where id in (1, 2, 3);

  ```
  -->
  <!--@@c-->
  <delete id="deleteEmpByIds">
      delete from emp where id in
      <foreach collection="ids" item="id" open="(" close=")" separator=",">
          #{id}
      </foreach>
  </delete>
  <!--@+doc-->
  <!--
  ```

  在 MyBatis 解析后，上面这段 XML 最终会变成一条**完整、可直接执行的 SQL 语句**发送到数据库。  
  以接口传入 `List<Integer> ids = Arrays.asList(1,2,3)` 为例，解析结果等价于：

  ```sql
  DELETE FROM emp WHERE id IN (1, 2, 3);
  ```

  具体过程  
  1. `<foreach>` 把集合 `ids` 展开成 `(1,2,3)` 这一段文本。  
  2. 整个 SQL 模板被替换成：  
     `DELETE FROM emp WHERE id IN ( ?, ?, ? )`  
     并生成对应的 `PreparedStatement` 参数列表 `[1,2,3]`。  
  3. JDBC 驱动收到的是带占位符的预编译 SQL 和三个参数值，**不会**出现 `"in ('1,2,3')"` 这种字符串拼接错误。

  所以，无论你把 `item` 取名 `"id"` 还是 `"aaa"`，最终 SQL 形态都一样：  
  `… IN ( ?, ?, … )`，参数按顺序逐个绑定。

  IMPORTANT: item 的值要和 #{} 中的值一样！
  -->
  <!--@+node:swot.20241230135844.12: *3* updateEmp-->
  <!--@@language xml-->
  <!--@+doc-->
  <!--
  ```
  -->
  <!--@@c-->
  <!-- id 绑定方法名 -->
  <update id="updateEmp">
      UPDATE emp
      <!-- 自动加 set，自动去除多余的逗号 -->
      <set>
          <!--        Emp 成员变量名         数据库字段名    Emp 成员变量名 -->
          <if test = "username!=null">     username    = #{username}  , </if>
          <if test = "name != null">       name        = #{name}      , </if>
          <if test = "gender != null">     gender      = #{gender}    , </if>
          <if test = "image != null">      image       = #{image}     , </if>
          <if test = "job != null">        job         = #{job}       , </if>
          <if test = "entrydate != null">  entrydate   = #{entrydate} , </if>
          <if test = "deptId != null">     dept_id     = #{deptId}    , </if>
          <if test = "updateTime != null"> update_time = #{updateTime}  </if>
      </set>
      WHERE id = #{id}
  </update>
  <!--@+doc-->
  <!--
  ```
  -->
  <!--@-others-->

</mapper>
<!--@+doc-->
<!--
....
-->
<!--@-others-->
<!--@-leo-->
